(include "gdk-types.defs")
(include "gdk-userfuncs.defs")

(define-function notify_startup_complete
  (c-name "gdk_notify_startup_complete")
  (return-type "none")
)

(define-function get_display_arg_name
  (c-name "gdk_get_display_arg_name")
  (return-type "const-gchar*")
)

(define-function get_program_class
  (c-name "gdk_get_program_class")
  (return-type "const-gchar*")
)

(define-function set_program_class
  (c-name "gdk_set_program_class")
  (parameters
    '("const-gchar*" "program_class" (in))
  )
  (return-type "none")
)

(define-function get_display
  (c-name "gdk_get_display")
  (return-type "const-gchar*")
)

(define-function pointer_grab
  (c-name "gdk_pointer_grab")
  (return-type "GdkGrabStatus")
  (parameters
    '("GdkWindow*" "window" (in))
    '("gboolean" "owner_events" (in) (default "FALSE") (null-ok))
    '("GdkEventMask" "event_mask" (in) (default "0") (null-ok))
    '("GdkWindow*" "confine_to" (in) (default "NULL") (null-ok))
    '("GdkCursor*" "cursor" (in) (default "NULL") (null-ok))
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-function pointer_ungrab
  (c-name "gdk_pointer_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-function keyboard_grab
  (c-name "gdk_keyboard_grab")
  (return-type "GdkGrabStatus")
  (parameters
    '("GdkWindow*" "window" (in))
    '("gboolean" "owner_events" (in) (default "FALSE") (null-ok))
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-function keyboard_ungrab
  (c-name "gdk_keyboard_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-function pointer_is_grabbed
  (c-name "gdk_pointer_is_grabbed")
  (return-type "gboolean")
)

(define-function screen_width
  (c-name "gdk_screen_width")
  (return-type "gint")
)

(define-function screen_height
  (c-name "gdk_screen_height")
  (return-type "gint")
)

(define-function screen_width_mm
  (c-name "gdk_screen_width_mm")
  (return-type "gint")
)

(define-function screen_height_mm
  (c-name "gdk_screen_height_mm")
  (return-type "gint")
)

(define-function flush
  (c-name "gdk_flush")
  (return-type "none")
)

(define-function beep
  (c-name "gdk_beep")
  (return-type "none")
)

(define-function set_double_click_time
  (c-name "gdk_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec" (in))
  )
)

;; cairo stuff

(define-function gdk_cairo_create
  (c-name "gdk_cairo_create")
  (return-type "cairo_t*")
  (parameters
    '("GdkDrawable*" "drawable")
  )
)

(define-function gdk_cairo_set_source_color
  (c-name "gdk_cairo_set_source_color")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkColor*" "color")
  )
)

(define-function gdk_cairo_set_source_pixbuf
  (c-name "gdk_cairo_set_source_pixbuf")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkPixbuf*" "pixbuf")
    '("double" "pixbuf_x")
    '("double" "pixbuf_y")
  )
)

(define-function gdk_cairo_rectangle
  (c-name "gdk_cairo_rectangle")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkRectangle*" "rectangle")
  )
)

(define-function gdk_cairo_region
  (c-name "gdk_cairo_region")
  (return-type "none")
  (parameters
    '("cairo_t*" "cr")
    '("GdkRegion*" "region")
  )
)

;; end cairo stuff

(define-function gdk_colormap_get_type
  (c-name "gdk_colormap_get_type")
  (return-type "GType")
)

(define-function gdk_colormap_new
  (is-constructor-of "GdkColormap")
  (c-name "gdk_colormap_new")
  (caller-owns-return #t)
  (return-type "GdkColormap*")
  (parameters
    '("GdkVisual*" "visual" (in))
    '("gboolean" "allocate" (in))
  )
)

(define-function colormap_get_system
  (c-name "gdk_colormap_get_system")
  (return-type "GdkColormap*")
)

(define-function colormap_get_system_size
  (c-name "gdk_colormap_get_system_size")
  (return-type "gint")
  (deprecated "nothing")
)

(define-method alloc_color
  (of-object "GdkColormap")
  (c-name "gdk_colormap_alloc_color")
  (return-type "gboolean")
  (parameters
    '("GdkColor*" "color" (in))
    '("gboolean" "writeable" (in))
    '("gboolean" "best_match" (in))
  )
)
(define-method alloc_colors
	(of-object "GdkColormap")
	(c-name "gdk_colormap_alloc_colors")
	(return-type "none")
	(parameters
		'("GdkColor[]" "colors")
		'("gint" "ncolors")
		'("gboolean" "writeable")
        '("gboolean" "best_match")
        '("gboolean[]" "success" (out))
	)
)
(define-method free_colors
	(of-object "GdkColormap")
	(c-name "gdk_colormap_free_colors")
	(return-type "none")
	(parameters
		'("GdkColor[]" "colors")
        '("gint" "ncolors")
	)
)
(define-function colors_store
	(c-name "gdk_colors_store")
	(return-type "none")
	(parameters
		'("GdkColormap*" "colormap")
		'("GdkColor[]" "colors")
        '("gint" "ncolors")
	)
)
(define-method query_color
  (of-object "GdkColormap")
  (c-name "gdk_colormap_query_color")
  (return-type "none")
  (parameters
    '("gulong" "pixel" (in))
    '("GdkColor*" "result" (out))
  )
)

(define-method get_visual
  (of-object "GdkColormap")
  (c-name "gdk_colormap_get_visual")
  (return-type "GdkVisual*")
)

(define-method get_screen
  (of-object "GdkColormap")
  (c-name "gdk_colormap_get_screen")
  (return-type "GdkScreen*")
)

(define-function color_parse
  (c-name "gdk_color_parse")
  (return-type "gint")
  (parameters
    '("const-gchar*" "spec" (in))
    '("GdkColor*" "color" (out))
  )
)

(define-method white
  (of-object "GdkColormap")
  (c-name "gdk_color_white")
  (return-type "gint")
  (deprecated "nothing")
  (parameters
    '("GdkColor*" "color" (out))
  )
)

(define-method black
  (of-object "GdkColormap")
  (c-name "gdk_color_black")
  (return-type "gint")
  (deprecated "nothing")
  (parameters
    '("GdkColor*" "color" (out))
  )
)

(define-method alloc
  (of-object "GdkColormap")
  (c-name "gdk_color_alloc")
  (return-type "gint")
  (deprecated "gdkColormapAllocColor")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-method change
  (of-object "GdkColormap")
  (c-name "gdk_color_change")
  (return-type "gint")
  (deprecated "nothing")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-function cursor_new
  (is-constructor-of "GdkCursor")
  (c-name "gdk_cursor_new")
  (caller-owns-return #t)
  (return-type "GdkCursor*")
  (parameters
    '("GdkCursorType" "cursor_type" (in))
  )
)

(define-function cursor_new_from_name
  (is-constructor-of "GdkCursor")
  (c-name "gdk_cursor_new_from_name")
  (caller-owns-return #t)
  (return-type "GdkCursor*")
  (parameters
	'("GdkDisplay*" "display" (in))
    '("const-gchar*" "name" (in))
  )
)

(define-function cursor_new_for_display
  (is-constructor-of "GdkCursor")
  (c-name "gdk_cursor_new_for_display")
  (caller-owns-return #t)
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("GdkCursorType" "cursor_type" (in))
  )
)

(define-function cursor_new_from_pixmap
  (is-constructor-of "GdkCursor")
  (c-name "gdk_cursor_new_from_pixmap")
  (caller-owns-return #t)
  (return-type "GdkCursor*")
  (parameters
    '("GdkPixmap*" "source" (in))
    '("GdkPixmap*" "mask" (in))
    '("GdkColor*" "fg" (in))
    '("GdkColor*" "bg" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-function cursor_new_from_pixbuf
  (is-constructor-of "GdkCursor")
  (c-name "gdk_cursor_new_from_pixbuf")
  (caller-owns-return #t)
  (return-type "GdkCursor*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("GdkPixbuf*" "source" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method get_display
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_image
  (of-object "GdkCursor")
  (c-name "gdk_cursor_get_image")
  (return-type "GdkPixbuf*")
)

(define-function gdk_display_get_type
  (c-name "gdk_display_get_type")
  (return-type "GType")
)

(define-function gdk_display_open
  (is-constructor-of "GdkDisplay")
  (c-name "gdk_display_open")
  (caller-owns-return #t)
  (return-type "GdkDisplay*")
  (parameters
    '("const-gchar*" "display_name" (in))
  )
)

(define-method get_name
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_name")
  (return-type "const-gchar*")
)

(define-method get_n_screens
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_n_screens")
  (return-type "gint")
)

(define-method get_screen
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_screen")
  (return-type "GdkScreen*")
  (parameters
    '("gint" "screen_num" (in))
  )
)

(define-method get_default_screen
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_screen")
  (return-type "GdkScreen*")
)

(define-method pointer_ungrab
  (of-object "GdkDisplay")
  (c-name "gdk_display_pointer_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time_" (in) (default "GDK_CURRENT_TIME"))
  )
)

(define-method keyboard_ungrab
  (of-object "GdkDisplay")
  (c-name "gdk_display_keyboard_ungrab")
  (return-type "none")
  (parameters
    '("guint32" "time_" (in) (default "GDK_CURRENT_TIME"))
  )
)

(define-method pointer_is_grabbed
  (of-object "GdkDisplay")
  (c-name "gdk_display_pointer_is_grabbed")
  (return-type "gboolean")
)

(define-method beep
  (of-object "GdkDisplay")
  (c-name "gdk_display_beep")
  (return-type "none")
)

(define-method sync
  (of-object "GdkDisplay")
  (c-name "gdk_display_sync")
  (return-type "none")
)

(define-method close
  (of-object "GdkDisplay")
  (c-name "gdk_display_close")
  (return-type "none")
)

(define-method list_devices
  (of-object "GdkDisplay")
  (c-name "gdk_display_list_devices")
  (caller-owns-return #t)
  (return-type "GList[GdkDevice]")
)

(define-method get_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_event")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
)

(define-method peek_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_peek_event")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
)

(define-method put_event
  (of-object "GdkDisplay")
  (c-name "gdk_display_put_event")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event" (in))
  )
)

(define-method add_client_message_filter
  (of-object "GdkDisplay")
  (c-name "gdk_display_add_client_message_filter")
  (return-type "none")
  (parameters
    '("GdkAtom" "message_type" (in))
    '("GdkFilterFunc" "func" (in))
    '("gpointer" "data" (in))
  )
)

(define-method set_double_click_time
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec" (in))
  )
)

(define-function display_get_default
  (c-name "gdk_display_get_default")
  (return-type "GdkDisplay*")
)

(define-method get_core_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_core_pointer")
  (return-type "GdkDevice*")
)

(define-method get_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_pointer")
  (return-type "none")
  (parameters
    '("GdkScreen**" "screen" (out))
    '("gint*" "x" (out))
    '("gint*" "y" (out))
    '("GdkModifierType*" "mask" (out))
  )
)

(define-method get_window_at_pointer
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_window_at_pointer")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "win_x" (out))
    '("gint*" "win_y" (out))
  )
)

(define-method set_pointer_hooks
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_pointer_hooks")
  (return-type "GdkDisplayPointerHooks*")
  (parameters
    '("const-GdkDisplayPointerHooks*" "new_hooks" (in))
  )
)

(define-method warp_pointer
	(of-object "GdkDisplay")
	(c-name "gdk_display_warp_pointer")
	(return-type "none")
	(parameters
		'("GdkScreen*" "screen")
		'("gint" "x")
		'("gint" "y")
	)
)

; undocumented
;(define-function display_open_default_libgtk_only
;  (c-name "gdk_display_open_default_libgtk_only")
;  (return-type "GdkDisplay*")
;)

(define-method store_clipboard
  (of-object "GdkDisplay")
  (c-name "gdk_display_store_clipboard")
  (return-type "none")
  (parameters
    '("GdkWindow*" "clipboard_window" (in))
    '("guint32" "time_" (in))
    '("GdkAtom[]" "targets" (in))
    '("gint" "n_targets" (in))
  )
)

(define-method supports_selection_notification
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_selection_notification")
  (return-type "gboolean")
)

(define-method request_selection_notification
  (of-object "GdkDisplay")
  (c-name "gdk_display_request_selection_notification")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection" (in))
  )
)

(define-method supports_clipboard_persistence
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_clipboard_persistence")
  (return-type "gboolean")
)

(define-function gdk_display_manager_get_type
  (c-name "gdk_display_manager_get_type")
  (return-type "GType")
)

(define-function display_manager_get
  (c-name "gdk_display_manager_get")
  (return-type "GdkDisplayManager*")
)

(define-method get_default_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_get_default_display")
  (return-type "GdkDisplay*")
)

(define-method set_default_display
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_set_default_display")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display" (in))
  )
)

(define-method list_displays
  (of-object "GdkDisplayManager")
  (c-name "gdk_display_manager_list_displays")
  (caller-owns-return #t)
  (return-type "GSList[GdkDisplay]")
)

(define-method flush
  (of-object "GdkDisplay")
  (c-name "gdk_display_flush")
  (return-type "none")
)

(define-method set_double_click_distance
  (of-object "GdkDisplay")
  (c-name "gdk_display_set_double_click_distance")
  (return-type "none")
  (parameters
    '("guint" "distance" (in))
  )
)

(define-method supports_cursor_alpha
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_cursor_alpha")
  (return-type "gboolean")
)

(define-method supports_cursor_color
  (of-object "GdkDisplay")
  (c-name "gdk_display_supports_cursor_color")
  (return-type "gboolean")
)

(define-method get_default_cursor_size
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_cursor_size")
  (return-type "guint")
)

(define-method get_maximal_cursor_size
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_maximal_cursor_size")
  (return-type "none")
  (parameters
    '("guint*" "width" (out))
    '("guint*" "height" (out))
  )
)

(define-method get_default_group
  (of-object "GdkDisplay")
  (c-name "gdk_display_get_default_group")
  (return-type "GdkWindow*")
)

(define-function drag_context_get_type
  (c-name "gdk_drag_context_get_type")
  (return-type "GType")
)

(define-function drag_context_new
  (is-constructor-of "GdkDragContext")
  (c-name "gdk_drag_context_new")
  (caller-owns-return #t)
  (return-type "GdkDragContext*")
)

(define-method ref
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_ref")
  (return-type "none")
)

(define-method unref
  (of-object "GdkDragContext")
  (c-name "gdk_drag_context_unref")
  (return-type "none")
)

(define-method drag_status
  (of-object "GdkDragContext")
  (c-name "gdk_drag_status")
  (return-type "none")
  (parameters
    '("GdkDragAction" "action" (in))
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-method drop_reply
  (of-object "GdkDragContext")
  (c-name "gdk_drop_reply")
  (return-type "none")
  (parameters
    '("gboolean" "ok" (in))
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-method drop_finish
  (of-object "GdkDragContext")
  (c-name "gdk_drop_finish")
  (return-type "none")
  (parameters
    '("gboolean" "success" (in))
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-method drag_get_selection
  (of-object "GdkDragContext")
  (c-name "gdk_drag_get_selection")
  (return-type "GdkAtom")
)

(define-method drag_begin
  (of-object "GdkWindow")
  (c-name "gdk_drag_begin")
  (return-type "GdkDragContext*")
  (parameters
    '("GList*" "targets" (in))
  )
)

(define-function drag_get_protocol
  (c-name "gdk_drag_get_protocol")
  (return-type "guint32")
  (parameters
    '("guint32" "xid" (in))
    '("GdkDragProtocol*" "protocol" (out))
  )
)

(define-method drag_find_window
  (of-object "GdkDragContext")
  (c-name "gdk_drag_find_window")
  (return-type "none")
  (parameters
    '("GdkWindow*" "drag_window" (in))
    '("gint" "x_root" (in))
    '("gint" "y_root" (in))
    '("GdkWindow**" "dest_window" (out))
    '("GdkDragProtocol*" "protocol" (out))
  )
)

(define-function drag_get_protocol_for_display
  (c-name "gdk_drag_get_protocol_for_display")
  (return-type "guint32")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("guint32" "xid" (in))
    '("GdkDragProtocol*" "protocol" (in))
  )
)

(define-method drag_find_window_for_screen
  (of-object "GdkDragContext")
  (c-name "gdk_drag_find_window_for_screen")
  (return-type "none")
  (parameters
    '("GdkWindow*" "drag_window" (in))
    '("GdkScreen*" "screen" (in))
    '("gint" "x_root" (in))
    '("gint" "y_root" (in))
    '("GdkWindow**" "dest_window" (out))
    '("GdkDragProtocol*" "protocol" (out))
  )
)

(define-method drag_motion
  (of-object "GdkDragContext")
  (c-name "gdk_drag_motion")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "dest_window" (in))
    '("GdkDragProtocol" "protocol" (in))
    '("gint" "x_root" (in))
    '("gint" "y_root" (in))
    '("GdkDragAction" "suggested_action" (in))
    '("GdkDragAction" "possible_actions" (in))
    '("guint32" "time" (in))
  )
)

(define-method drag_drop
  (of-object "GdkDragContext")
  (c-name "gdk_drag_drop")
  (return-type "none")
  (parameters
    '("guint32" "time" (in))
  )
)

(define-method drag_abort
  (of-object "GdkDragContext")
  (c-name "gdk_drag_abort")
  (return-type "none")
  (parameters
    '("guint32" "time" (in))
  )
)

(define-method drag_drop_succeeded
  (of-object "GdkDragContext")
  (c-name "gdk_drag_drop_succeeded")
  (return-type "gboolean")
)

(define-function gdk_drawable_get_type
  (c-name "gdk_drawable_get_type")
  (return-type "GType")
)

(define-method set_data
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_set_data")
  (return-type "none")
  (parameters
    '("const-gchar*" "key" (in))
    '("gpointer" "data" (in))
    '("GDestroyNotify" "destroy_func" (in))
  )
)

(define-method get_data
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_data")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "key" (in))
  )
)

(define-method get_size
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_size")
  (return-type "none")
  (parameters
    '("gint*" "width" (out))
    '("gint*" "height" (out))
  )
)

(define-method set_colormap
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap" (in))
  )
)

(define-method get_colormap
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_colormap")
  (return-type "GdkColormap*")
)

(define-method get_visual
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_visual")
  (return-type "GdkVisual*")
)

(define-method get_depth
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_depth")
  (return-type "gint")
)

(define-method get_screen
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_screen")
  (return-type "GdkScreen*")
)

(define-method get_display
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_display")
  (return-type "GdkDisplay*")
)

(define-method ref
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_ref")
  (return-type "GdkDrawable*")
)

(define-method unref
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_unref")
  (return-type "none")
)

(define-method draw_point
  (of-object "GdkDrawable")
  (c-name "gdk_draw_point")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method draw_line
  (of-object "GdkDrawable")
  (c-name "gdk_draw_line")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x1" (in))
    '("gint" "y1" (in))
    '("gint" "x2" (in))
    '("gint" "y2" (in))
  )
)

(define-method draw_rectangle
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rectangle")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gboolean" "filled" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method draw_arc
  (of-object "GdkDrawable")
  (c-name "gdk_draw_arc")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gboolean" "filled" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("gint" "angle1" (in))
    '("gint" "angle2" (in))
  )
)

(define-method draw_polygon
  (of-object "GdkDrawable")
  (c-name "gdk_draw_polygon")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gboolean" "filled" (in))
    '("GdkPoint[]" "points" (in))
    '("gint" "npoints" (in))
  )
)

(define-method draw_string
  (of-object "GdkDrawable")
  (c-name "gdk_draw_string")
  (return-type "none")
  (deprecated "gdkDrawableDrawLayout")
  (parameters
    '("GdkFont*" "font" (in))
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("const-gchar*" "string" (in))
  )
)

(define-method draw_text
  (of-object "GdkDrawable")
  (c-name "gdk_draw_text")
  (return-type "none")
  (deprecated "gdkDrawableDrawLayout")
  (parameters
    '("GdkFont*" "font" (in))
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("const-gchar*" "text" (in))
    '("gint" "text_length" (in))
  )
)

(define-method draw_text_wc
  (of-object "GdkDrawable")
  (c-name "gdk_draw_text_wc")
  (return-type "none")
  (deprecated "gdkDrawableDrawLayout")
  (parameters
    '("GdkFont*" "font" (in))
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("const-GdkWChar[]" "text" (in))
    '("gint" "text_length" (in))
  )
)

(define-method draw_drawable
  (of-object "GdkDrawable")
  (c-name "gdk_draw_drawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("GdkDrawable*" "src" (in))
    '("gint" "xsrc" (in))
    '("gint" "ysrc" (in))
    '("gint" "xdest" (in))
    '("gint" "ydest" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method draw_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("GdkImage*" "image" (in))
    '("gint" "xsrc" (in))
    '("gint" "ysrc" (in))
    '("gint" "xdest" (in))
    '("gint" "ydest" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method draw_points
  (of-object "GdkDrawable")
  (c-name "gdk_draw_points")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("GdkPoint[]" "points" (in))
    '("gint" "npoints" (in))
  )
)

(define-method draw_segments
  (of-object "GdkDrawable")
  (c-name "gdk_draw_segments")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("GdkSegment[]" "segs" (in))
    '("gint" "nsegs" (in))
  )
)

(define-method draw_lines
  (of-object "GdkDrawable")
  (c-name "gdk_draw_lines")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("GdkPoint[]" "points" (in))
    '("gint" "npoints" (in))
  )
)

(define-method draw_pixbuf
  (of-object "GdkDrawable")
  (c-name "gdk_draw_pixbuf")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in) (null-ok))
    '("GdkPixbuf*" "pixbuf" (in))
    '("gint" "src_x" (in))
    '("gint" "src_y" (in))
    '("gint" "dest_x" (in))
    '("gint" "dest_y" (in))
    '("gint" "width" (in) (default "-1"))
    '("gint" "height" (in) (default "-1"))
    '("GdkRgbDither" "dither" (in) (default "GDK_RGB_DITHER_NORMAL"))
    '("gint" "x_dither" (in) (default "0"))
    '("gint" "y_dither" (in) (default "0"))
  )
)

(define-method draw_glyphs
  (of-object "GdkDrawable")
  (c-name "gdk_draw_glyphs")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("PangoFont*" "font" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("PangoGlyphString*" "glyphs" (in))
  )
)

(define-method draw_layout_line
  (of-object "GdkDrawable")
  (c-name "gdk_draw_layout_line")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("PangoLayoutLine*" "line" (in))
  )
)

(define-method draw_layout
  (of-object "GdkDrawable")
  (c-name "gdk_draw_layout")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("PangoLayout*" "layout" (in))
  )
)

(define-function gdk_draw_layout_line_with_colors
  (c-name "gdk_draw_layout_line_with_colors")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("PangoLayoutLine*" "line" (in))
    '("GdkColor*" "foreground" (in))
    '("GdkColor*" "background" (in))
  )
)

(define-function gdk_draw_layout_with_colors
  (c-name "gdk_draw_layout_with_colors")
  (return-type "none")
  (deprecated "gdkDrawableDrawLayout")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("PangoLayout*" "layout" (in))
    '("GdkColor*" "foreground" (in))
    '("GdkColor*" "background" (in))
  )
)

(define-function gdk_draw_glyphs_transformed
  (c-name "gdk_draw_glyphs_transformed")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkGC*" "gc" (in))
    '("PangoMatrix*" "matrix" (in))
    '("PangoFont*" "font" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("PangoGlyphString*" "glyphs" (in))
  )
)

(define-function gdk_draw_trapezoids
  (c-name "gdk_draw_trapezoids")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkGC*" "gc" (in))
    '("GdkTrapezoid[]" "trapezoids" (in))
    '("gint" "n_trapezoids" (in))
  )
)

(define-method get_image
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_image")
  (caller-owns-return #t)
  (return-type "GdkImage*")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method copy_to_image
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_copy_to_image")
  (return-type "GdkImage*")
  (parameters
	  '("GdkImage*" "image" (null-ok) (in))
    '("gint" "src_x" (in))
    '("gint" "src_y" (in))
	'("gint" "dest_x" (in))
	'("gint" "dest_y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method get_clip_region
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_clip_region")
  (caller-owns-return #t)
  (return-type "GdkRegion*")
)

(define-method get_visible_region
  (of-object "GdkDrawable")
  (c-name "gdk_drawable_get_visible_region")
  (caller-owns-return #t)
  (return-type "GdkRegion*")
)

(define-function gdk_event_get_type
  (c-name "gdk_event_get_type")
  (return-type "GType")
)

(define-function events_pending
  (c-name "gdk_events_pending")
  (return-type "gboolean")
)

(define-function event_get
  (c-name "gdk_event_get")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
)

(define-function event_peek
  (c-name "gdk_event_peek")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
)

(define-function event_get_graphics_expose
  (c-name "gdk_event_get_graphics_expose")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
  (parameters
    '("GdkWindow*" "window" (in))
  )
)

(define-method put
  (of-object "GdkEvent")
  (c-name "gdk_event_put")
  (return-type "none")
)

(define-function event_new
  (is-constructor-of "GdkEvent")
  (c-name "gdk_event_new")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
  (parameters
    '("GdkEventType" "type" (in))
  )
)

(define-method copy
  (of-object "GdkEvent")
  (c-name "gdk_event_copy")
  (caller-owns-return #t)
  (return-type "GdkEvent*")
)

(define-method free
  (of-object "GdkEvent")
  (c-name "gdk_event_free")
  (return-type "none")
)

(define-method get_time
  (of-object "GdkEvent")
  (c-name "gdk_event_get_time")
  (return-type "guint32")
)

(define-method get_state
  (of-object "GdkEvent")
  (c-name "gdk_event_get_state")
  (return-type "gboolean")
  (parameters
    '("GdkModifierType*" "state" (in))
  )
)

(define-method get_coords
  (of-object "GdkEvent")
  (c-name "gdk_event_get_coords")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "x_win" (out))
    '("gdouble*" "y_win" (out))
  )
)

(define-method get_root_coords
  (of-object "GdkEvent")
  (c-name "gdk_event_get_root_coords")
  (return-type "gboolean")
  (parameters
    '("gdouble*" "x_root" (out))
    '("gdouble*" "y_root" (out))
  )
)

(define-method get_axis
  (of-object "GdkEvent")
  (c-name "gdk_event_get_axis")
  (return-type "gboolean")
  (parameters
    '("GdkAxisUse" "axis_use" (in))
    '("gdouble*" "value" (out))
  )
)

(define-function gdk_event_handler_set
  (c-name "gdk_event_handler_set")
  (return-type "none")
  (parameters
    '("GdkEventFunc" "func" (in))
    '("gpointer" "data" (in))
    '("GDestroyNotify" "notify" (in))
  )
)

(define-method set_screen
  (of-object "GdkEvent")
  (c-name "gdk_event_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen" (in))
  )
)

(define-method get_screen
  (of-object "GdkEvent")
  (c-name "gdk_event_get_screen")
  (return-type "GdkScreen*")
)

(define-function set_show_events
  (c-name "gdk_set_show_events")
  (return-type "none")
  (parameters
    '("gboolean" "show_events" (in))
  )
)

(define-function get_show_events
  (c-name "gdk_get_show_events")
  (return-type "gboolean")
)

(define-function gdk_add_client_message_filter
  (c-name "gdk_add_client_message_filter")
  (return-type "none")
  (parameters
    '("GdkAtom" "message_type" (in))
    '("GdkFilterFunc" "func" (in))
    '("gpointer" "data" (in))
  )
)

(define-function setting_get
  (c-name "gdk_setting_get")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name" (in))
    '("GValue*" "value" (out))
  )
)

(define-method id
  (of-object "GdkFont")
  (c-name "gdk_font_id")
  (return-type "gint")
)

(define-function font_load_for_display
  (c-name "gdk_font_load_for_display")
  (caller-owns-return #t)
  (return-type "GdkFont*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("const-gchar*" "font_name" (in))
  )
)

(define-function fontset_load_for_display
  (c-name "gdk_fontset_load_for_display")
  (return-type "GdkFont*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("const-gchar*" "fontset_name" (in))
  )
)

(define-function font_from_description_for_display
  (c-name "gdk_font_from_description_for_display")
  (caller-owns-return #t)
  (return-type "GdkFont*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("PangoFontDescription*" "font_desc" (in))
  )
)

(define-function font_load
  (is-constructor-of "GdkFont")
  (c-name "gdk_font_load")
  (caller-owns-return #t)
  (return-type "GdkFont*")
  (parameters
    '("const-gchar*" "font_name" (in))
  )
)

(define-function fontset_load
  (c-name "gdk_fontset_load")
  (return-type "GdkFont*")
  (parameters
    '("const-gchar*" "fontset_name" (in))
  )
)

(define-function font_from_description
  (c-name "gdk_font_from_description")
  (caller-owns-return #t)
  (return-type "GdkFont*")
  (parameters
    '("PangoFontDescription*" "font_desc" (in))
  )
)

(define-method string_width
  (of-object "GdkFont")
  (c-name "gdk_string_width")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string" (in))
  )
)

(define-method width
  (of-object "GdkFont")
  (c-name "gdk_text_width")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text" (in))
    '("gint" "text_length" (in) (default "-1"))
  )
)

(define-method text_width_wc
  (of-object "GdkFont")
  (c-name "gdk_text_width_wc")
  (return-type "gint")
  (parameters
    '("const-GdkWChar[]" "text" (in))
    '("gint" "text_length" (in))
  )
)

(define-method char_width
  (of-object "GdkFont")
  (c-name "gdk_char_width")
  (return-type "gint")
  (parameters
    '("gchar" "character" (in))
  )
)

(define-method char_width_wc
  (of-object "GdkFont")
  (c-name "gdk_char_width_wc")
  (return-type "gint")
  (parameters
    '("GdkWChar" "character" (in))
  )
)

(define-method string_measure
  (of-object "GdkFont")
  (c-name "gdk_string_measure")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string" (in))
  )
)

(define-method measure
  (of-object "GdkFont")
  (c-name "gdk_text_measure")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text" (in))
    '("gint" "text_length" (in) (default "-1"))
  )
)

(define-method char_measure
  (of-object "GdkFont")
  (c-name "gdk_char_measure")
  (return-type "gint")
  (parameters
    '("gchar" "character" (in))
  )
)

(define-method string_height
  (of-object "GdkFont")
  (c-name "gdk_string_height")
  (return-type "gint")
  (parameters
    '("const-gchar*" "string" (in))
  )
)

(define-method height
  (of-object "GdkFont")
  (c-name "gdk_text_height")
  (return-type "gint")
  (parameters
    '("const-gchar*" "text" (in))
    '("gint" "text_length" (in) (default "-1"))
  )
)

(define-method char_height
  (of-object "GdkFont")
  (c-name "gdk_char_height")
  (return-type "gint")
  (parameters
    '("gchar" "character" (in))
  )
)

(define-method extents
  (of-object "GdkFont")
  (c-name "gdk_text_extents")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (in))
    '("gint" "text_length" (in))
    '("gint*" "lbearing" (out))
    '("gint*" "rbearing" (out))
    '("gint*" "width" (out))
    '("gint*" "ascent" (out))
    '("gint*" "descent" (out))
  )
)

(define-method text_extents_wc
  (of-object "GdkFont")
  (c-name "gdk_text_extents_wc")
  (return-type "none")
  (parameters
    '("const-GdkWChar*" "text" (in))
    '("gint" "text_length" (in))
    '("gint*" "lbearing" (out))
    '("gint*" "rbearing" (out))
    '("gint*" "width" (out))
    '("gint*" "ascent" (out))
    '("gint*" "descent" (out))
  )
)

(define-method string_extents
  (of-object "GdkFont")
  (c-name "gdk_string_extents")
  (return-type "none")
  (parameters
    '("const-gchar*" "string" (in))
    '("gint*" "lbearing" (out))
    '("gint*" "rbearing" (out))
    '("gint*" "width" (out))
    '("gint*" "ascent" (out))
    '("gint*" "descent" (out))
  )
)

(define-method get_display
  (of-object "GdkFont")
  (c-name "gdk_font_get_display")
  (return-type "GdkDisplay*")
)

(define-function gdk_gc_get_type
  (c-name "gdk_gc_get_type")
  (return-type "GType")
)

(define-function gc_new
  (is-constructor-of "GdkGC")
  (c-name "gdk_gc_new")
  (caller-owns-return #t)
  (return-type "GdkGC*")
  (parameters
    '("GdkDrawable*" "drawable" (in))
  )
)

(define-method new_gc
  (of-object "GdkDrawable")
  (c-name "gdk_gc_new_with_values")
  (caller-owns-return #t)
  (return-type "GdkGC*")
  (parameters
    '("GdkGCValues*" "values" (in))
    '("GdkGCValuesMask" "values_mask" (in))
  )
)

(define-method get_values
  (of-object "GdkGC")
  (c-name "gdk_gc_get_values")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values" (out))
  )
)

(define-method set_values
  (of-object "GdkGC")
  (c-name "gdk_gc_set_values")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values" (in))
    '("GdkGCValuesMask" "values_mask" (in))
  )
)

(define-method set_foreground
  (of-object "GdkGC")
  (c-name "gdk_gc_set_foreground")
  (return-type "none")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-method set_background
  (of-object "GdkGC")
  (c-name "gdk_gc_set_background")
  (return-type "none")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-method set_font
  (of-object "GdkGC")
  (c-name "gdk_gc_set_font")
  (return-type "none")
  (parameters
    '("GdkFont*" "font" (in))
  )
)

(define-method set_function
  (of-object "GdkGC")
  (c-name "gdk_gc_set_function")
  (return-type "none")
  (parameters
    '("GdkFunction" "function" (in))
  )
)

(define-method set_fill
  (of-object "GdkGC")
  (c-name "gdk_gc_set_fill")
  (return-type "none")
  (parameters
    '("GdkFill" "fill" (in))
  )
)

(define-method set_tile
  (of-object "GdkGC")
  (c-name "gdk_gc_set_tile")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "tile" (in))
  )
)

(define-method set_stipple
  (of-object "GdkGC")
  (c-name "gdk_gc_set_stipple")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "stipple" (in))
  )
)

(define-method set_ts_origin
  (of-object "GdkGC")
  (c-name "gdk_gc_set_ts_origin")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method set_clip_origin
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_origin")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method set_clip_mask
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "mask" (in))
  )
)

(define-method set_clip_rectangle
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_rectangle")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rectangle" (in))
  )
)

(define-method set_clip_region
  (of-object "GdkGC")
  (c-name "gdk_gc_set_clip_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region" (in))
  )
)

(define-method set_subwindow
  (of-object "GdkGC")
  (c-name "gdk_gc_set_subwindow")
  (return-type "none")
  (parameters
    '("GdkSubwindowMode" "mode" (in))
  )
)

(define-method set_exposures
  (of-object "GdkGC")
  (c-name "gdk_gc_set_exposures")
  (return-type "none")
  (parameters
    '("gboolean" "exposures" (in))
  )
)

(define-method set_line_attributes
  (of-object "GdkGC")
  (c-name "gdk_gc_set_line_attributes")
  (return-type "none")
  (parameters
    '("gint" "line_width" (in))
    '("GdkLineStyle" "line_style" (in))
    '("GdkCapStyle" "cap_style" (in))
    '("GdkJoinStyle" "join_style" (in))
  )
)

(define-method set_dashes
  (of-object "GdkGC")
  (c-name "gdk_gc_set_dashes")
  (return-type "none")
  (parameters
    '("gint" "dash_offset" (in))
    '("gint8[]" "dash_list" (in))
    '("gint" "n" (in))
  )
)

(define-method offset
  (of-object "GdkGC")
  (c-name "gdk_gc_offset")
  (return-type "none")
  (parameters
    '("gint" "x_offset" (in))
    '("gint" "y_offset" (in))
  )
)

(define-method copy
  (of-object "GdkGC")
  (c-name "gdk_gc_copy")
  (return-type "none")
  (parameters
    '("GdkGC*" "src_gc" (in))
  )
)

(define-method set_colormap
  (of-object "GdkGC")
  (c-name "gdk_gc_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap" (in))
  )
)

(define-method get_colormap
  (of-object "GdkGC")
  (c-name "gdk_gc_get_colormap")
  (return-type "GdkColormap*")
)

(define-method set_rgb_fg_color
  (of-object "GdkGC")
  (c-name "gdk_gc_set_rgb_fg_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-method set_rgb_bg_color
  (of-object "GdkGC")
  (c-name "gdk_gc_set_rgb_bg_color")
  (return-type "none")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-method get_screen
  (of-object "GdkGC")
  (c-name "gdk_gc_get_screen")
  (return-type "GdkScreen*")
)

(define-function gdk_image_get_type
  (c-name "gdk_image_get_type")
  (return-type "GType")
)

(define-function gdk_image_new
  (is-constructor-of "GdkImage")
  (c-name "gdk_image_new")
  (caller-owns-return #t)
  (return-type "GdkImage*")
  (parameters
    '("GdkImageType" "type" (in))
    '("GdkVisual*" "visual" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method image_get
  (of-object "GdkDrawable")
  (c-name "gdk_image_get")
  (caller-owns-return #t)
  (return-type "GdkImage*")
  (deprecated "gdkDrawableGetImage")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method put_pixel
  (of-object "GdkImage")
  (c-name "gdk_image_put_pixel")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("guint32" "pixel" (in))
  )
)

(define-method get_pixel
  (of-object "GdkImage")
  (c-name "gdk_image_get_pixel")
  (return-type "guint32")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method set_colormap
  (of-object "GdkImage")
  (c-name "gdk_image_set_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap" (in))
  )
)

(define-method get_colormap
  (of-object "GdkImage")
  (c-name "gdk_image_get_colormap")
  (return-type "GdkColormap*")
)

(define-function device_get_type
  (c-name "gdk_device_get_type")
  (return-type "GType")
)

(define-function devices_list
  (c-name "gdk_devices_list")
  (return-type "GList[GdkDevice]")
)

(define-method set_source
  (of-object "GdkDevice")
  (c-name "gdk_device_set_source")
  (return-type "none")
  (parameters
    '("GdkInputSource" "source" (in))
  )
)

(define-method set_mode
  (of-object "GdkDevice")
  (c-name "gdk_device_set_mode")
  (return-type "gboolean")
  (parameters
    '("GdkInputMode" "mode" (in))
  )
)

(define-method set_key
  (of-object "GdkDevice")
  (c-name "gdk_device_set_key")
  (return-type "none")
  (parameters
    '("guint" "index" (in))
    '("guint" "keyval" (in))
    '("GdkModifierType" "modifiers" (in))
  )
)

(define-method set_axis_use
  (of-object "GdkDevice")
  (c-name "gdk_device_set_axis_use")
  (return-type "none")
  (parameters
    '("guint" "index" (in))
    '("GdkAxisUse" "use" (in))
  )
)

(define-method get_state
  (of-object "GdkDevice")
  (c-name "gdk_device_get_state")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window" (in))
    '("gdouble*" "axes" (out))
    '("GdkModifierType*" "mask" (out))
  )
)

(define-method get_history
  (of-object "GdkDevice")
  (c-name "gdk_device_get_history")
  (return-type "gboolean")
  (parameters
    '("GdkWindow*" "window" (in))
    '("guint32" "start" (in))
    '("guint32" "stop" (in))
    '("GdkTimeCoord**[]" "events" (out))
    '("gint*" "n_events" (out))
  )
)

(define-function device_free_history
  (c-name "gdk_device_free_history")
  (return-type "none")
  (parameters
    '("GdkTimeCoord*[]" "events" (in))
    '("gint" "n_events" (in))
  )
)

(define-method get_axis
  (of-object "GdkDevice")
  (c-name "gdk_device_get_axis")
  (return-type "gboolean")
  (parameters
    '("gdouble[]" "axes" (in))
    '("GdkAxisUse" "use" (in))
    '("gdouble*" "value" (out))
  )
)

(define-method input_set_extension_events
  (of-object "GdkWindow")
  (c-name "gdk_input_set_extension_events")
  (return-type "none")
  (parameters
    '("gint" "mask" (in))
    '("GdkExtensionMode" "mode" (in))
  )
)

(define-function device_get_core_pointer
  (c-name "gdk_device_get_core_pointer")
  (return-type "GdkDevice*")
)

(define-function gdk_keymap_get_type
  (c-name "gdk_keymap_get_type")
  (return-type "GType")
)

(define-function keymap_get_default
  (c-name "gdk_keymap_get_default")
  (return-type "GdkKeymap*")
)

(define-function keymap_get_for_display
  (c-name "gdk_keymap_get_for_display")
  (return-type "GdkKeymap*")
  (parameters
    '("GdkDisplay*" "display" (in))
  )
)

(define-method lookup_key
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_lookup_key")
  (return-type "guint")
  (parameters
    '("const-GdkKeymapKey*" "key" (in))
  )
)

(define-method translate_keyboard_state
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_translate_keyboard_state")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode" (in))
    '("GdkModifierType" "state" (in))
    '("gint" "group" (in))
    '("guint*" "keyval" (out))
    '("gint*" "effective_group" (out))
    '("gint*" "level" (out))
    '("GdkModifierType*" "consumed_modifiers" (out))
  )
)

(define-method get_entries_for_keyval
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_entries_for_keyval")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval" (in))
    '("GdkKeymapKey*[]" "keys" (out))
    '("gint*" "n_keys" (out))
  )
)

(define-method get_entries_for_keycode
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_entries_for_keycode")
  (return-type "gboolean")
  (parameters
    '("guint" "hardware_keycode" (in))
    '("GdkKeymapKey*[]" "keys" (out))
    '("guint*[]" "keyvals" (out))
    '("gint*" "n_entries" (out))
  )
)

(define-method get_direction
  (of-object "GdkKeymap")
  (c-name "gdk_keymap_get_direction")
  (return-type "PangoDirection")
)

(define-function keyval_name
  (c-name "gdk_keyval_name")
  (return-type "gchar*")
  (parameters
    '("guint" "keyval" (in))
  )
)

(define-function keyval_from_name
  (c-name "gdk_keyval_from_name")
  (return-type "guint")
  (parameters
    '("const-gchar*" "keyval_name" (in))
  )
)

(define-function keyval_convert_case
  (c-name "gdk_keyval_convert_case")
  (return-type "none")
  (parameters
    '("guint" "symbol" (in))
    '("guint*" "lower" (out))
    '("guint*" "upper" (out))
  )
)

(define-function keyval_to_upper
  (c-name "gdk_keyval_to_upper")
  (return-type "guint")
  (parameters
    '("guint" "keyval" (in))
  )
)

(define-function keyval_to_lower
  (c-name "gdk_keyval_to_lower")
  (return-type "guint")
  (parameters
    '("guint" "keyval" (in))
  )
)

(define-function keyval_is_upper
  (c-name "gdk_keyval_is_upper")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval" (in))
  )
)

(define-function keyval_is_lower
  (c-name "gdk_keyval_is_lower")
  (return-type "gboolean")
  (parameters
    '("guint" "keyval" (in))
  )
)

(define-function keyval_to_unicode
  (c-name "gdk_keyval_to_unicode")
  (return-type "guint32")
  (parameters
    '("guint" "keyval" (in))
  )
)

(define-function unicode_to_keyval
  (c-name "gdk_unicode_to_keyval")
  (return-type "guint")
  (parameters
    '("guint32" "wc" (in))
  )
)

(define-function gdk_pango_renderer_get_type
  (c-name "gdk_pango_renderer_get_type")
  (return-type "GType")
)

(define-function gdk_pango_renderer_new
  (is-constructor-of "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_new")
  (caller-owns-return #t)
  (return-type "PangoRenderer*")
  (parameters
    '("GdkScreen*" "screen" (in))
  )
)

(define-function gdk_pango_renderer_get_default
  (c-name "gdk_pango_renderer_get_default")
  (return-type "PangoRenderer*")
  (parameters
    '("GdkScreen*" "screen" (in))
  )
)

(define-method set_drawable
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_drawable")
  (return-type "none")
  (parameters
    '("GdkDrawable*" "drawable" (in) (null-ok))
  )
)

(define-method set_gc
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_gc")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in) (null-ok))
  )
)

(define-method set_stipple
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_stipple")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part" (in))
    '("GdkBitmap*" "stipple" (in))
  )
)

(define-method set_override_color
  (of-object "GdkPangoRenderer")
  (c-name "gdk_pango_renderer_set_override_color")
  (return-type "none")
  (parameters
    '("PangoRenderPart" "part" (in))
    '("const-GdkColor*" "color" (in) (null-ok))
  )
)

(define-function gdk_pango_context_get_for_screen
  (c-name "gdk_pango_context_get_for_screen")
  (return-type "PangoContext*")
  (parameters
    '("GdkScreen*" "screen" (in))
  )
)

(define-function gdk_pango_context_get
  (c-name "gdk_pango_context_get")
  (return-type "PangoContext*")
)

(define-function gdk_pango_context_set_colormap
  (c-name "gdk_pango_context_set_colormap")
  (return-type "none")
  (parameters
    '("PangoContext*" "context" (in))
    '("GdkColormap*" "colormap" (in))
  )
)

(define-function gdk_pango_layout_line_get_clip_region
  (c-name "gdk_pango_layout_line_get_clip_region")
  (caller-owns-return #t)
  (return-type "GdkRegion*")
  (parameters
    '("PangoLayoutLine*" "line" (in))
    '("gint" "x_origin" (in))
    '("gint" "y_origin" (in))
    '("gint*" "index_ranges" (in))
    '("gint" "n_ranges" (in))
  )
)

(define-function gdk_pango_layout_get_clip_region
  (c-name "gdk_pango_layout_get_clip_region")
  (caller-owns-return #t)
  (return-type "GdkRegion*")
  (parameters
    '("PangoLayout*" "layout" (in))
    '("gint" "x_origin" (in))
    '("gint" "y_origin" (in))
    '("gint*" "index_ranges" (in))
    '("gint" "n_ranges" (in))
  )
)

(define-function gdk_pango_attr_stipple_new
  (is-constructor-of "GdkPangoAttrStipple")
  (c-name "gdk_pango_attr_stipple_new")
  (caller-owns-return #t)
  (return-type "PangoAttribute*")
  (parameters
    '("GdkBitmap*" "stipple" (in))
  )
)

(define-function gdk_pango_attr_embossed_new
  (is-constructor-of "GdkPangoAttrEmbossed")
  (c-name "gdk_pango_attr_embossed_new")
  (caller-owns-return #t)
  (return-type "PangoAttribute*")
  (parameters
    '("gboolean" "embossed" (in))
  )
)

(define-method render_threshold_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_threshold_alpha")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "bitmap" (in))
    '("int" "src_x" (in))
    '("int" "src_y" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "width" (in) (default "-1"))
    '("int" "height" (in) (default "-1"))
    '("int" "alpha_threshold" (in))
  )
)

(define-method render_to_drawable
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_to_drawable")
  (return-type "none")
  (deprecated "gdkDrawableDrawPixbuf")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkGC*" "gc" (in))
    '("int" "src_x" (in) (default "0"))
    '("int" "src_y" (in) (default "0"))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "width" (in) (default "-1"))
    '("int" "height" (in) (default "-1"))
    '("GdkRgbDither" "dither" (in) (default "GDK_RGB_DITHER_NORMAL"))
    '("gint" "x_dither" (in) (default "0"))
    '("gint" "y_dither" (in) (default "0"))
  )
)

(define-method render_to_drawable_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_to_drawable_alpha")
  (return-type "none")
  (deprecated "gdkDrawableDrawPixbuf")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("int" "src_x" (in) (default "0"))
    '("int" "src_y" (in) (default "0"))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "width" (in) (default "-1"))
    '("int" "height" (in) (default "-1"))
    '("GdkPixbufAlphaMode" "alpha_mode" (in) (null-ok))
    '("int" "alpha_threshold" (in) (null-ok))
    '("GdkRgbDither" "dither" (in) (default "GDK_RGB_DITHER_NORMAL"))
    '("gint" "x_dither" (in) (default "0"))
    '("gint" "y_dither" (in) (default "0"))
  )
)

(define-method render_pixmap_and_mask
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_pixmap_and_mask")
  (return-type "none")
  (parameters
    '("GdkPixmap**" "pixmap_return" (out))
    '("GdkBitmap**" "mask_return" (out))
    '("int" "alpha_threshold" (in) (default "127"))
  )
)

(define-method render_pixmap_and_mask_for_colormap
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_render_pixmap_and_mask_for_colormap")
  (return-type "none")
  (parameters
	'("GdkColormap*" "colormap")
    '("GdkPixmap**" "pixmap_return" (out))
    '("GdkBitmap**" "mask_return" (out))
    '("int" "alpha_threshold" (in) (default "127"))
  )
)

(define-function pixbuf_get_from_drawable
  (c-name "gdk_pixbuf_get_from_drawable")
  (return-type "GdkPixbuf*")
  (caller-owns-return #t)
  (parameters
	'("GdkPixbuf*" "dest" (null-ok))
	'("GdkDrawable*" "src" (in))
  '("GdkColormap*" "cmap" (in) (null-ok))
    '("int" "src_x" (in))
    '("int" "src_y" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "width" (in))
    '("int" "height" (in))
  )
)

(define-function pixbuf_get_from_image
  (c-name "gdk_pixbuf_get_from_image")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
	'("GdkPixbuf*" "dest" (out) (null-ok))
    '("GdkImage*" "src" (in))
    '("GdkColormap*" "cmap" (in))
    '("int" "src_x" (in))
    '("int" "src_y" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "width" (in))
    '("int" "height" (in))
  )
)

(define-function gdk_pixmap_get_type
  (c-name "gdk_pixmap_get_type")
  (return-type "GType")
)

(define-function gdk_pixmap_new
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_new")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in) (null-ok))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("gint" "depth" (in) (default "-1"))
  )
)

(define-function bitmap_create_from_data
  (c-name "gdk_bitmap_create_from_data")
  (is-constructor-of "GdkPixmap")
  (caller-owns-return #t)
  (return-type "GdkBitmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in) (null-ok))
    '("const-guchar*" "data" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-function pixmap_create_from_data
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_create_from_data")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in) (null-ok))
    '("const-guchar*" "data" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("gint" "depth" (in))
    '("GdkColor*" "fg" (in))
    '("GdkColor*" "bg" (in))
  )
)

(define-function pixmap_create_from_xpm
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_create_from_xpm")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkBitmap**" "mask" (out))
    '("GdkColor*" "transparent_color" (in))
    '("const-gchar*" "filename" (in))
  )
)

(define-function pixmap_colormap_create_from_xpm
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_colormap_create_from_xpm")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkColormap*" "colormap" (in))
    '("GdkBitmap**" "mask" (out))
    '("GdkColor*" "transparent_color" (in))
    '("const-gchar*" "filename" (in))
  )
)

(define-function pixmap_create_from_xpm_d
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_create_from_xpm_d")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkBitmap**" "mask" (out))
    '("GdkColor*" "transparent_color" (in))
    '("gchar**" "data" (in))
  )
)

(define-function pixmap_colormap_create_from_xpm_d
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_colormap_create_from_xpm_d")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDrawable*" "drawable" (in))
    '("GdkColormap*" "colormap" (in))
    '("GdkBitmap**" "mask" (out))
    '("GdkColor*" "transparent_color" (in))
    '("gchar**" "data" (in))
  )
)

(define-function pixmap_foreign_new
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_foreign_new")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkNativeWindow" "anid" (in))
  )
)

(define-function pixmap_lookup
  (c-name "gdk_pixmap_lookup")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkNativeWindow" "anid" (in))
  )
)

(define-function pixmap_foreign_new_for_display
  (is-constructor-of "GdkPixmap")
  (c-name "gdk_pixmap_foreign_new_for_display")
  (caller-owns-return #t)
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("GdkNativeWindow" "anid" (in))
  )
)

(define-function pixmap_lookup_for_display
  (c-name "gdk_pixmap_lookup_for_display")
  (return-type "GdkPixmap*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("GdkNativeWindow" "anid" (in))
  )
)

(define-function name
  (c-name "gdk_atom_name")
  (caller-owns-return #t)
  (return-type "gchar*")
  (parameters
    '("GdkAtom" "atom" (in))
  )
)

(define-function atom_intern
  (c-name "gdk_atom_intern")
  (return-type "GdkAtom")
  (parameters
    '("gchar*" "atom_name" (in))
    '("gboolean" "only_if_exists" (in) (default "FALSE"))
  )
)

(define-method property_get
  (of-object "GdkWindow")
  (c-name "gdk_property_get")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "property" (in))
    '("GdkAtom" "type" (in))
    '("gulong" "offset" (in))
    '("gulong" "length" (in))
    '("gint" "pdelete" (in))
    '("GdkAtom*" "actual_property_type" (out))
    '("gint*" "actual_format" (out))
    '("gint*" "actual_length" (out))
    '("guchar**" "data" (out))
  )
)

(define-method property_change
  (of-object "GdkWindow")
  (c-name "gdk_property_change")
  (return-type "none")
  (parameters
    '("GdkAtom" "property" (in))
    '("GdkAtom" "type" (in))
    '("gint" "format" (in))
    '("GdkPropMode" "mode" (in))
    '("const-guchar*" "data" (in))
    '("gint" "nelements" (in))
  )
)

(define-method property_delete
  (of-object "GdkWindow")
  (c-name "gdk_property_delete")
  (return-type "none")
  (parameters
    '("GdkAtom" "property" (in))
  )
)

(define-function rgb_xpixel_from_rgb
  (c-name "gdk_rgb_xpixel_from_rgb")
  (return-type "gulong")
  (parameters
    '("guint32" "rgb" (in))
  )
)

(define-function rgb_gc_set_foreground
  (c-name "gdk_rgb_gc_set_foreground")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("guint32" "rgb" (in))
  )
)

(define-function rgb_gc_set_background
  (c-name "gdk_rgb_gc_set_background")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("guint32" "rgb" (in))
  )
)

(define-method draw_rgb_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("GdkRgbDither" "dith" (in))
    '("guchar*" "rgb_buf" (in))
    '("gint" "rowstride" (in))
  )
)

(define-method draw_rgb_image_dithalign
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_image_dithalign")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("GdkRgbDither" "dith" (in))
    '("guchar*" "rgb_buf" (in))
    '("gint" "rowstride" (in))
    '("gint" "xdith" (in))
    '("gint" "ydith" (in))
  )
)

(define-method draw_rgb_32_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_32_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("GdkRgbDither" "dith" (in))
    '("guchar*" "buf" (in))
    '("gint" "rowstride" (in))
  )
)

(define-method draw_rgb_32_image_dithalign
  (of-object "GdkDrawable")
  (c-name "gdk_draw_rgb_32_image_dithalign")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("GdkRgbDither" "dith" (in))
    '("guchar*" "buf" (in))
    '("gint" "rowstride" (in))
	'("gint" "xdith" (in))
	'("gint" "ydith" (in))
  )
)

(define-function rgb_find_color
	(c-name "gdk_rgb_find_color")
	(return-type "none")
	(parameters
		'("GdkColormap*" "colormap")
		'("GdkColor*" "color")
	)
)

(define-function rgb_colormap_ditherable
	(c-name "gdk_rgb_colormap_ditherable")
	(return-type "gboolean")
	(parameters
		'("GdkColormap*" "colormap")
	)
)

(define-method draw_gray_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_gray_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("GdkRgbDither" "dith" (in))
    '("guchar*" "buf" (in))
    '("gint" "rowstride" (in))
  )
)

(define-function rgb_cmap_new
  (c-name "gdk_rgb_cmap_new")
  (caller-owns-return #t)
  (return-type "GdkRgbCmap*")
  (parameters
    '("guint32[]" "colors" (in))
    '("gint" "n_colors" (in))
  )
)

(define-method draw_indexed_image
  (of-object "GdkDrawable")
  (c-name "gdk_draw_indexed_image")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("GdkRgbDither" "dith" (in))
    '("guchar*" "buf" (in))
    '("gint" "rowstride" (in))
    '("GdkRgbCmap*" "cmap" (in))
  )
)

(define-function rgb_ditherable
  (c-name "gdk_rgb_ditherable")
  (return-type "gboolean")
)

(define-function rgb_set_verbose
  (c-name "gdk_rgb_set_verbose")
  (return-type "none")
  (parameters
    '("gboolean" "verbose" (in))
  )
)

(define-function rgb_set_install
  (c-name "gdk_rgb_set_install")
  (return-type "none")
  (parameters
    '("gboolean" "install" (in))
  )
)

(define-function rgb_set_min_colors
  (c-name "gdk_rgb_set_min_colors")
  (return-type "none")
  (parameters
    '("gint" "min_colors" (in))
  )
)

(define-function rgb_get_colormap
  (c-name "gdk_rgb_get_colormap")
  (return-type "GdkColormap*")
)

(define-function rgb_get_cmap
  (c-name "gdk_rgb_get_cmap")
  (return-type "GdkColormap*")
  (deprecated "gdkRgbGetColormap")
)

(define-function rgb_get_visual
  (c-name "gdk_rgb_get_visual")
  (return-type "GdkVisual*")
)

(define-function gdk_screen_get_type
  (c-name "gdk_screen_get_type")
  (return-type "GType")
)

(define-method get_default_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_default_colormap")
  (return-type "GdkColormap*")
)

(define-method set_default_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_set_default_colormap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap" (in))
  )
)

(define-method get_system_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_system_colormap")
  (return-type "GdkColormap*")
)

(define-method get_system_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_system_visual")
  (return-type "GdkVisual*")
)

(define-method get_rgb_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgb_colormap")
  (return-type "GdkColormap*")
) 

(define-method get_rgba_colormap
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgba_colormap")
  (return-type "GdkColormap*")
)

(define-method get_rgb_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgb_visual")
  (return-type "GdkVisual*")
)

(define-method get_rgba_visual
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_rgba_visual")
  (return-type "GdkVisual*")
)

(define-method get_root_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_root_window")
  (return-type "GdkWindow*")
)

(define-method get_display
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_display")
  (return-type "GdkDisplay*")
)

(define-method get_number
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_number")
  (return-type "gint")
)

(define-method get_width
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_width")
  (return-type "gint")
)

(define-method get_height
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_height")
  (return-type "gint")
)

(define-method get_width_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_width_mm")
  (return-type "gint")
)

(define-method get_height_mm
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_height_mm")
  (return-type "gint")
)

(define-method list_visuals
  (of-object "GdkScreen")
  (c-name "gdk_screen_list_visuals")
  (caller-owns-return #t)
  (return-type "GList[GdkVisual]")
)

(define-method get_toplevel_windows
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_toplevel_windows")
  (caller-owns-return #t)
  (return-type "GList[GdkWindow]")
)

(define-method make_display_name
  (of-object "GdkScreen")
  (c-name "gdk_screen_make_display_name")
  (caller-owns-return #t)
  (return-type "gchar*")
)

(define-method get_n_monitors
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_n_monitors")
  (return-type "gint")
)

(define-method get_monitor_geometry
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_geometry")
  (return-type "none")
  (parameters
    '("gint" "monitor_num" (in))
    '("GdkRectangle*" "dest" (out))
  )
)

(define-method get_monitor_at_point
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_at_point")
  (return-type "gint")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method get_monitor_at_window
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_monitor_at_window")
  (return-type "gint")
  (parameters
    '("GdkWindow*" "window" (in))
  )
)

(define-method broadcast_client_message
  (of-object "GdkScreen")
  (c-name "gdk_screen_broadcast_client_message")
  (return-type "none")
  (parameters
    '("GdkEvent*" "event" (in))
  )
)

(define-function screen_get_default
  (c-name "gdk_screen_get_default")
  (return-type "GdkScreen*")
)

(define-method get_setting
  (of-object "GdkScreen")
  (c-name "gdk_screen_get_setting")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name" (in))
    '("GValue*" "value" (out))
  )
)

;(define-function spawn_on_screen
;  (c-name "gdk_spawn_on_screen")
;  (return-type "gboolean")
;  (parameters
	  ;'("GdkScreen*" "screen")
      ;'("const-gchar*" "working_directory")
      ;'("gchar**" "argv")
      ;'("gchar**" "envp")
      ;'("GSpawnFlags" "flags")
      ;'("GSpawnChildSetupFunc" "child_setup")
      ;'("gpointer" "user_data")
      ;'("gint*" "child_pid" (out))
      ;'("GError**" "error" (out))
  ;)
;)

(define-function spawn_command_line_on_screen
  (c-name "gdk_spawn_command_line_on_screen")
  (return-type "gboolean")
  (parameters
	  '("GdkScreen*" "screen")
	  '("const-gchar*" "command_line")
      '("GError**" "error" (out))
  )
)

(define-method alternative_dialog_button_order
  (of-object "GdkScreen")
  (c-name "gtk_alternative_dialog_button_order")
  (return-type "gboolean")
)

(define-function selection_owner_get
  (c-name "gdk_selection_owner_get")
  (return-type "GdkWindow*")
  (parameters
    '("GdkAtom" "selection" (in))
  )
)

(define-function selection_owner_get_for_display
  (c-name "gdk_selection_owner_get_for_display")
  (return-type "GdkWindow*")
  (parameters
    '("GdkDisplay*" "display" (in))
    '("GdkAtom" "selection" (in))
  )
)

(define-method selection_property_get
  (of-object "GdkWindow")
  (c-name "gdk_selection_property_get")
  (return-type "gboolean")
  (parameters
    '("guchar**" "data" (out))
    '("GdkAtom*" "prop_type" (out))
    '("gint*" "prop_format" (out))
  )
)

(define-function visual_get_best_depth
  (c-name "gdk_visual_get_best_depth")
  (return-type "gint")
)

(define-function visual_get_best_type
  (c-name "gdk_visual_get_best_type")
  (return-type "GdkVisualType")
)

(define-function visual_get_system
  (c-name "gdk_visual_get_system")
  (return-type "GdkVisual*")
)

(define-function visual_get_best
  (c-name "gdk_visual_get_best")
  (return-type "GdkVisual*")
)

(define-function visual_get_best_with_depth
  (c-name "gdk_visual_get_best_with_depth")
  (return-type "GdkVisual*")
  (parameters
    '("gint" "depth" (in))
  )
)

(define-function visual_get_best_with_type
  (c-name "gdk_visual_get_best_with_type")
  (return-type "GdkVisual*")
  (parameters
    '("GdkVisualType" "visual_type" (in))
  )
)

(define-function visual_get_best_with_both
  (c-name "gdk_visual_get_best_with_both")
  (return-type "GdkVisual*")
  (parameters
    '("gint" "depth" (in))
    '("GdkVisualType" "visual_type" (in))
  )
)

(define-function query_depths
  (c-name "gdk_query_depths")
  (return-type "none")
  (parameters
    '("gint*[]" "depths" (out))
    '("gint*" "count" (out))
  )
)

(define-function query_visual_types
  (c-name "gdk_query_visual_types")
  (return-type "none")
  (parameters
    '("GdkVisualType*[]" "visual_types" (out))
    '("gint*" "count" (out))
  )
)

(define-function list_visuals
  (c-name "gdk_list_visuals")
  (caller-owns-return #t)
  (return-type "GList[GdkVisual]")
)

(define-method get_screen
  (of-object "GdkVisual")
  (c-name "gdk_visual_get_screen")
  (return-type "GdkScreen*")
)

(define-function gdk_window_object_get_type
  (c-name "gdk_window_object_get_type")
  (return-type "GType")
)

(define-function new
  (is-constructor-of "GdkWindow")
  (c-name "gdk_window_new")
  (caller-owns-return #t)
  (return-type "GdkWindow*")
  (parameters
    '("GdkWindow*" "parent" (in))
    '("GdkWindowAttr*" "attributes" (in))
    '("gint" "attributes_mask" (in))
  )
)

(define-method set_keep_above
  (of-object "GdkWindow")
  (c-name "gdk_window_set_keep_above")
  (return-type "none")
  (parameters
    '("gboolean" "setting" (in))
  )
)

(define-method set_keep_below
  (of-object "GdkWindow")
  (c-name "gdk_window_set_keep_below")
  (return-type "none")
  (parameters
    '("gboolean" "setting" (in))
  )
)

(define-method destroy
  (of-object "GdkWindow")
  (c-name "gdk_window_destroy")
  (return-type "none")
)

(define-method get_window_type
  (of-object "GdkWindow")
  (c-name "gdk_window_get_window_type")
  (return-type "GdkWindowType")
)

(define-function window_at_pointer
  (c-name "gdk_window_at_pointer")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "win_x" (out))
    '("gint*" "win_y" (out))
  )
)

(define-method show
  (of-object "GdkWindow")
  (c-name "gdk_window_show")
  (return-type "none")
)

(define-method show_unraised
  (of-object "GdkWindow")
  (c-name "gdk_window_show_unraised")
  (return-type "none")
)

(define-method hide
  (of-object "GdkWindow")
  (c-name "gdk_window_hide")
  (return-type "none")
)

(define-method withdraw
  (of-object "GdkWindow")
  (c-name "gdk_window_withdraw")
  (return-type "none")
)

(define-method move
  (of-object "GdkWindow")
  (c-name "gdk_window_move")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method resize
  (of-object "GdkWindow")
  (c-name "gdk_window_resize")
  (return-type "none")
  (parameters
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method move_resize
  (of-object "GdkWindow")
  (c-name "gdk_window_move_resize")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method move_region
  (of-object "GdkWindow")
  (c-name "gdk_window_move_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method reparent
  (of-object "GdkWindow")
  (c-name "gdk_window_reparent")
  (return-type "none")
  (parameters
    '("GdkWindow*" "new_parent" (in))
    '("gint" "x" (in))
    '("gint" "y" (in))
  )
)

(define-method clear
  (of-object "GdkWindow")
  (c-name "gdk_window_clear")
  (return-type "none")
)

(define-method clear_area
  (of-object "GdkWindow")
  (c-name "gdk_window_clear_area")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method clear_area_e
  (of-object "GdkWindow")
  (c-name "gdk_window_clear_area_e")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
  )
)

(define-method raise
  (of-object "GdkWindow")
  (c-name "gdk_window_raise")
  (return-type "none")
)

(define-method lower
  (of-object "GdkWindow")
  (c-name "gdk_window_lower")
  (return-type "none")
)

(define-method focus
  (of-object "GdkWindow")
  (c-name "gdk_window_focus")
  (return-type "none")
  (parameters
    '("guint32" "timestamp" (in) (default "GDK_CURRENT_TIME") (null-ok))
  )
)

(define-method set_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_set_user_data")
  (return-type "none")
  (parameters
    '("gpointer" "user_data" (in))
  )
)

(define-method get_user_data
  (of-object "GdkWindow")
  (c-name "gdk_window_get_user_data")
  (return-type "none")
  (parameters
    '("gpointer*" "user_data" (out))
  )
)

(define-method set_override_redirect
  (of-object "GdkWindow")
  (c-name "gdk_window_set_override_redirect")
  (return-type "none")
  (parameters
    '("gboolean" "override_redirect" (in))
  )
)

(define-method add_filter
  (of-object "GdkWindow")
  (c-name "gdk_window_add_filter")
  (return-type "none")
  (parameters
    '("GdkFilterFunc" "function" (in))
    '("gpointer" "data" (in))
  )
)

(define-method remove_filter
  (of-object "GdkWindow")
  (c-name "gdk_window_remove_filter")
  (return-type "none")
  (parameters
    '("GdkFilterFunc" "function" (in))
    '("gpointer" "data" (in))
  )
)

(define-method scroll
  (of-object "GdkWindow")
  (c-name "gdk_window_scroll")
  (return-type "none")
  (parameters
    '("gint" "dx" (in))
    '("gint" "dy" (in))
  )
)

(define-method shape_combine_mask
  (of-object "GdkWindow")
  (c-name "gdk_window_shape_combine_mask")
  (return-type "none")
  (parameters
    '("GdkBitmap*" "shape_mask" (in) (null-ok))
    '("gint" "offset_x" (in))
    '("gint" "offset_y" (in))
  )
)

(define-method shape_combine_region
  (of-object "GdkWindow")
  (c-name "gdk_window_shape_combine_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "shape_region" (in) (null-ok))
    '("gint" "offset_x" (in))
    '("gint" "offset_y" (in))
  )
)


(define-method set_child_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_set_child_shapes")
  (return-type "none")
)

(define-method merge_child_shapes
  (of-object "GdkWindow")
  (c-name "gdk_window_merge_child_shapes")
  (return-type "none")
)

(define-method is_visible
  (of-object "GdkWindow")
  (c-name "gdk_window_is_visible")
  (return-type "gboolean")
)

(define-method is_viewable
  (of-object "GdkWindow")
  (c-name "gdk_window_is_viewable")
  (return-type "gboolean")
)

(define-method get_state
  (of-object "GdkWindow")
  (c-name "gdk_window_get_state")
  (return-type "GdkWindowState")
)

(define-method set_static_gravities
  (of-object "GdkWindow")
  (c-name "gdk_window_set_static_gravities")
  (return-type "gboolean")
  (parameters
    '("gboolean" "use_static" (in))
  )
)

(define-method set_hints
  (of-object "GdkWindow")
  (c-name "gdk_window_set_hints")
  (return-type "none")
  (parameters
    '("gint" "x" (in))
    '("gint" "y" (in))
    '("gint" "min_width" (in))
    '("gint" "min_height" (in))
    '("gint" "max_width" (in))
    '("gint" "max_height" (in))
    '("gint" "flags" (in))
  )
)

(define-method set_type_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_type_hint")
  (return-type "none")
  (parameters
    '("GdkWindowTypeHint" "hint" (in))
  )
)

(define-method set_modal_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_modal_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal" (in))
  )
)

(define-method set_skip_taskbar_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_skip_taskbar_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal" (in))
  )
)

(define-method set_skip_pager_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_skip_pager_hint")
  (return-type "none")
  (parameters
    '("gboolean" "modal" (in))
  )
)

(define-method set_urgency_hint
  (of-object "GdkWindow")
  (c-name "gdk_window_set_urgency_hint")
  (return-type "none")
  (parameters
    '("gboolean" "urgent" (in))
  )
)

(define-method set_geometry_hints
  (of-object "GdkWindow")
  (c-name "gdk_window_set_geometry_hints")
  (return-type "none")
  (parameters
    '("GdkGeometry*" "geometry" (in))
    '("GdkWindowHints" "flags" (in))
  )
)

(define-function set_sm_client_id
  (c-name "gdk_set_sm_client_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "sm_client_id" (in))
  )
)

(define-method begin_paint_rect
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_paint_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rectangle" (in))
  )
)

(define-method begin_paint_region
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_paint_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region" (in))
  )
)

(define-method end_paint
  (of-object "GdkWindow")
  (c-name "gdk_window_end_paint")
  (return-type "none")
)

(define-method set_title
  (of-object "GdkWindow")
  (c-name "gdk_window_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title" (in))
  )
)

(define-method set_role
  (of-object "GdkWindow")
  (c-name "gdk_window_set_role")
  (return-type "none")
  (parameters
    '("const-gchar*" "role" (in))
  )
)

(define-method set_transient_for
  (of-object "GdkWindow")
  (c-name "gdk_window_set_transient_for")
  (return-type "none")
  (parameters
    '("GdkWindow*" "leader" (in))
  )
)

(define-method set_background
  (of-object "GdkWindow")
  (c-name "gdk_window_set_background")
  (return-type "none")
  (parameters
    '("GdkColor*" "color" (in))
  )
)

(define-method set_back_pixmap
  (of-object "GdkWindow")
  (c-name "gdk_window_set_back_pixmap")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "pixmap" (in) (null-ok))
    '("gboolean" "parent_relative" (in))
  )
)

(define-method set_cursor
  (of-object "GdkWindow")
  (c-name "gdk_window_set_cursor")
  (return-type "none")
  (parameters
    '("GdkCursor*" "cursor" (in) (null-ok))
  )
)

(define-method get_geometry
  (of-object "GdkWindow")
  (c-name "gdk_window_get_geometry")
  (return-type "none")
  (parameters
    '("gint*" "x" (out))
    '("gint*" "y" (out))
    '("gint*" "width" (out))
    '("gint*" "height" (out))
    '("gint*" "depth" (out))
  )
)

(define-method get_position
  (of-object "GdkWindow")
  (c-name "gdk_window_get_position")
  (return-type "none")
  (parameters
    '("gint*" "x" (out))
    '("gint*" "y" (out))
  )
)

(define-method get_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_origin")
  (return-type "gint")
  (parameters
    '("gint*" "x" (out))
    '("gint*" "y" (out))
  )
)

(define-method get_deskrelative_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_deskrelative_origin")
  (return-type "gboolean")
  (parameters
    '("gint*" "x" (out))
    '("gint*" "y" (out))
  )
)

(define-method get_root_origin
  (of-object "GdkWindow")
  (c-name "gdk_window_get_root_origin")
  (return-type "none")
  (parameters
    '("gint*" "x" (out))
    '("gint*" "y" (out))
  )
)

(define-method get_frame_extents
  (of-object "GdkWindow")
  (c-name "gdk_window_get_frame_extents")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect" (out))
  )
)

(define-method get_pointer
  (of-object "GdkWindow")
  (c-name "gdk_window_get_pointer")
  (return-type "GdkWindow*")
  (parameters
    '("gint*" "x" (out))
    '("gint*" "y" (out))
    '("GdkModifierType*" "mask" (out))
  )
)

(define-method get_parent
  (of-object "GdkWindow")
  (c-name "gdk_window_get_parent")
  (return-type "GdkWindow*")
)

(define-method get_toplevel
  (of-object "GdkWindow")
  (c-name "gdk_window_get_toplevel")
  (return-type "GdkWindow*")
)

(define-method get_children
  (of-object "GdkWindow")
  (c-name "gdk_window_get_children")
  (caller-owns-return #t)
  (return-type "GList[GdkWindow]")
)

(define-method peek_children
  (of-object "GdkWindow")
  (c-name "gdk_window_peek_children")
  (caller-owns-return #t)
  (return-type "GList[GdkWindow]")
)

(define-method get_events
  (of-object "GdkWindow")
  (c-name "gdk_window_get_events")
  (return-type "GdkEventMask")
)

(define-method set_events
  (of-object "GdkWindow")
  (c-name "gdk_window_set_events")
  (return-type "none")
  (parameters
    '("GdkEventMask" "event_mask" (in))
  )
)

(define-method set_icon_list
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon_list")
  (return-type "none")
  (parameters
    '("GList[GdkPixbuf]" "pixbufs" (in))
  )
)

(define-method set_icon
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon")
  (return-type "none")
  (parameters
    '("GdkWindow*" "icon_window" (in))
    '("GdkPixmap*" "pixmap" (in))
    '("GdkBitmap*" "mask" (in))
  )
)

(define-method set_icon_name
  (of-object "GdkWindow")
  (c-name "gdk_window_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name" (in))
  )
)

(define-method set_group
  (of-object "GdkWindow")
  (c-name "gdk_window_set_group")
  (return-type "none")
  (parameters
    '("GdkWindow*" "leader" (in))
  )
)

(define-method get_group
  (of-object "GdkWindow")
  (c-name "gdk_window_get_group")
  (return-type "GdkWindow*")
)

(define-method set_decorations
  (of-object "GdkWindow")
  (c-name "gdk_window_set_decorations")
  (return-type "none")
  (parameters
    '("GdkWMDecoration" "decorations" (in))
  )
)

(define-method get_decorations
  (of-object "GdkWindow")
  (c-name "gdk_window_get_decorations")
  (return-type "gboolean")
  (parameters
    '("GdkWMDecoration*" "decorations" (out))
  )
)

(define-method set_functions
  (of-object "GdkWindow")
  (c-name "gdk_window_set_functions")
  (return-type "none")
  (parameters
    '("GdkWMFunction" "functions" (in))
  )
)

(define-function window_get_toplevels
  (c-name "gdk_window_get_toplevels")
  (caller-owns-return #t)
  (return-type "GList[GdkWindow]")
)

(define-method iconify
  (of-object "GdkWindow")
  (c-name "gdk_window_iconify")
  (return-type "none")
)

(define-method deiconify
  (of-object "GdkWindow")
  (c-name "gdk_window_deiconify")
  (return-type "none")
)

(define-method stick
  (of-object "GdkWindow")
  (c-name "gdk_window_stick")
  (return-type "none")
)

(define-method unstick
  (of-object "GdkWindow")
  (c-name "gdk_window_unstick")
  (return-type "none")
)

(define-method maximize
  (of-object "GdkWindow")
  (c-name "gdk_window_maximize")
  (return-type "none")
)

(define-method unmaximize
  (of-object "GdkWindow")
  (c-name "gdk_window_unmaximize")
  (return-type "none")
)

(define-method fullscreen
  (of-object "GdkWindow")
  (c-name "gdk_window_fullscreen")
  (return-type "none")
)

(define-method unfullscreen
  (of-object "GdkWindow")
  (c-name "gdk_window_unfullscreen")
  (return-type "none")
)

(define-method register_dnd
  (of-object "GdkWindow")
  (c-name "gdk_window_register_dnd")
  (return-type "none")
)

(define-method begin_resize_drag
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_resize_drag")
  (return-type "none")
  (parameters
    '("GdkWindowEdge" "edge" (in))
    '("gint" "button" (in))
    '("gint" "root_x" (in))
    '("gint" "root_y" (in))
    '("guint32" "timestamp" (in))
  )
)

(define-method begin_move_drag
  (of-object "GdkWindow")
  (c-name "gdk_window_begin_move_drag")
  (return-type "none")
  (parameters
    '("gint" "button" (in))
    '("gint" "root_x" (in))
    '("gint" "root_y" (in))
    '("guint32" "timestamp" (in))
  )
)

(define-method invalidate_rect
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect" (in) (null-ok))
    '("gboolean" "invalidate_children" (in))
  )
)

(define-method invalidate_region
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_region")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region" (in))
    '("gboolean" "invalidate_children" (in))
  )
)

(define-method invalidate_maybe_recurse
  (of-object "GdkWindow")
  (c-name "gdk_window_invalidate_maybe_recurse")
  (return-type "none")
  (parameters
    '("GdkRegion*" "region" (in))
    '("gboolean" "(*child_func" (in))
    '("gpointer" "user_data" (in))
  )
)

(define-method get_update_area
  (of-object "GdkWindow")
  (c-name "gdk_window_get_update_area")
  (caller-owns-return #t)
  (return-type "GdkRegion*")
)

(define-method freeze_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_freeze_updates")
  (return-type "none")
)

(define-method thaw_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_thaw_updates")
  (return-type "none")
)

(define-function window_process_all_updates
  (c-name "gdk_window_process_all_updates")
  (return-type "none")
)

(define-method process_updates
  (of-object "GdkWindow")
  (c-name "gdk_window_process_updates")
  (return-type "none")
  (parameters
    '("gboolean" "update_children" (in))
  )
)

(define-function gdk_window_set_debug_updates
  (c-name "gdk_window_set_debug_updates")
  (return-type "none")
  (parameters
    '("gboolean" "setting" (in))
  )
)

(define-function gdk_window_constrain_size
  (c-name "gdk_window_constrain_size")
  (return-type "none")
  (parameters
    '("GdkGeometry*" "geometry" (in))
    '("guint" "flags" (in))
    '("gint" "width" (in))
    '("gint" "height" (in))
    '("gint*" "new_width" (out))
    '("gint*" "new_height" (out))
  )
)

(define-method get_internal_paint_info
  (of-object "GdkWindow")
  (c-name "gdk_window_get_internal_paint_info")
  (return-type "none")
  (parameters
    '("GdkDrawable**" "real_drawable" (out))
    '("gint*" "x_offset" (out))
    '("gint*" "y_offset" (out))
  )
)

(define-function gdk_set_pointer_hooks
  (c-name "gdk_set_pointer_hooks")
  (return-type "GdkPointerHooks*")
  (parameters
    '("const-GdkPointerHooks*" "new_hooks" (in))
  )
)

(define-function get_default_root_window
  (c-name "gdk_get_default_root_window")
  (return-type "GdkWindow*")
)

(define-method set_accept_focus
  (of-object "GdkWindow")
  (c-name "gdk_window_set_accept_focus")
  (return-type "none")
  (parameters
    '("gboolean" "accept_focus" (in))
  )
)

(define-method set_focus_on_map
  (of-object "GdkWindow")
  (c-name "gdk_window_set_focus_on_map")
  (return-type "none")
  (parameters
    '("gboolean" "focus_on_map" (in))
  )
)

(define-method enable_synchronized_configure
  (of-object "GdkWindow")
  (c-name "gdk_window_enable_synchronized_configure")
  (return-type "none")
)

(define-method configure_finished
  (of-object "GdkWindow")
  (c-name "gdk_window_configure_finished")
  (return-type "none")
)

(define-method finish
  (of-object "GdkDragContext")
  (c-name "gtk_drag_finish")
  (return-type "none")
  (parameters
    '("gboolean" "success" (in))
    '("gboolean" "del" (in))
    '("guint32" "time" (in) (default "GDK_CURRENT_TIME"))
  )
)

(define-method set_icon_name
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name" (in))
    '("gint" "hot_x" (in))
    '("gint" "hot_y" (in))
  )
)

(define-method set_icon_widget
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget" (in))
    '("gint" "hot_x" (in))
    '("gint" "hot_y" (in))
  )
)

(define-method set_icon_pixmap
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixmap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap" (in))
    '("GdkPixmap*" "pixmap" (in))
    '("GdkBitmap*" "mask" (in))
    '("gint" "hot_x" (in))
    '("gint" "hot_y" (in))
  )
)

(define-method set_icon_pixbuf
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf" (in))
    '("gint" "hot_x" (in))
    '("gint" "hot_y" (in))
  )
)

(define-method set_icon_stock
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id" (in))
    '("gint" "hot_x" (in))
    '("gint" "hot_y" (in))
  )
)

(define-method set_icon_default
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_default")
  (return-type "none")
)

(define-method get_colorspace
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_colorspace")
  (return-type "GdkColorspace")
)

(define-method get_n_channels
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_n_channels")
  (return-type "int")
)

(define-method get_has_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_has_alpha")
  (return-type "gboolean")
)

(define-method get_bits_per_sample
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_bits_per_sample")
  (return-type "int")
)

(define-method get_pixels
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_pixels")
  (return-type "guchar*")
)

(define-method get_width
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_height")
  (return-type "int")
)

(define-method get_rowstride
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_rowstride")
  (return-type "int")
)

(define-function gdk_pixbuf_new
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkColorspace" "colorspace" (in))
    '("gboolean" "has_alpha" (in))
    '("int" "bits_per_sample" (in))
    '("int" "width" (in))
    '("int" "height" (in))
  )
)

(define-method copy
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_copy")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
)

(define-function pixbuf_new_from_file
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new_from_file")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("const-char*" "filename" (in))
    '("GError**" "error" (out))
  )
)

(define-function pixbuf_new_from_file_at_size
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new_from_file_at_size")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("const-char*" "filename" (in))
    '("int" "width" (in))
    '("int" "height" (in))
    '("GError**" "error" (out))
  )
)

(define-function pixbuf_new_from_file_at_scale
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new_from_file_at_scale")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("const-char*" "filename" (in))
    '("int" "width" (in))
    '("int" "height" (in))
	'("gboolean" "preserve_aspect_ratio" (in))
    '("GError**" "error" (out))
  )
)

(define-function pixbuf_new_from_data
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new_from_data")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("const-guchar*" "data" (in))
    '("GdkColorspace" "colorspace" (in))
    '("gboolean" "has_alpha" (in))
    '("int" "bits_per_sample" (in))
    '("int" "width" (in))
    '("int" "height" (in))
    '("int" "rowstride" (in))
    '("GdkPixbufDestroyNotify" "destroy_fn" (in))
    '("gpointer" "destroy_fn_data" (in))
  )
)

(define-function pixbuf_new_from_xpm_data
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new_from_xpm_data")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("const-char**" "data" (in))
  )
)

(define-function pixbuf_new_from_inline
  (is-constructor-of "GdkPixbuf")
  (c-name "gdk_pixbuf_new_from_inline")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("gint" "data_length" (in))
    '("const-guchar*" "data" (in))
    '("gboolean" "copy_pixels" (in))
    '("GError**" "error" (out))
  )
)

(define-method subpixbuf
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_new_subpixbuf")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("int" "src_x" (in))
    '("int" "src_y" (in))
    '("int" "width" (in))
    '("int" "height" (in))
  )
)

(define-method fill
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_fill")
  (return-type "none")
  (parameters
    '("guint32" "pixel" (in))
  )
)

(define-method save
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename" (in))
    '("const-char*" "type" (in))
    '("GError**" "error" (out))
  )
  (varargs #t)
)

(define-method savev
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_savev")
  (return-type "gboolean")
  (parameters
    '("const-char*" "filename" (in))
    '("const-char*" "type" (in))
    '("char**" "option_keys" (in))
    '("char**" "option_values" (in))
    '("GError**" "error" (out))
  )
)

(define-method save_to_callback
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_callback")
  (return-type "none")
  (parameters
	  '("GdkPixbufSaveFunc" "save_func")
      '("gpointer" "user_data")
      '("const-char*" "type")
      '("GError**" "error" (out))
  )
  (varargs #t)
)

(define-method save_to_callbackv
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_callbackv")
  (return-type "none")
  (parameters
	  '("GdkPixbufSaveFunc" "save_func")
      '("gpointer" "user_data")
      '("const-char*" "type")
	  '("char**" "option_keys")
      '("char**" "option_values")
      '("GError**" "error" (out))
  )
)

(define-method save_to_buffer
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_buffer")
  (return-type "none")
  (parameters
	  '("gchar**" "buffer" (out))
      '("gsize*" "buffer_size" (out))
      '("const-char*" "type")
      '("GError**" "error" (out))
  )
  (varargs #t)
)

(define-method save_to_bufferv
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_save_to_bufferv")
  (return-type "none")
  (parameters
	  '("gchar**" "buffer" (out))
      '("gsize*" "buffer_size" (out))
      '("const-char*" "type")
	  '("char**" "option_keys")
      '("char**" "option_values")
      '("GError**" "error" (out))
  )
)

(define-method add_alpha
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_add_alpha")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("gboolean" "substitute_color" (in))
    '("guchar" "r" (in))
    '("guchar" "g" (in))
    '("guchar" "b" (in))
  )
)

(define-method copy_area
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_copy_area")
  (return-type "none")
  (parameters
    '("int" "src_x" (in))
    '("int" "src_y" (in))
    '("int" "width" (in))
    '("int" "height" (in))
    '("GdkPixbuf*" "dest_pixbuf" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
  )
)

(define-method saturate_and_pixelate
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_saturate_and_pixelate")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest" (in))
    '("gfloat" "saturation" (in))
    '("gboolean" "pixelate" (in))
  )
)

(define-method scale
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_scale")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "dest_width" (in))
    '("int" "dest_height" (in))
    '("double" "offset_x" (in))
    '("double" "offset_y" (in))
    '("double" "scale_x" (in))
    '("double" "scale_y" (in))
    '("GdkInterpType" "interp_type" (in))
  )
)

(define-method composite
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_composite")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "dest_width" (in))
    '("int" "dest_height" (in))
    '("double" "offset_x" (in))
    '("double" "offset_y" (in))
    '("double" "scale_x" (in))
    '("double" "scale_y" (in))
    '("GdkInterpType" "interp_type" (in))
    '("int" "overall_alpha" (in))
  )
)

(define-method composite_color
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_composite_color")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "dest" (in))
    '("int" "dest_x" (in))
    '("int" "dest_y" (in))
    '("int" "dest_width" (in))
    '("int" "dest_height" (in))
    '("double" "offset_x" (in))
    '("double" "offset_y" (in))
    '("double" "scale_x" (in))
    '("double" "scale_y" (in))
    '("GdkInterpType" "interp_type" (in))
    '("int" "overall_alpha" (in))
    '("int" "check_x" (in))
    '("int" "check_y" (in))
    '("int" "check_size" (in))
    '("guint32" "color1" (in))
    '("guint32" "color2" (in))
  )
)

(define-method rotate_simple
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_rotate_simple")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkPixbufRotation" "angle")
  )
)

(define-method flip
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_flip")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("gboolean" "horizontal")
  )
)

(define-method scale_simple
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_scale_simple")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("int" "dest_width" (in))
    '("int" "dest_height" (in))
    '("GdkInterpType" "interp_type" (in))
  )
)

(define-method composite_color_simple
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_composite_color_simple")
  (caller-owns-return #t)
  (return-type "GdkPixbuf*")
  (parameters
    '("int" "dest_width" (in))
    '("int" "dest_height" (in))
    '("GdkInterpType" "interp_type" (in))
    '("int" "overall_alpha" (in))
    '("int" "check_size" (in))
    '("guint32" "color1" (in))
    '("guint32" "color2" (in))
  )
)

(define-function gdk_pixbuf_animation_get_type
  (c-name "gdk_pixbuf_animation_get_type")
  (return-type "GType")
)

(define-function gdk_pixbuf_animation_new_from_file
  (is-constructor-of "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_new_from_file")
  (caller-owns-return #t)
  (return-type "GdkPixbufAnimation*")
  (parameters
    '("const-char*" "filename" (in))
    '("GError**" "error" (out))
  )
)

(define-method get_width
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_width")
  (return-type "int")
)

(define-method get_height
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_height")
  (return-type "int")
)

(define-method is_static_image
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_is_static_image")
  (return-type "gboolean")
)

(define-method get_static_image
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_static_image")
  (return-type "GdkPixbuf*")
)

(define-method get_iter
  (of-object "GdkPixbufAnimation")
  (c-name "gdk_pixbuf_animation_get_iter")
  (return-type "GdkPixbufAnimationIter*")
  (parameters
    '("const-GTimeVal*" "start_time" (in))
  )
)

(define-function pixbuf_animation_iter_get_type
  (c-name "gdk_pixbuf_animation_iter_get_type")
  (return-type "GType")
)

(define-method get_delay_time
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_get_delay_time")
  (return-type "int")
)

(define-method get_pixbuf
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method on_currently_loading_frame
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_on_currently_loading_frame")
  (return-type "gboolean")
)

(define-method advance
  (of-object "GdkPixbufAnimationIter")
  (c-name "gdk_pixbuf_animation_iter_advance")
  (return-type "gboolean")
  (parameters
    '("const-GTimeVal*" "current_time" (in))
  )
)

(define-function gdk_pixbuf_simple_anim_new
	(is-constructor-of "GdkPixbufSimpleAnim")
	(return-type "GdkPixbufSimpleAnim*")
	(c-name "gdk_pixbuf_simple_anim_new")
	(parameters
		'("gint" "width")
        '("gint" "height")
        '("gfloat" "rate")
	)
)
(define-method add_frame
	(of-object "GdkPixbufSimpleAnim")
	(c-name "gdk_pixbuf_simple_anim_add_frame")
	(return-type "none")
	(parameters
        '("GdkPixbuf*" "pixbuf")
	)
)

(define-method get_option
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_get_option")
  (return-type "const-char*")
  (parameters
    '("const-char*" "key" (in))
  )
)

(define-method set_option
  (of-object "GdkPixbuf")
  (c-name "gdk_pixbuf_set_option")
  (return-type "gboolean")
  (parameters
    '("const-char*" "key" (in))
	'("const-char*" "value" (in))
  )
)

(define-function pixbuf_get_formats
  (c-name "gdk_pixbuf_get_formats")
  (caller-owns-return #t)
  (return-type "GSList[GdkPixbufFormat]")
)

(define-function pixbuf_get_file_info
  (c-name "gdk_pixbuf_get_file_info")
  (return-type "GdkPixbufFormat*")
  (parameters
    '("const-gchar*" "filename" (in))
    '("gint*" "width" (out))
    '("gint*" "height" (out))
  )
)

(define-method get_name
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_name")
  (caller-owns-return #t)
  (return-type "gchar*")
)

(define-method is_scalable
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_is_scalable")
  (return-type "gboolean")
)

(define-method is_disabled
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_is_disabled")
  (return-type "gboolean")
)

(define-method set_disabled
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_set_disabled")
  (return-type "none")
  (parameters
	  '("gboolean" "disabled")
  )
)

(define-method get_license
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_license")
  (caller-owns-return #t)
  (return-type "gchar*")
)

(define-method get_description
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_description")
  (caller-owns-return #t)
  (return-type "gchar*")
)

(define-method get_mime_types
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_mime_types")
  (caller-owns-return #t)
  (return-type "gchar**")
)

(define-method get_extensions
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_get_extensions")
  (caller-owns-return #t)
  (return-type "gchar**")
)

(define-method is_writable
  (of-object "GdkPixbufFormat")
  (c-name "gdk_pixbuf_format_is_writable")
  (return-type "gboolean")
)

(define-function gdk_pixbuf_loader_get_type
  (c-name "gdk_pixbuf_loader_get_type")
  (return-type "GType")
)

(define-function gdk_pixbuf_loader_new
  (is-constructor-of "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_new")
  (caller-owns-return #t)
  (return-type "GdkPixbufLoader*")
)

(define-function gdk_pixbuf_loader_new_with_type
  (is-constructor-of "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_new_with_type")
  (caller-owns-return #t)
  (return-type "GdkPixbufLoader*")
  (parameters
    '("const-char*" "image_type" (in))
    '("GError**" "error" (out))
  )
)

(define-function pixbuf_loader_new_with_mime_type
  (is-constructor-of "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_new_with_mime_type")
  (caller-owns-return #t)
  (return-type "GdkPixbufLoader*")
  (parameters
    '("const-char*" "mime_type" (in))
    '("GError**" "error" (out))
  )
)

(define-method write
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_write")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "buf" (in))
    '("gsize" "count" (in))
    '("GError**" "error" (out))
  )
)

(define-method get_pixbuf
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method get_animation
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_get_animation")
  (return-type "GdkPixbufAnimation*")
)

(define-method close
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_close")
  (return-type "gboolean")
  (parameters
    '("GError**" "error" (out))
  )
)

(define-method set_size
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_set_size")
  (return-type "none")
  (parameters
    '("int" "width" (in))
    '("int" "height" (in))
  )
)

(define-method get_format
  (of-object "GdkPixbufLoader")
  (c-name "gdk_pixbuf_loader_get_format")
  (return-type "GdkPixbufFormat*")
)

(define-function intersect
  (c-name "gdk_rectangle_intersect")
  (return-type "gboolean")
  (parameters
    '("GdkRectangle*" "src1" (in))
    '("GdkRectangle*" "src2" (in))
    '("GdkRectangle*" "dest" (out))
  )
)

(define-function union
  (c-name "gdk_rectangle_union")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "src1" (in))
    '("GdkRectangle*" "src2" (in))
    '("GdkRectangle*" "dest" (out))
  )
)

;; From /home/larman/research/src/gtk+-2.8.8/gdk/gdkregion.h

(define-function gdk_region_new
  (c-name "gdk_region_new")
  (is-constructor-of "GdkRegion")
  (return-type "GdkRegion*")
)

(define-function gdk_region_polygon
  (c-name "gdk_region_polygon")
  (return-type "GdkRegion*")
  (parameters
    '("GdkPoint[]" "points")
    '("gint" "npoints")
    '("GdkFillRule" "fill_rule")
  )
)

(define-method copy
  (of-object "GdkRegion")
  (c-name "gdk_region_copy")
  (caller-owns-return #t)
  (return-type "GdkRegion*")
)

(define-function gdk_region_rectangle
  (c-name "gdk_region_rectangle")
  (is-constructor-of "GdkRegion")
  (return-type "GdkRegion*")
  (parameters
    '("GdkRectangle*" "rectangle")
  )
)

(define-method get_clipbox
  (of-object "GdkRegion")
  (c-name "gdk_region_get_clipbox")
  (return-type "none")
  (parameters
	  '("GdkRectangle*" "rectangle" (out))
  )
)

(define-method get_rectangles
  (of-object "GdkRegion")
  (c-name "gdk_region_get_rectangles")
  (return-type "none")
  (parameters
	  '("GdkRectangle*[]" "rectangles" (out))
	  '("gint*" "n_rectangles" (out))
  )
)

(define-method empty
  (of-object "GdkRegion")
  (c-name "gdk_region_empty")
  (return-type "gboolean")
)

(define-method equal
  (of-object "GdkRegion")
  (c-name "gdk_region_equal")
  (return-type "gboolean")
  (parameters
    '("GdkRegion*" "region2")
  )
)

(define-method point_in
  (of-object "GdkRegion")
  (c-name "gdk_region_point_in")
  (return-type "gboolean")
  (parameters
    '("int" "x")
    '("int" "y")
  )
)

(define-method rect_in
  (of-object "GdkRegion")
  (c-name "gdk_region_rect_in")
  (return-type "GdkOverlapType")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-method offset
  (of-object "GdkRegion")
  (c-name "gdk_region_offset")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method shrink
  (of-object "GdkRegion")
  (c-name "gdk_region_shrink")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method union_with_rect
  (of-object "GdkRegion")
  (c-name "gdk_region_union_with_rect")
  (return-type "none")
  (parameters
    '("GdkRectangle*" "rect")
  )
)

(define-method intersect
  (of-object "GdkRegion")
  (c-name "gdk_region_intersect")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method union
  (of-object "GdkRegion")
  (c-name "gdk_region_union")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method subtract
  (of-object "GdkRegion")
  (c-name "gdk_region_subtract")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method xor
  (of-object "GdkRegion")
  (c-name "gdk_region_xor")
  (return-type "none")
  (parameters
    '("GdkRegion*" "source2")
  )
)

(define-method spans_intersect_foreach
  (of-object "GdkRegion")
  (c-name "gdk_region_spans_intersect_foreach")
  (return-type "none")
  (parameters
    '("GdkSpan[]" "spans")
    '("int" "n_spans")
    '("gboolean" "sorted")
    '("GdkSpanFunc" "function")
    '("gpointer" "data")
  )
)

;; virtuals

(define-virtual get_display_name
  (of-object "GdkDisplay")
  (return-type "const-gchar*")
)

(define-virtual get_n_screens
  (of-object "GdkDisplay")
  (return-type "gint")
)

(define-virtual get_screen
  (of-object "GdkDisplay")
  (return-type "GdkScreen*")
  (parameters
    '("gint" "screen_num")
  )
)

(define-virtual get_default_screen
  (of-object "GdkDisplay")
  (return-type "GdkScreen*")
)

(define-virtual closed
  (of-object "GdkDisplay")
  (return-type "none")
  (parameters
    '("gboolean" "is_error")
  )
)

(define-virtual display_opened
  (of-object "GdkDisplayManager")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)

(define-virtual create_gc
  (of-object "GdkDrawable")
  (return-type "GdkGC*")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "mask")
  )
)

(define-virtual draw_rectangle
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual draw_arc
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint" "angle1")
    '("gint" "angle2")
  )
)

(define-virtual draw_polygon
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("gboolean" "filled")
    '("GdkPoint*" "points")
    '("gint" "npoints")
  )
)

(define-virtual draw_text
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-gchar*" "text")
    '("gint" "text_length")
  )
)

(define-virtual draw_text_wc
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkFont*" "font")
    '("GdkGC*" "gc")
    '("gint" "x")
    '("gint" "y")
    '("const-GdkWChar*" "text")
    '("gint" "text_length")
  )
)

(define-virtual draw_drawable
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkDrawable*" "src")
    '("gint" "xsrc")
    '("gint" "ysrc")
    '("gint" "xdest")
    '("gint" "ydest")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual draw_points
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPoint[]" "points")
    '("gint" "npoints")
  )
)

(define-virtual draw_segments
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkSegment[]" "segs")
    '("gint" "nsegs")
  )
)

(define-virtual draw_lines
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPoint[]" "points")
    '("gint" "npoints")
  )
)

(define-virtual draw_glyphs
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("PangoFont*" "font")
    '("gint" "x")
    '("gint" "y")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-virtual draw_image
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkImage*" "image")
    '("gint" "xsrc")
    '("gint" "ysrc")
    '("gint" "xdest")
    '("gint" "ydest")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual get_depth
  (of-object "GdkDrawable")
  (return-type "gint")
)

(define-virtual get_size
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("gint*" "width" (out))
    '("gint*" "height" (out))
  )
)

(define-virtual set_colormap
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkColormap*" "cmap")
  )
)

(define-virtual get_colormap
  (of-object "GdkDrawable")
  (return-type "GdkColormap*")
)

(define-virtual get_visual
  (of-object "GdkDrawable")
  (return-type "GdkVisual*")
)

(define-virtual get_screen
  (of-object "GdkDrawable")
  (return-type "GdkScreen*")
)

(define-virtual get_image
  (of-object "GdkDrawable")
  (return-type "GdkImage*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-virtual get_clip_region
  (of-object "GdkDrawable")
  (return-type "GdkRegion*")
)

(define-virtual get_visible_region
  (of-object "GdkDrawable")
  (return-type "GdkRegion*")
)

(define-virtual get_composite_drawable
  (of-object "GdkDrawable")
  (return-type "GdkDrawable*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint*" "composite_x_offset" (out))
    '("gint*" "composite_y_offset" (out))
  )
)

(define-virtual draw_pixbuf
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkPixbuf*" "pixbuf")
    '("gint" "src_x")
    '("gint" "src_y")
    '("gint" "dest_x")
    '("gint" "dest_y")
    '("gint" "width")
    '("gint" "height")
    '("GdkRgbDither" "dither")
    '("gint" "x_dither")
    '("gint" "y_dither")
  )
)

(define-virtual draw_glyphs_transformed
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("PangoMatrix*" "matrix")
    '("PangoFont*" "font")
    '("gint" "x")
    '("gint" "y")
    '("PangoGlyphString*" "glyphs")
  )
)

(define-virtual draw_trapezoids
  (of-object "GdkDrawable")
  (return-type "none")
  (parameters
    '("GdkGC*" "gc")
    '("GdkTrapezoid[]" "trapezoids")
    '("gint" "n_trapezoids")
  )
)

(define-virtual ref_cairo_surface
  (of-object "GdkDrawable")
  (return-type "cairo_surface_t*")
)

(define-virtual get_values
  (of-object "GdkGC")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values" (out))
  )
)

(define-virtual set_values
  (of-object "GdkGC")
  (return-type "none")
  (parameters
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "mask")
  )
)

(define-virtual set_dashes
  (of-object "GdkGC")
  (return-type "none")
  (parameters
    '("gint" "dash_offset")
    '("gint8[]" "dash_list")
    '("gint" "n")
  )
)

(define-virtual direction_changed
  (of-object "GdkKeymap")
  (return-type "none")
)

(define-virtual keys_changed
  (of-object "GdkKeymap")
  (return-type "none")
)

(define-virtual size_changed
  (of-object "GdkScreen")
  (return-type "none")
)

(define-virtual is_static_image
  (of-object "GdkPixbufAnimation")
  (return-type "gboolean")
)

(define-virtual get_static_image
  (of-object "GdkPixbufAnimation")
  (return-type "GdkPixbuf*")
)

(define-virtual get_size
  (of-object "GdkPixbufAnimation")
  (return-type "none")
  (parameters
    '("int*" "width")
    '("int*" "height")
  )
)

(define-virtual get_iter
  (of-object "GdkPixbufAnimation")
  (return-type "GdkPixbufAnimationIter*")
  (parameters
    '("const-GTimeVal*" "start_time")
  )
)

(define-virtual get_delay_time
  (of-object "GdkPixbufAnimationIter")
  (return-type "int")
)

(define-virtual get_pixbuf
  (of-object "GdkPixbufAnimationIter")
  (return-type "GdkPixbuf*")
)

(define-virtual on_currently_loading_frame
  (of-object "GdkPixbufAnimationIter")
  (return-type "gboolean")
)

(define-virtual advance
  (of-object "GdkPixbufAnimationIter")
  (return-type "gboolean")
  (parameters
    '("const-GTimeVal*" "current_time")
  )
)

(define-virtual size_prepared
  (of-object "GdkPixbufLoader")
  (return-type "none")
  (parameters
    '("int" "width")
    '("int" "height")
  )
)

(define-virtual area_prepared
  (of-object "GdkPixbufLoader")
  (return-type "none")
)

(define-virtual area_updated
  (of-object "GdkPixbufLoader")
  (return-type "none")
  (parameters
    '("int" "x")
    '("int" "y")
    '("int" "width")
    '("int" "height")
  )
)

(define-virtual closed
  (of-object "GdkPixbufLoader")
  (return-type "none")
)


