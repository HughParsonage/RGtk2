<<editableTableForCollectingOptions, echo=FALSE>>=
## GUI for configuring options -- in a table
library(RGtk2)
@ 

This example shows one way to gather arguments or options using an
editable cell in a table, rather than a separate text entry
widget. Tables can provide compact entry areas in a familiar
interface.

\begin{figure}
  \centering
  \includegraphics[width=.5\textwidth]{fig-RGtk2-option-editor.png}
  \caption{A tree view used to gather arguments for a call to \function{title}.}
  \label{fig:RGtk2-option-editor}
\end{figure}

For this example we collect values for arguments to the
\function{title} function. We first create a data frame with the
argument name and default value, along with some additional values:
<<>>=
opts <- c("main", "sub", "xlab", "ylab", "line", "outer")
DF <- data.frame(option = opts,
           value = c("", "", "", "", "0", "FALSE"),
           class = c(rep("character", 4), "integer", "logical"),
           edit_color = rep("gray95", 6),
           dirty = rep(FALSE, 6),
           stringsAsFactors = FALSE)
@ 
%
Unfortunately, we need to coerce the default values to character, in
order to store them in a single column. We preserve the class in the
\code{class} column, for coercion later. The \code{edit\_color} and
\code{dirty} columns are related to editing and explained later.
%

Now we create our model and configure the first column:
<<model, results=hide>>=
model <- rGtkDataFrame(DF)
view <- gtkTreeView(model)
##
cell_renderer <- gtkCellRendererText()
cell_renderer['background'] <- 'gray80'
view$insertColumnWithAttributes(position = -1,
                                title = "Option",
                                cell = cell_renderer,
                                text = 1 - 1)
@ 
%
The first column has a special background color which we specify
below, which indicates that the cells are not editable.
The second column is editable and has a background color that is
state dependent and indicates if a cell has been edited (The
\code{xlab} column in Figure~\ref{fig:RGtk2-option-editor}):
<<secondColumn, results=hide>>=
cell_renderer <- gtkCellRendererText()
cell_renderer['editable'] <- TRUE
view$insertColumnWithAttributes(position = -1,
                                title = "Value",
                                cell = cell_renderer,
                                text = 2 - 1,
                                background = 4 - 1
                                )
@ 

To attach the view to the model, we connect the cell renderer to the
\signal{edited} signal. Here we use the \code{class} value to format
the text and then set the background color and \code{dirty} flag of the
entry. The latter allows one to easily find the values which were edited.
<<editConnect>>=
gSignalConnect(cell_renderer, "edited", 
    function(cell_renderer, path, new.text, user.data) {
      model <- user.data$model
      i <- as.numeric(path) + 1; j <- user.data$column
      val <- as(new.text, model[i, 'class'])
      model[i,j] <- as(val, "character")   
      model[i, 'dirty'] <- TRUE                 # mark dirty
      model[i, 'edit_color'] <- 'gray70'        # change color
    }, data=list(model=model, column=2))
@  

A simple window displays our GUI.
<<>>=
window <- gtkWindow(show=FALSE)
window['title'] <- "Option editor"
window$setSizeRequest(300,500)
scrolled_window <- gtkScrolledWindow()
window$add(scrolled_window)
scrolled_window$add(view)
window$show()
@ 

Implementing this into a GUI requires writing a function to map the
model values into the appropriate call to the \function{title} function. The
\code{dirty} flag makes this easy, but this is a task we do not pursue
here. Instead we add a bit of extra detail by providing a tooltip.

%% ML: This section makes me uncomfortable, since it's relying on very
%% volatile code. Internal routines from a package in active
%% development, which in turn rely on undocumented and internal
%% features of R.
\paragraph{Tooltips}
For this example, our function has built-in documentation. Below we
use an internal function from the \pkg{helpr} package\footnote{It is
  important to note that we are calling internal routines of a package
  still under active development, which in turn relies on volatile
  features of R. In general, such practice can lead to maintenance
  headaches.  The purpose of this example is only to provide a natural
  demonstration of tooltips on a tree view.} to extract the
description for each of the arguments. We leave this in a list,
\code{descs}, for later lookup.
<<>>=
require(helpr, quietly=TRUE)
package <- "graphics"; topic <- "title"
rd <- helpr:::parse_help(helpr:::pkg_topic(package, topic), 
                         package = package)
descs <- rd$params$args
names(descs) <- sapply(descs, function(i) i$param)
@ 

For many widgets, adding a
tooltip is as easy as calling
\method{setTooltipText}{GtkWidget}. However, it is more complicated in
a tree view, as each cell should get a different tip.  To add tooltips
to the tree view we first indicate that we want tooltips, then connect
to the \signal{query-tooltip} signal to implement the tooltip:
<<>>=
view["has-tooltip"] <- TRUE
gSignalConnect(view, "query-tooltip", 
       function(view, x, y, key_mode, tooltip, user.data) {
         out <- view$getTooltipContext(x, y, key_mode)
         if(out$retval) {
           model <- view$getModel()
           i <- as.numeric(out$path$toString()) + 1
           val <- model[i, "option"]
           txt <- descs[[val]]$desc
           txt <- gsub("code>","b>", txt)  # no code in Pango
           tooltip$setMarkup(txt)
           TRUE
         } else {
           FALSE                           # no tooltip
         }
       })
@ 
%
Within this callback we check if we have the appropriate context (we
are in a row), then, if so, use the path to find the description to
set in the tooltip. The descriptions use HTML for markup, but the
tooltip only uses Pango. As the \code{code} tag is not PANGO, we
change to a bold tag using \function{gsub}.
