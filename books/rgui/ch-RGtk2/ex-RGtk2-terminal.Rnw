This example shows how to create a simple command line interface with
the text view widget (Figure~\ref{fig:RGtk2-terminal}). While few statistical applications will include
a command line widget, the example is familiar and shows several
different, but useful, aspects of the widget.

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{ex-RGtk2-terminal}
  \caption{A basic \R\/ terminal implemented using a \code{gtkTextView} widget.}
  \label{fig:RGtk2-terminal}
\end{figure}

<<echo=FALSE>>=
## make a *basic* terminal in RGtk2
library(RGtk2)
@ 

We begin by defining our text view widget and retrieving its
buffer. We also specify a fixed-width font for the buffer.
<<TextViewWidget>>=
tv <- gtkTextView()
tb <- tv$getBuffer()
font <- pangoFontDescriptionFromString("Monospace")
tv$modifyFont(font)                     # widget wide
@ 

We will use a few formatting tags, defined next. We do not need the
tag objects as variables in the workspace, as we refer to them later
by name.
<<results=hide>>=
tb$createTag(tag.name="cmdInput")
tb$createTag(tag.name="cmdOutput", 
             weight=PangoWeight["bold"])
tb$createTag(tag.name="cmdError", 
             weight=PangoStyle["italic"], foreground="red")
tb$createTag(tag.name="uneditable", editable=FALSE)
@ 

We define a mark to indicate the beginning of a newly entered
command, and another mark tracks the end of the buffer:
<<>>=
startCmd <- tb$createMark("startCmd", tb$getStartIter()$iter, 
                          left.gravity=TRUE)
bufferEnd <- tb$createMark("bufferEnd", tb$getEndIter()$iter)
@ 


There are two types of prompts needed: one for entering a new command
and one for a continuation. This function adds either, depending on
its argument:
<<>>=
addPrompt <- function(obj, prompt=c("prompt", "continue"),
                      setMark=TRUE) {
  prompt <- match.arg(prompt)
  prompt <- getOption(prompt)
  
  endIter <- obj$getEndIter()
  obj$insert(endIter$iter, prompt)
  if(setMark)
    obj$moveMarkByName("startCmd", endIter$iter)
  obj$applyTagByName("uneditable", obj$getStartIter()$iter, 
                     obj$getEndIter()$iter)
}
addPrompt(tb) ## place an initial prompt
@ 

This helper method writes the output of a command to the text
buffer:
<<addOutput>>=
addOutput <- function(obj, output, tagName="cmdOutput") {
  endIter <- obj$getEndIter()
  if(length(output) > 0)  
    sapply(output, function(i)  {
      obj$insertWithTagsByName(endIter$iter, i, tagName)
      obj$insert(endIter$iter, "\n", len=-1)
    })
}
@ 
%
We didn't arrange to truncate large outputs, but that would be a nice
addition. By passing in the tag name, we can specify whether this is
normal output or an error message.

This next function uses the \code{startCmd} mark and the end of the buffer
to extract the current command. The \qcode{regex} is used to parse multi-line commands.
<<>>=  
findCMD <- function(obj) {
  endIter <- obj$getEndIter()
  startIter <- obj$getIterAtMark(startCmd)
  cmd <- obj$getText(startIter$iter, endIter$iter, TRUE)
  regex <- paste("\n[", getOption("continue"), "] ", sep = "")
  cmd <- unlist(strsplit(cmd, regex))
  cmd
}
@ 
%

The following function takes the \iprogram{evaluating strings}current command and evaluates it
using the \pkg{evaluate} package. It uses a hack (involving
\code{grepl}) to distinguish between an incomplete command and a true
syntax error.

<<evalCmd>>=
require(evaluate)
evalCMD <- function(tv, cmd) {
  tb <- tv$getBuffer()
  out <- try(evaluate:::evaluate(cmd, .GlobalEnv), silent=TRUE)
  
  if(inherits(out, "try-error")) {
    ## parse error
    addOutput(tb, out, "cmdError")
  } else if(inherits(out[[2]], "error")) {
    if(grepl("end", out[[2]])) {        # a hack here
      addPrompt(tb, "continue", setMark=FALSE)
      return()
    } else {
      addOutput(tb, out[[2]]$message, "cmdError")
    }
  } else {
    addOutput(tb, out[[2]], "cmdOutput")
  }
  addPrompt(tb, "prompt", setMark=TRUE)
}
@ 

We arrange that the \code{evalCMD} command is called when the
\kbd{return} key is pressed next. Other key bindings might also be of
interest, such as one for \kbd{tab} completion.
<<connectBinding, results=hide>>=
gSignalConnect(tv, "key-release-event", f=function(w, e) {
  obj <- w$getBuffer()                  # w is textview
  keyval <- e$getKeyval()
  if(keyval == GDK_Return) {
    cmd <- findCMD(obj)                 # poss. character(0)
    if(length(cmd) && nchar(cmd) > 0)
      evalCMD(w, cmd)
  }
})
@

%
%% ML: what is going on here? why is the signal commented out?
%% JV: Dunno, added it back in...
Finally, We connect \function{moveViewport} to the \code{changed}
signal of the text buffer, so that the view always scrolls to the
bottom when the contents of the buffer are modified:

<<results=hide>>=
scrollViewport <- function(view, ...) {
  iter <- view$getBuffer()$getEndIter()$iter
  view$scrollToMark(bufferEnd, within.margin=0)
  return(FALSE)
}
gSignalConnect(tb, "changed", scrollViewport, data=tv, 
               after = TRUE, user.data.first = TRUE)
@ 

<<makeGUI, echo=FALSE>>=
## scroll window
sw <- gtkScrolledWindow()
sw$setPolicy("automatic", "automatic")
sw$add(tv)

## top-level window
w <- gtkWindow(show=FALSE)
w$setTitle("A terminal")
w$add(sw)
w$setSizeRequest(400,200)
w$showAll()
@ 



<<echo=FALSE>>=
## History features
## This is not illustrated in text, but is added here to illustrate how this might be implemented
## The major issue with this example is we can't trap the return or arrow keys before they move 
## the cursor so any thing ends up looking jerky

## store the stack and a pointer to the current command with the text buffer
tb$setData("history", list())
tb$setData("ptr", 0)


## replace cmd with that in str.
replaceCMD <- function(obj, str) {
  endIter <- obj$getEndIter()
  startIter <- obj$getIterAtMark(startCmd)
  obj$delete(startIter$iter, endIter$iter)
  endIter <- obj$getEndIter()
  obj$insertWithTagsByName(endIter$iter, str[1], "cmdInput")
  if(length(str) > 1) {
    for(i in str[-1]) {
      obj$insert(endIter$iter, "\n")
      obj$insertWithTagsByName(endIter$iter, getOption("continue"), "cmdInput")
      obj$insertWithTagsByName(endIter$iter, i, "cmdInput")
    }
  }
  moveViewport(obj)
}

## This adds the command to the history stack and moves the pointer.
addHistory <- function(obj, cmd) {
  history <- obj$GetData("history"); ptr <- obj$GetData("ptr")
  history <- c(history, cmd)
  ptr <- length(history)
  obj$SetData("ptr", ptr)
  obj$SetData("history", history)
}

## these next two functions scroll through the history
scrollHistoryUp <- function(obj) {
  ## move through history
  ptr <- obj$GetData("ptr") - 1
  if(ptr > 0)
    replaceCMD(obj, obj$GetData("history")[[ptr]])
  obj$SetData("ptr", max(ptr,0))
  obj$PlaceCursor(obj$GetEndIter()$iter)
}

scrollHistoryDown <- function(obj) {
  ## move through history
  ptr <- obj$GetData("ptr") + 1
  history <- obj$GetData("history")
  if(ptr <= length(history)) 
    replaceCMD(obj, history[[ptr]])
  obj$SetData("ptr", min(ptr,length(history)))
  obj$PlaceCursor(obj$GetEndIter()$iter)
}

## History bindings
## this uses Control-p and Control-n to move
ID <- gSignalConnect(tv, "key-release-event", f=function(w, e, data) {
  if(e$GetState() != GdkModifierType['control-mask'])
    return(TRUE)

  obj <- w$GetBuffer()
  keyval <- e$GetKeyval()

  if(keyval == GDK_p) {
    scrollHistoryUp(obj)
  } else if(keyval == GDK_n) {
    scrollHistoryDown(obj)
  }
  return(TRUE)
})
@ 
