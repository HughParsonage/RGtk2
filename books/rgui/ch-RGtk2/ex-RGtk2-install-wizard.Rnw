<<installPackagesWizard, echo=FALSE>>=
## gtk Assistant example
require(RGtk2)
@ 

This example wraps the \function{install.packages} function into a
wizard with different pages for the (optional) selection of a CRAN
mirror, the selection of the package to install, the configuration
options provided and feedback. In general, wizards are quite common
for software installation.

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-RGtk2-install-wizard.png}
  \caption{An installation wizard programmed using
    \class{GtkAssistant}. This is page 4 which allows options for a
    call to \code{install.packages} to be configured.}
  \label{fig:RGtk2-install-wizard}
\end{figure}


We begin by defining our assistant and connecting to its
\signal{cancel} signal:
<<defineAssistant, results=hide>>=
assistant <- gtkAssistant(show=FALSE)
assistant$setSizeRequest(500, 500)
gSignalConnect(assistant, "cancel", 
               function(assistant) assistant$destroy())
@

Our pages will be computed dynamically. Here we populate the pages
using box containers and specify their respective types:
<<makePages, results=hide>>=
pages <- lapply(1:5, gtkVBox, spacing = 5, homogeneous = FALSE)
page_types <- c("intro", rep("confirm", 3), "summary")
sapply(pages, gtkAssistantAppendPage, object = assistant)
sapply(pages, gtkAssistantSetPageType, object = assistant, 
       type=page_types)
@ 
%
We customize each page with a side logo.
<<sideLogo1, results=hide>>=
image <- gdkPixbuf(filename = imagefile("rgtk-logo.gif"))[[1]]
sapply(pages, gtkAssistantSetPageSideImage, object = assistant, 
       pixbuf = image)
@ 

When a page is about to be called, the \signal{prepare} signal is
emitted. In our handler, we check and see if it has any children. If
not, we call a function to lazily create the page. These functions are
stored in a list, so that they we can refer to them by index.
<<>>=
populatePage <- list()                
gSignalConnect(assistant, "prepare", 
       function(assistant, page, data) {
         page_no <- which(sapply(pages, identical, page))
         if(!length(page$getChildren()))
           populatePage[[page_no]]()
       })
@

Although we do not show how to create the CRAN selection page
(cf. Example~\ref{ex:RGtk2-add-toggle-to-df} for a similar
construction), we call \method{setForwardPageFunc}{GtkAssistant} to
set a function that will skip this page if it is not needed, i.e., if
the mirror has already been selected. The callback simply returns an
integer with the next page number based on the last one.
<<results=hide>>=
assistant$setForwardPageFunc(function(page_index, data) {
  if(page_index == 0 && have_CRAN()) 
    2L 
  else 
    as.integer(page_index + 1)
}, data=NULL)
@ 

We have a few script globals that allow us to pass data between pages:
<<>>=
CRAN_package <- NA
install_options <- list() #type, dependencies, lib
@ 

<<HelperFunctions, echo=FALSE>>=
## Helper functions
##' return value or NA
##'
gtkTreeViewGetSelectedValue <- function(object, column) {
  cur <- object$getSelection()$getSelected()
  if(cur$retval)
    with(cur, object$getModel()$getValue(iter, column -1 )$value)
  else
    NA
}


have_CRAN <- function() getOption("repos")["CRAN"] != "@CRAN@"

##' from getCRANmirrors
set_CRAN <- function(url) {
  if(is.null(url)) return()
  repos <- getOption("repos")
  repos["CRAN"] <- gsub("/$", "", url)
  options(repos=repos)
}
@ 





We now show how some of the pages are populated. The initial screen is
just a welcome and simply shows a label:
<<page1>>=
populatePage[[1]] <- function() {
  assistant$setPageTitle(pages[[1]], "Install a CRAN package")
  pages[[1]]$packStart(label <- gtkLabel())
  pages[[1]]$packStart(gtkLabel(), expand=TRUE) # a spring
  
  label$setMarkup(paste(
       "<span font='x-large'>Install a CRAN package</span>",
       "This wizard will help install a package from",
       "<b>CRAN</b>. If you have not already specified a",
       "CRAN repository, you will be prompted to do so.",
       sep="\n"))
  assistant$setPageComplete(pages[[1]], TRUE)
}
@ 


<<CRANMirror, echo=FALSE>>=
## Not shown
populatePage[[2]] <- function() {
  assistant$setPageTitle(pages[[2]], "Select a CRAN mirror")

  CRAN_mirrors <- getCRANmirrors(all = FALSE, local.only = FALSE)[, c(1,2,4)]
  nms <- names(CRAN_mirrors)
  d <- rGtkDataFrame(CRAN_mirrors)
  #
  view <- gtkTreeView()
  mapply(view$insertColumnWithAttributes, -1, nms[1:2], 
         list(gtkCellRendererText()), text = 0:1)
  view$setModel(d)
  view$getSelection()$unselectAll()     # no selection
  gSignalConnect(view$getSelection(), "changed", function(view, ...) {
    CRAN_repos <- view$getSelectedValue(3)
    set_CRAN(CRAN_repos)
    assistant$setPageComplete(pages[[2]], TRUE)
  }, data=view, user.data.first=TRUE)
  
  
  sw <- gtkScrolledWindow(); sw$add(view)
  sw$setPolicy("automatic", "automatic")
  
  pages[[2]]$packStart(gtkLabel("Select a CRAN mirror"), expand=FALSE)
  pages[[2]]$packStart(sw, expand=TRUE, fill=TRUE)

}
@ 
  
  
<<SelectPacakge, echo=FALSE>>=
## Not shown
populatePage[[3]] <- function() {
  assistant$setPageTitle(pages[[3]], "Select a CRAN package")
  #
  avail_packages <- available.packages()[, c(1,2)]
  nms <- colnames(avail_packages)
  avail_packages_store <- rGtkDataFrame(avail_packages)
  #
  view <- gtkTreeView()
  mapply(view$insertColumnWithAttributes, -1, nms, 
         list(gtkCellRendererText()), text = 0:1)
  view$setModel(avail_packages_store)
  view$getSelection()$unselectAll()     # no selection
  gSignalConnect(view$getSelection(), "changed", function(view, ...) {
    CRAN_package <<- view$getSelectedValue(1)
    assistant$setPageComplete(pages[[3]], TRUE)
  }, data=view, user.data.first=TRUE) 
  #
  sw <- gtkScrolledWindow(); sw$add(view)
  sw$setPolicy("automatic", "automatic")
  #
  pages[[3]]$packStart(gtkLabel("Select a package to install"), expand=FALSE)
  pages[[3]]$packStart(sw, expand=TRUE, fill=TRUE)
}
@ 

We skip showing the pages to select a CRAN site and a package, as they
are based on the forthcoming \class{GtkTreeView} class. On the fourth
page (cf.  Figure~\ref{fig:RGtk2-install-wizard} for a realization) is
a summary of the package taken from CRAN and a chance for the user to
configure a few options for the \function{install.packages} function.
<<>>=
populatePage[[4]] <- function() {
  assistant$setPageTitle(pages[[4]], "Install a CRAN package")
  ##
  get_desc <- function(pkgname) {
    o <- "http://cran.r-project.org/web/packages/%s/DESCRIPTION"
    x <- readLines(sprintf(o, pkgname))
    f <- tempfile(); cat(paste(x, collapse="\n"), file=f)
    read.dcf(f)
  }
  desc <- get_desc(CRAN_package)
  #
  label <- gtkLabel()
  label$setLineWrap(TRUE)
  label$setWidthChars(40)
  label$setMarkup(paste(
    sprintf("Install package: <b>%s</b>", desc[1,'Package']),
    "\n",
    sprintf("%s", gsub("\\n", " ", desc[1,'Description'])),
    sep="\n"))
  
  pages[[4]]$packStart(label)
  ##
  table <- gtkTable()
  pages[[4]]$packStart(table, expand=FALSE)
  pages[[4]]$packStart(gtkLabel(), expand=TRUE)
  
  ##
  combo <- gtkComboBoxNewText()
  pkg_types <- c("source", "mac.binary", "mac.binary.leopard",
                 "win.binary", "win64.binary")
  sapply(pkg_types, combo$appendText)
  combo$setActive(which(getOption("pkgType") == pkg_types) - 1)
  gSignalConnect(combo, "changed", function(combo, ...) {
    cur <- 1L + combo$getActive()
    install_options[['type']] <<- pkg_types[cur]
  })
  table$attachDefaults(gtkLabel("Package type:"), 0, 1, 0, 1)
  table$attachDefaults(combo, 1, 2, 0, 1)

  ##
  checkButton <- gtkCheckButton()
  checkButton$setActive(TRUE)
  gSignalConnect(checkButton, "toggled", function(checkButton) {
    install_options[['dependencies']] <<- checkButton$getActive()
  })
  table$attachDefaults(gtkLabel("Install dependencies"),
                       0, 1, 1, 2)
  table$attachDefaults(cb, 1, 2, 1, 2)

  ##
  fileChooser <- gtkFileChooserButton("Select a directory...", 
                                      "select-folder")
  fileChooser$setFilename(.libPaths()[1])
  gSignalConnect(fileChooser, "selection-changed", 
                 function(fileChooser) {
                   dir <- fileChooser$getFilename()
                   install_options[['lib']] <<- dir
                 })
  table$attachDefaults(gtkLabel("Where"), 0, 1, 2, 3)
  table$attachDefaults(fc, 1, 2, 2, 3)
  ## align labels to right and set spacing
  sapply(table$getChildren(), function(child) {
    widget <- child$getWidget()
    if(is(widget, "GtkLabel"))  widget['xalign'] <- 1
  })
  table$setColSpacing(0L, 5L)
  ##
  assistant$setPageComplete(pages[[4]], TRUE)
}
@ 

Our last page, where the selected package is installed, would
naturally be of type \code{progress}, but there is no means to
interrupt the flow of \function{install.packages} to update the
page. A real application would reimplement that. Instead we just set a
message once the package install attempt is finished.
<<>>=
populatePage[[5]] <- function() {
  assistant$setPageTitle(pages[[5]], "Done")
  install_options$pkgs <- CRAN_package
  out <- try(do.call("install.packages", install_options), 
             silent=TRUE)

  label <- gtkLabel(); pages[[5]]$packStart(label)
  if(!inherits(out, "try-error")) {
    label$setMarkup(sprintf("Package %s installed successfully", 
                            CRAN_package))
  } else {
    label$setMarkup(paste(sprintf("Package %s failed to install", 
                                  CRAN_package),
                          paste(out, collapse="\n"),
                          sep="\n"))
  }

  assistant$setPageComplete(pages[[5]], FALSE)
}
@ 

To conclude, we populate the first page and call the assistant's
\meth{show} method:
<<showAssistant>>=
populatePage[[1]]()
assistant$show()
@   
