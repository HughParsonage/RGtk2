<<ComboBoxExample, echo=FALSE>>=
## An example of two comboboxes where 1 updates the other
require(RGtk2)
data(mtcars); library(MASS); data(Cars93) # need some data frames
@ 
%
We use two convenience functions below from the \pkg{ProgGUIInR} package to find the possible data
frames, and for a data frame to find the variables.
<<>>=
#require(ProgGUIinR)                     # for avail_dfs, find_vars
source("~/GUI/ProgGUIInR/R/misc.R")
@ 

We have a basic set of widgets:
<<Widgets>>=
w <- gtkWindow(show=FALSE)
w$setTitle("gtkComboBox example")

df_combo <- gtkComboBoxNewText()
var_combo <- gtkComboBoxNewText()
@ 
%

Our layout uses boxes, a table is better but that comes later. To add
a twist, we will hide our variable combobox until after a data frame
has been initially selected.
<<Layout>>=
g <- gtkVBox(); w$add(g)
#
g1 <- gtkHBox(); g$packStart(g1)
g1$packStart(gtkLabel("Data frames:"))
g1$PackStart(df_combo)
#
g2 <- gtkHBox(); g$packStart(g2)
g2$packStart(gtkLabel("Variable:"))
g2$PackStart(var_combo)
g2$hide()
@
%

Finally we configure the comboboxes. When a data frame is selected we
first clear out the variable combobox (by calling it's model's
\meth{Clear} method) the populate.
<<configureComboBoxes, results=hide>>=
sapply(avail_dfs(), gtkComboBoxAppendText, object=df_combo)
df_combo$setActive(-1)
#
gSignalConnect(df_combo, "changed", function(w, ...) {
  var_combo$getModel()$clear()          # how to clear, or removeText.
  sapply(find_vars(w$getActiveText()), gtkComboBoxAppendText, object=var_combo)
  g2$show()
})
@ 
%

<<echo=FALSE>>=
## show window
w$show()
@ 

