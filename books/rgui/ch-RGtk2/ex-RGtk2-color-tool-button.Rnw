Space in a toolbar is limited, and sometimes there are several actions
that differ only by a single parameter. A good example is the color
tool button found in many word processors. Including a button for
every color in the palette would consume an excessive amount of
space. A common idiom is to embed a drop-down menu next to the button,
much like a combo box, for specifying the color, or, in general, any
discrete parameter.

We demonstrate how one might construct a color-selecting tool
button. Our menu will list the colors in the \R\/ palette. The
associated button is a \class{GtkColorButton}. When the user
clicks on the button, a more complex color selection dialog will
appear, allowing total customization.
<<rgtk2-mennus-toolbar-color-button>>=
gdk_color <- gdkColorParse(palette()[1])$color
color_button <- gtkColorButton(gdk_color)
@
% 
The \constructor{gtkColorButton} constructor requires the initial color
to be specified as a \class{GdkColor}, which we parse from the \R\/
color name.

The next step is to build the menu. Each menu item will display a
$20x20$ rectangle, filled with the color, next to the color name:
<<rgtk2-menus-toolbar-color-menu>>=
colorMenuItem <- function(color) {
  drawing_area <- gtkDrawingArea()
  drawing_area$setSizeRequest(20, 20)
  drawing_area$modifyBg("normal", color)
  image_item <- gtkImageMenuItem(color)
  image_item$setImage(drawing_area)
  image_item
}
color_items <- sapply(palette(), colorMenuItem)
color_menu <- gtkMenu()
for (item in color_items)
  color_menu$append(item)
@
%
An important realization is that the image in a
\class{GtkImageMenuItem} may be any widget that presumably draws an
icon; it need not be an actual \class{GtkImage}. In this case, we use
a drawing area with its background set to the color.  When an item is
selected, its color will be set on the color button:
<<rgtk2-menus-toolbar-color-cb, results=hide>>=
colorMenuItemActivated <- function(item) {
  color <- gdkColorParse(item$getLabel())$color
  color_button$setColor(color)
}
sapply(color_items, gSignalConnect, "activate", 
       colorMenuItemActivated)
@ 

Finally, we place the color button and menu together in the menu tool
button:
<<rgtk2-menus-toolbar-menu>>=
menu_button <- gtkMenuToolButton(color_button, "Color")
menu_button$setMenu(color_menu)
toolbar$add(menu_button)
@ 
