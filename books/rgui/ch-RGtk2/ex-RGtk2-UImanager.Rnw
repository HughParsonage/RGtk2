
\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{ex-RGtk2-UI}
  \caption{A GUI made using a UI manager to layout the menubar and toolbar.}
  \label{fig:RGtk2-UI}
\end{figure}

<<not-shown,echo=FALSE>>=
## sample RGtk2 menu
library(RGtk2)
@ 

We begin by constructing the UI manager:
<<>>=
uimanager = gtkUIManager()
@ 

Next, we define the action groups. For demonstration purposes, our
actions simply push the action name onto the status bar at the bottom
of the window. Below, we define the callback that will implement every
action:
<<>>=
someAction <- function(action,...) 
  statusbar$push(statusbar$getContextId("message"), 
                 action$getName())
Quit <- function(...) win$destroy()
@ 

We break up our action group definitions into one for ``File'' and
``Edit'' and another one for ``Help.'' Every action is defined by a
\class{GtkActionEntry} structure, which is represented by a list in
\R. The components (in order) are the name; the icon; the
label, with \code{\_} specifying the mnemonic; the keyboard
accelerator, with \code{<control>}, \code{<alt>}, \code{<shift>} as
possible prefixes, a tooltip, and finally the callback. Empty values
can be defined as \code{NULL} or, except for the callback, an empty
string.

<<Define-first-action-group>>=
firstActionGroup <- gtkActionGroup("firstActionGroup")
firstActionEntries <- list(
  ## name,ID,label,accelerator,tooltip,callback
  file = list("File",NULL,"_File",NULL,NULL,NULL),
  new = list("New", "gtk-new", "_New", "<control>N", 
    "New document", someAction),
  sub = list("Submenu", NULL, "S_ub", NULL, NULL, NULL),
  open = list("Open", "gtk-open", "_Open", "<ctrl>0", 
    "Open document", someAction),
  save = list("Save", "gtk-save", "_Save", "<alt>S", 
    "Save document", someAction),
  quit = list("Quit", "gtk-quit", "_Quit", "<ctrl>Q", 
    "Quit", Quit),
  edit = list("Edit", NULL, "_Edit", NULL, NULL, NULL),
  undo = list("Undo", "gtk-undo", "_Undo", "<ctrl>Z", 
    "Undo change", someAction),
  redo = list("Redo", "gtk-redo", "_Redo", "<ctrl>U", 
    "Redo change", someAction)
)
@ 
%
In the above, we define the dummy actions ``File'' and ``Edit'' that
perform no function. They are necessary for specifying the menu layout
later. We now add the actions to the action group, then add this
action group to the first spot in the UI manager.
<<"Insert action group", results=hide>>=
firstActionGroup$addActions(firstActionEntries)
uimanager$insertActionGroup(firstActionGroup, 0) # 0-based
@ 

It is also possible to define toggle actions, as we demonstrate
presently for the ``Help'' group. First, we define the ordinary actions:
<<results=hide>>=
helpActionGroup <- gtkActionGroup("helpActionGroup")
helpActionEntries <- list(
  help = list("Help", "", "_Help", "", "", NULL),
  about = list("About", "gtk-about", "_About", "", "", 
    someAction)
)
helpActionGroup$addActions(helpActionEntries)
@ 
%
Next, we define a ``Use tooltips'' toggle action.

A toggle is defined with \command{gtkToggleAction} which has signature
in a different order than the action entry. Notice, we don't have an
icon, as the toggled icons is used.  To add a callback, we connect to
the \code{toggled} signal of the action element. This callback allows
for user data, as illustrated.

<<"a toggle action">>=
toggleActions <- list(
     ## name, label, tooltip, stock.id              
     tooltips = gtkToggleAction("UseTooltips", "Use tooltips", 
       "Use tooltips to show additional information", NULL)
)
gSignalConnect(toggleActions[[1]], "toggled", 
               function(...) print("toggled"))
helpActionGroup$addAction(toggleActions$tooltips)
@
%
The list structure for toggle actions is identical to that of the
ordinary actions, except for the last element which indicates whether
the action is initially active.  We insert the help action group in
the second position.
<<"insert help action group">>=
uimanager$insertActionGroup(helpActionGroup, 1)
@ 
%
One can also incorporate radio actions, although this is not shown.

Our menubar and toolbar layout is specified as XML according to a
schema specified by the UI manager framework. The XML can be stored in
a file or an \R\/ character vector.  The structure of the file can be
grasped quickly from this example:
\begin{verbatim}
<ui>
  <menubar name="menubar">
    <menu name="FileMenu" action="File">
      <menuitem name="FileNew" action="New"/>
      <menu action="Submenu">
	<menuitem name="FileOpen" action="Open" />
      </menu>
      <menuitem name="FileSave" action="Save"/>
      <separator />
      <menuitem name="FileQuit" action="Quit"/>
    </menu>
    <menu action="Edit">
      <menuitem name="EditUndo" action="Undo" />
      <menuitem name="EditRedo" action="Redo" />
    </menu>
    <menu action="Help">
      <menuitem action="UseTooltips"/>
      <menuitem action="About"/>
    </menu>
  </menubar>
  <toolbar name="toolbar">
    <toolitem action="New"/>
    <toolitem action="Open"/>
    <toolitem action="Save"/>
    <separator />
    <toolitem action="Quit"/>
  </toolbar>
</ui>
\end{verbatim}
% \VerbatimInput{ex-menus.xml}

The top-level element is named \code{ui}, only one of which is allowed
in a UI definition. The children of \code{ui} represent a top-level
action container: \code{menubar}, \code{toolbar}, or \code{popup}.
The \code{name} attributes are used to refer to the widgets later
on. The \code{menubar} element contains \code{menu} elements, which in
turn contain \code{menuitem} and \code{separator} elements, as well as
additional \code{menu} elements for nesting. The toolbars are
populated with \code{toolitem} elements. The item elements have an
\code{action} attribute that refers to an action in one of our action
groups and an optional name (defaulting to the \code{action}
value).

This file is loaded into the UI manager as follows
<<"Load UI from file">>=
id <- uimanager$addUiFromFile("ex-menus.xml")
@ 
%
The \code{id} value can be used to merge and delete UI components
according to the mode of the UI, but this is not illustrated here.

Now we can setup a basic window template with menubar, toolbar, and
status bar. We first construct the three main widgets. The UI manager
will construct our toolbar and menubar, as identified from the names
specified in the UI definition:
<<"Retrieve menubar and toolbar from the uimanager">>=
menubar <- uimanager$getWidget("/menubar")
toolbar <- uimanager$getWidget("/toolbar")
@ 
The statusbar is constructed with
<<"define statusbar">>=
statusbar <- gtkStatusbar()
@ 
%

Now we create a top-level window and attach a keyboard accelerator
group to the window so that when the window has the focus, the
keyboard shortcuts defined for our actions are active.
<<Define-window-add-accelerator-group>>=
win <- gtkWindow(show=TRUE)
win$setTitle("Window example")
accelgroup <- uimanager$getAccelGroup()
win$addAccelGroup(accelgroup)
@ 

Now it is a simple matter of packing the widgets into a box.
<<setup-box>>=
box <- gtkVBox()
win$add(box)

box$packStart(menubar, expand=FALSE, fill=FALSE,0)
box$packStart(toolbar, expand=FALSE, fill= FALSE,0)
contentArea <- gtkVBox()
box$packStart(contentArea, expand=TRUE, fill=TRUE,0)
contentArea$packStart(gtkLabel("Content Area"))
box$packStart(statusbar, expand=FALSE, fill=FALSE, 0)
@ 

The redo feature should only be sensitive to mouse events after a user
has undone an action. If we wanted to alter the sensitivity of the
redo action, we would need to retrieve it from the action group:
<<How-to-set-sensitivity>>=
redo <- firstActionGroup$getAction("Redo")
redo['sensitive'] <- FALSE
@ 
