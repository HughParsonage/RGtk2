<<VariableSelectionExample, echo=FALSE, results=hide>>=
## Example showing implementation of variable selection widget where two tables show possible selections
## and selection. Similar to SPSS widget
## Illustrates filtered models, icons in view column
library(RGtk2)
@ 

%% ML: John, I changed this to explicitly treat the selected and
%% unselected widgets, instead of looping over the pairs. It just
%% seemed like looping over two discrete things added unnecessary
%% complexity. Sure, the code is a little more verbose now, but it's
%% probably more readable. The other big change was using one model
%% and a custom filter.

This example shows how to create a GUI for selecting variables from a
data frame. The GUI is based on two lists. The left one indicates the
variables that can be selected, and the right shows the variables that
have been selected. An icon, indicating the variable type, is placed
next to the variable name. A similar mechanism is part of the SPSS
model specification GUI of
Figure~\ref{fig:GUI:spss-11-term-selection}. For illustration purposes
we use the \code{Cars93} data set.
<<>>=
df <- get(data(Cars93, package="MASS"))
@ 

First, we render an icon for each variable.  The \code{make\_icon}
function from the \pkg{ProgGUIinR} package creates an icon as a
\pkg{grid} object, which we render with \pkg{cairoDevice}:
<<echo=FALSE>>=
#library(ProgGUIinR)                     # for make_icon
source("../ProgGUIInR/R/misc.R")     # for make_icon
@ 
% 
<<make_icon>>=
make_icon_pixmap <- function(x, ...) {
  require(grid); require(cairoDevice)
  pixmap <- gdkPixmap(drawable=NULL, width=16, height=16, 
  depth=24)
  asCairoDevice(pixmap)
  grid.newpage()
  grid.draw(make_icon(x))
  dev.off()
  gdkPixbufGetFromDrawable(NULL, pixmap, NULL, 0,0,0,0,-1,-1)
}
@ 

The two list views are based on the same underlying data model, which
contains three columns: the variable name, the icon, and
whether the variable has been selected. We construct the corresponding
data frame and wrap it in a \class{RGtkDataFrame}:
<<model>>=
mdf <- data.frame(Variables = I(sort(names(df))),
                  icon = I(sapply(df, make_icon_pixmap)),
                  selected = rep(FALSE, ncol(df)))
model <- rGtkDataFrame(mdf)
@ 

The first view shows only unselected variables, while the other is
limited to selected variables. Thus, each view will be based on a
different filter:
<<filterModels, results=hide>>=
selectedFilter <- model$filter()
selectedFilter$setVisibleColumn(2)
unselectedFilter <- model$filter()
unselectedFilter$setVisibleFunc(function(model, iter) {
  !model$get(iter, 2)[[1]]
})
@ 
%
The selected filter is relatively easy to define, using
\code{selected} as the visible column. For the unselected filter, we
need to define a custom visible function that inverts the
\code{selected} column.

Next, we create a view for each filter:
<<views>>=
unselectedView <- gtkTreeView(unselectedFilter)
selectedView <- gtkTreeView(selectedFilter)
unselectedView$getSelection()$setMode('multiple')
selectedView$getSelection()$setMode('multiple')
@

Each cell needs to display both an icon and a label.  This is achieved
by packing two cell renderers into the column:
<<viewColumns, results=hide>>=
make_view_column <- function() {
  vc <- gtkTreeViewColumn()
  vc$setTitle("Variable")
  cr <- gtkCellRendererPixbuf()
  vc$packStart(cr)
  vc$addAttribute(cr, "pixbuf", 1)
  cr <- gtkCellRendererText()
  vc$packStart(cr)
  vc$addAttribute(cr, "text", 0)
  vc
}
unselectedView$insertColumn(make_view_column(), 0)
selectedView$insertColumn(make_view_column(), 0)
@ 

For later use we extend the API for a tree view -- one method to find
the selected indices ($1$-based) and one to indicate if there is a
selection: 
<<extendAPI>>=
## add to the gtkTreeView API for convenience
gtkTreeViewSelectedIndices <- function(object) {
  paths <- object$getSelection()$getSelectedRows()$retval
  out <- sapply(paths, function(i) {
    model <- object$getModel()          # Filtered!
    model$convertPathToChildPath(i)$toString()
  })
  if(length(out) == 0)
    integer(0)
  else
    as.numeric(out) + 1                             # 1-based
}
#
gtkTreeViewHasSelection <-
  function(obj) length(obj$selectedIndices()) > 0
@ 

Now we create the buttons and connect to the \code{clicked}
signal. The handler moves the selected values to the other list by
toggling the \code{selected} variable:
<<buttons, results=hide>>=
selectButton <- gtkButton(">")
unselectButton <- gtkButton("<")
toggleSelectionOnClick <- function(button, view) {
  gSignalConnect(button, "clicked", function (x) {
    ind <- view$selectedIndices()
    model[ind, "selected"] <- !model[ind, "selected"]
  })
}
toggleSelectionOnClick(selectButton, unselectedView)
toggleSelectionOnClick(unselectButton, selectedView)
@ 
%
We only want our buttons sensitive if there is a possible move. This
is determined by the presence of a selection:
<<sensitiveButtons, results=hide>>=
selectButton['sensitive'] <- FALSE
unselectButton['sensitive'] <- FALSE
trackSelection <- function(button, view)
  gSignalConnect(view$getSelection(), "changed", 
    function(x) button['sensitive'] <- view$hasSelection())
trackSelection(selectButton, unselectedView)
trackSelection(unselectButton, selectedView)
@ 

We now layout our GUI using a horizontal box, into which is packed the
views and a box holding the selection buttons. The views
will be scrollable, so we place them in scrolled windows:
<<guiLayout, results=hide>>=
w <- gtkWindow(show=FALSE)
w$setDefaultSize(600, 400)
g <- gtkHBox()
w$add(g)

selectedScroll <- gtkScrolledWindow()
selectedScroll$add(selectedView)
selectedScroll$setPolicy("automatic", "automatic")

unselectedScroll <- gtkScrolledWindow()
unselectedScroll$add(unselectedView)
unselectedScroll$setPolicy("automatic", "automatic")

buttonBox <- gtkVBox()
centeredBox <- gtkVBox()
buttonBox$packStart(centeredBox, expand = TRUE, fill = FALSE)
centeredBox$setSpacing(12)
centeredBox$packStart(selectButton, expand = FALSE)
centeredBox$packStart(unselectButton, expand = FALSE)

g$packStart(unselectedScroll, expand=TRUE)
g$packStart(buttonBox, expand=FALSE)
g$packStart(selectedScroll, expand=TRUE)
@ 

Finally, we show the top-level window:
<<packButtons, results=hide>>=
w$show()
@ 


