%% ML: not sure about this example. Could be implemented with the
%% simple text API without too much trouble.
This example employs two combo boxes: one to select a data frame and
the other to select a variable from the selected data frame. This
requires the variable selection combo box to update whenever the
selected data frame changes.  The data frame box will be a
\class{GtkComboBoxEntry}, so that the user can enter names of objects
in the current session. The other will be an ordinary combo box
explicitly based on a \class{GtkTreeModel}, specifically an
\code{RGtkDataFrame}. First, we construct the data frame box
and populate it with some datasets that are provided with \R:
<<results=hide>>=
datasets <- c("mtcars", "Cars93")
rdf <- rGtkDataFrame(datasets)
dfCb <- gtkComboBoxEntry(); dfCb$model <- rdf
@ 

For the variable names, we construct a combo box based on an
\code{RGtkDataFrame} and pack a text cell renderer to display the
names:
<<>>=
variableNames <- character(0)
varModel <- rGtkDataFrame(variableNames)
varCb <- gtkComboBox(varModel)
cr <- gtkCellRendererText()
varCb$packStart(cr)
varCb$addAttribute(cr, "text", 0)       # column 1
@ 

<<notShown, echo=FALSE>>=
## Our basic GUI uses a table for layout. Combo boxes fill and expand to fill 
## the cell.
tbl <- gtkTableNew(rows=2, columns=2, homogeneous=FALSE)
tbl$attach(gtkLabel("Data frame"), left.attach=0,1, top.attach=0,1, 
           xoptions = 0, yoptions = 0, xpadding = 5)
tbl$attach(dfCb, left.attach=1,2, top.attach=0,1, yoptions = 0)

tbl$attach(gtkLabel("Variables"), left.attach=0,1, top.attach=1,2, 
           xoptions = 0, yoptions = 0, xpadding = 5)
tbl$attach(varCb, left.attach=1,2, top.attach=1,2, yoptions = 0)
@ 
<<echo=FALSE>>=
w <- gtkWindow(show=FALSE)
w['title'] <- "Example of combo boxes"
g <- gtkHBox()
g$packStart(tbl, padding=15)
w$add(g)
w$showAll()
@ 

We now implement a signal handler that will update the variable combo
box upon a selection or entry in the data frame box. 
<<>>=
newDfSelected <- function(varCb, w, ...) {
  if(inherits(w, "GtkComboBox"))        # get entry widget
    w <- w$getChild()
  val <- w$getText()
  df <- try(get(val, envir=.GlobalEnv), silent=TRUE)
  if(!inherits(df, "try-error") && is.data.frame(df)) {
    nms <- names(df)
    ## update model
    newModel <- rGtkDataFrame(nms)
    varCb$setModel(newModel)
    varCb$setActive(-1)
  }
}
gSignalConnect(dfCb, "changed", f=newDfSelected,
               user.data.first=TRUE,
               data=varCb)
gSignalConnect(dfCb$getChild(), "activate", f=newDfSelected,
               user.data.first=TRUE,
               data=varCb)
@
%
This callback is connected to the signals for both activation of the
entry widget and the selection in the combo box. The function first
checks whether it is responding to the combo box or the entry, and, if
it is the combo box, it obtains the entry widget. To update the
display we replace the model, which admittedly defeats much of the
purpose of using a model.
