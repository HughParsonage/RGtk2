\GTK\/ provides a number of convenient dialogs for the common use
cases, as well as general infrastructure for constructing custom
dialogs.  A dialog is a window that generally consists of an icon, a
content area, and an action area containing a row of buttons
representing the possible user responses.  Typically, a dialog belongs
to a main application window and might be modal, in which case input
is blocked to other parts of the GUI.  \class{GtkDialog}
represents a generic dialog and serves as the base class for all
special purpose dialogs in \GTK.

\subsection{Message dialogs}
\label{sec:gtk-dialog-message}

Communicating textual messages to the user is perhaps the most common
application of a dialog. \GTK\/ provides the
\constructor{gtkMessageDialog} convenience wrapper for
\class{GtkDialog} for creating a message dialog showing a primary and
secondary message.  We construct one presently:
<<>>=
w <- gtkWindow(); w['title'] <- "Parent window"
#
dlg <- gtkMessageDialog(parent=w, 
                        flags="destroy-with-parent",
                        type="question", 
                        buttons="ok",
                        "My message")
dlg['secondary-text'] <- "A secondary message"
@ 
%

The \argument{flags}{gtkMessageDialog} argument allows one to specify
a combination of values from \code{GtkDialogFlags}. These include
\code{destroy-with-parent} and \code{modal}. Here, the dialog will be
destroyed upon destruction of the parent window. The
\argument{type}{gtkMessageDialog} argument specifies the message type,
using one of the $4$ values from \code{GtkMessageType}, which
determines the icon that is placed adjacent to the message text. The
\argument{buttons}{gtkMessageDialog} argument indicates the set of
response buttons with a value from \code{GtkButtonsType}. The
remaining arguments are pasted together into the primary message.  The
dialog has a \code{secondary-text} property that can be set to give a
secondary message.

Dialogs are optionally modal. Below, we enable modality by calling the
\method{run}{gtkDialog} method, which will additionally block the \R\/
session:
<<>>=
response <- dlg$run()
if(response == GtkResponseType["cancel"] || # for other buttons
   response == GtkResponseType["close"] ||
   response == GtkResponseType["delete-event"]) {
  ## pass
} else if(response == GtkResponseType["ok"]) {
  print("Ok")
}
dlg$Destroy()
@ 
%
The return value can then be inspected for the action, such as what
button was pressed. \class{GtkMessageDialog} will return response
codes from the \code{GtkResponseType} enumeration. We will see an
example of asynchronous response handling in the next section.

\subsection{Custom dialogs}
\label{sec:custom-dialogs}

The \constructor{gtkDialog} constructor returns a generic dialog
object which can be customized, in terms of its content and response
buttons.  Usually, a \class{GtkDialog} is constructed with
\constructor{gtkDialogNewWithButtons}, as a dialog almost always
contains a set of response buttons, such as \kbd{Ok}, \kbd{Yes},
\kbd{No} and \kbd{Cancel}.  In this example, we will create a simple
dialog showing a label and text entry:
<<>>=
dlg <- gtkDialogNewWithButtons(title="Enter a value", 
                       parent=NULL, flags=0,
                       "gtk-ok", GtkResponseType["ok"],
                       "gtk-cancel", GtkResponseType["cancel"],
                       show=FALSE)
@ 
%
Buttons are added with a label and a response id, and their order is
taken from their order in the call. There is no automatic ordering
based on an operating system's conventions.  When the button label
matches a stock ID, the icon and text are taken from the stock
definition. We used standard responses from \code{GtkResponseType},
although in general the codes are simply integer values;
interpretation is up to the programmer.

The dialog has a content area, which is an instance of
\class{GtkVBox}. To complete our dialog, we place a labeled text entry
into the content area:
<<OurDialogsLayout>>=
hb <- gtkHBox()
hb['spacing'] <- 10
#
hb$packStart(gtkLabel("Enter a value:"))
entry <- gtkEntry()
hb$packStart(entry)
#
vb <- dlg$getContentArea()
vb$packStart(hb)
@
%
The content is placed above the button box, with a separator between them.

In the message dialog example, we called the \method{run}{GtkDialog}
method to make the dialog modal. To make a non-modal dialog, do not
call \method{run}{GtkDialog} but connect to the \code{response} signal
of the modal dialog. The response code of the clicked button is passed
to the callback:
<<connectResponse>>=
ID <- gSignalConnect(dlg, "response", 
                     f=function(dlg, resp, user.data) {
                       if(resp == GtkResponseType["ok"])
                         print(entry$getText()) # Replace this
                       dlg$Destroy()
                     })
dlg$showAll()
dlg$setModal(TRUE)
@

\subsection{File chooser}
\label{sec:RGtk2:file-chooser}

A common task in a GUI is the selection of files and directories, for
example to load or save a document. \class{GtkFileChooser} is an
interface shared by widgets that choose files. \GTK\/ provides three
such widgets. The first is \class{GtkFileChooserWidget}, which may be
placed anywhere in a GUI. The other two are based on the
first. \class{GtkFileChooserDialog} embeds the chooser widget in a
modal dialog, while \class{GtkFileChooserButton} is a button that
displays a file path and launches the dialog when clicked.

\begin{example}{An open file dialog}{ex:RGtk2:open-file}
  Here, we demonstrate the use of the dialog, the most commonly used
  of the three.  An open file dialog can be created with:
<<openFileDialog>>=
dlg <- gtkFileChooserDialog(title="Open a file", 
                     parent=NULL, action="open",
                     "gtk-ok", GtkResponseType["ok"],
                     "gtk-cancel", GtkResponseType["cancel"],
                     show=FALSE)
@ 
  % 
  The dialog constructor allows one to specify a title, a parent and an
  action, either \code{open}, \code{save}, \code{select-folder} or
  \code{create-folder}. In addition, the dialog buttons must be
  specified, as with the last example using
  \code{gtkDialogNewWithButtons}.

  We connect to the \signal{response} signal
<<results=hide>>=
gSignalConnect(dlg, "response", f=function(dlg, resp, data) {
  if(resp == GtkResponseType["ok"]) {
    filename <- dlg$getFilename()
    print(filename)
  }
  dlg$destroy()
})
@
  % 
  The file selected is returned by
  \method{getFilename}{gtkFileChooser}. If multiple selection is enabled
  (via the \code{select-multiple} property) one should call the
  plural \method{getFilenames}{gtkFileChooser}.

  For the open dialog, one may wish to specify one or more filters that
  narrow the available files for selection:
<<>>=
fileFilter <- gtkFileFilter()
fileFilter$setName("R files")
fileFilter$addPattern("*.R")
fileFilter$addPattern("*.Rdata")
dlg$addFilter(fileFilter)
@ 
  % 
  The \constructor{gtkFileFilter} function constructs a filter, which is
  given a name and a set of file name patterns, before being added to
  the file chooser. Filtering by MIME type is also supported.

\end{example}

The save file dialog would be similar. The initial filename could be
specified with \method{setFilename}{gtkFileChooser}, or folder with
\method{setFolder}{gtkFileChooser}. The
\code{do-overwrite-confirmation} property controls whether the user is
prompted when attempting to overwrite an existing file.

Other features not discussed here, include embedding of preview and
other custom widgets, and specifying shortcut folders.

\subsection{Other choosers}

There are several other types of dialogs for making common types of
selections. These include \code{GtkCalendar} for picking dates,
\code{GtkColorSelectionDialog} for choosing colors, and
\code{GtkFontSelectionDialog} for fonts. These are very high-level
dialogs that are trivial to construct and manipulate, at a cost of
flexibility.

\subsection{Print dialog}

Rendering documents for printing is outside our scope; however, we
will mention that \class{GtkPrintOperation} can launch the native,
platform-specific print dialog for customizing a printing
operation. See Example~\ref{sec:gtk-printing-graphics} for an example
of printing R graphics using \pkg{cairoDevice}.
