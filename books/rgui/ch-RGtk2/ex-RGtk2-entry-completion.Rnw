This example illustrates the steps to add completion to a text entry.
<<echo=FALSE>>=
require(RGtk2)
@ 


The two basic widgets are defined as follows:
<<AppendWords>>=
entry <- gtkEntry()
completion <- gtkEntryCompletionNew()
entry$setCompletion(completion)
@ 

We will use a \code{rGtkDataFrame} instance for our completion model,
taking a convenient list of names for our example.
We set the completion objects's model and text column using the
similarly named methods, and then set some properties to customize how
the completion is handled.
<<SetCompletion>>=
store <- rGtkDataFrame(state.name)
completion$setModel(store)
completion$setTextColumn(0)             # which column in model
completion['inline-completion'] <- TRUE # inline with text edit
completion['popup-single-match'] <- FALSE
@ 

If we wanted to set a different matching function, one would do
something along the lines of the following where \function{grepl} is
used to indicate any match, not just the initial part of the
string. We get the string from the entry widget, not the value passed
in, as that has been standardized to lower case.

<<SetMatchFunc>>=
f <- function(comp, str, iter, user.data) {
  model <- comp$getModel()
  rowVal <- model$getValue(iter, 0)$value   # column 0 in model
  
  str <- comp$getEntry()$getText()      # case sensitive
  grepl(str, rowVal)
}
QT <- completion$setMatchFunc(func=f)
@ 

<<notShown, echo=FALSE>>=
## Our basic GUI is basic:
w <- gtkWindow(show=FALSE)
w$setTitle("Test of entry with completion")
w$add(entry)
w$showAll()
@ 



