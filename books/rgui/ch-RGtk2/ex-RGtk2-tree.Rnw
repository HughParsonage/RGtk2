This example uses a tree to explore an \R\/ list object, such as that
returned by one of \R's modeling functions.  As the depth of these
lists is not specified in advance, we use a dynamic approach to
creating the tree store, modifying the tree store when the tree view
is expanded or collapsed.
  
<<echo=FALSE>>=
## tree example
## a variable browser
require(RGtk2)
@ 

We begin by defining our tree store and an accompanying tree
view. This example allows sorting, and so calls the
\constructor{gtkTreeModelSort} function.
<<SetUpStore>>=
store <- gtkTreeStore(rep("gchararray", 2))
sstore <- gtkTreeModelSort(store)
@ 

We create a root row:
<<>>=
iter <- store$append(parent=NULL)$iter
store$setValue(iter, column=0, "GlobalEnv")
store$setValue(iter, column=1, "environment")
iter <- store$append(parent=iter)
@
%
It is necessary to append an empty row to the root so that root
becomes expandable.

We now define the tree view and allow for multiple selection:
<<>>=
view <- gtkTreeView(sstore)
view$getSelection()$setMode("multiple")
@ 

The basic idea is to create child nodes when the parent is expanded
and to delete the children when the parent is collapsed. This relies
on the \code{row-expanded} and \code{row-collapsed} signals,
respectively. First, we define the expansion handler:
<<>>=
gSignalConnect(view, signal = "row-expanded",
               f = function(view, iter, tpath, user.data) {
                 sortedModel <- view$getModel()
                 iter <- pathToIter(sortedModel, tpath)
                 path <- iterToRPath(sortedModel, iter)
                 children <- getChildren(path)
                 addChildren(store, children, parentIter=iter)
                 ## remove errant 1st offspring. See addChildren
                 ci <- store$iterChildren(iter)
                 if(ci$retval) store$remove(ci$iter)
               })
@ 
%
The callback calls several helper functions to map the tree path to an
R object, get the child components of the object and add them to the
tree. The details are in the definitions of the helper functions.

The \function{pathToIter} function finds the iterator in the base tree
model for a tree path in the sorted proxy.
<<trePathToIter>>=
pathToIter <- function(sstore, tpath) {
  store <- sstore$getModel()
  uspath <- sstore$convertPathToChildPath(tpath)
  store$getIter(uspath)$iter
}
@ 

We now need to convert the iterator to an ``R path,'' which is made up
of the names of each component that makes up an element in the
list. This function returns the path for a component specified by its
iterator.
<<IterToPath>>=
iterToRPath <- function(sstore, iter) {
  store <- sstore$getModel()
  indices <- store$getPath(iter)$getIndices()
  iter <- NULL
  path <- sapply(indices, function(i) {
    iter <<- store$iterNthChild(iter, i)$iter
    store$getValue(iter, 0)$value
  })
  return(path[-1])
}
@ 

The \function{getChildren} function obtains the child components of a
given \R\/ object path. If the path is empty, the children are the
objects in the global environment, the root. The return value is a
\class{data.frame} with three columns: object name, object class and
whether the object is recursive.
<<getChildren>>=
getChildren <- function(path=character(0)) {
  hasChildren <- function(obj) 
    (is.list(obj) || is.environment(obj)) && !is.null(names(as.list(obj)))
  
  getType <- function(obj) head(class(obj), n=1)

  obj <- 
    if (!length(path)) {
      .GlobalEnv
    } else {
      x <- get(path[1], envir=.GlobalEnv)
      if(length(path) > 1)
        get(path[1], envir=.GlobalEnv)[[path[-1]]]
      else
        x
    }

  children <- as.list(obj)
  
  d <- data.frame(children = names(children),
                  class = sapply(children, getType),
                  offspring = sapply(children, hasChildren))
  
  ## filter out Gtk ones
  d[!grepl("^Gtk", d$class), ]
}
@ 

The final step in the expansion handler is to add the children to the
tree store with the \function{addChildren} function.  Its one quirk is
the addition of a dummy child row when the item has children. This
makes the node expandable, i.e., the tree view draws an icon for the
user to click to request the expansion.
<<addChildren>>=
addChildren <- function(store, children, parentIter = NULL) {
  if(nrow(children) == 0) 
    return(NULL)
  for(i in 1:nrow(children)) {
    iter <- store$append(parent=parentIter)$iter
    sapply(1:(ncol(children) - 1), function(j)              
           store$setValue(iter, column = j - 1, children[i, j]))
    ## Add a branch if there are children
    if(children[i, "offspring"])
      store$append(parent=iter)
  }
}
@ 

Next, we define a handler for the \code{row-collapsed} signal, which
has a similar signature as the \code{row-expanded} signal. The handler
removes the children of the newly collapsed node, so that we can add
them again when the node is expanded.
<<>>=
gSignalConnect(view, signal = "row-collapsed",
               f = function(view, iter, tpath, user.data) {
                 sortedModel <- view$getModel()
                 iter <- pathToIter(sortedModel, tpath)
                 n = store$iterNChildren(iter)
                 if(n > 1) { ## n=1 gets removed when expanded
                   for(i in 1:(n-1)) {
                     child.iter <- store$iterChildren(iter)
                     if(child.iter$retval)
                       store$remove(child.iter$iter)
                   }
                 }
               })
@ 


Our last handler simply demonstrates the retrieval of an object when its
row is activated, i.e., double-clicked:
<<DoubleClickHandler>>=
gSignalConnect(view, signal = "row-activated",
               f = function(view, tpath, tcol) {
                 sortedModel <- view$getModel()
                 iter <- pathToIter(sortedModel, tpath)
                 path <- iterToRPath(sortedModel, iter)
                 sel <- view$getSelection()
                 out <- sel$getSelectedRows()
                 if(length(out) == 0) return(c()) # nothing
                 vals <- c()
                 for(i in out$retval) {  # multiple selections
                   iter <- sortedModel$getIter(i)$iter
                   newValue <- sortedModel$getValue(iter, 0)$value
                   vals <- c(vals, newValue)
                 }
                 print(vals)  # [Replace this]
               })
@ 
 
To finish this example, we would need to populate the tree view with
columns and display the view in a window.

<<addRenderer, echo=FALSE>>=
## Now, we define our GUI. The view will have two similar columns.
## add two cell renderers -- 1 for name, 1 for type
nms <- c("Variable name","type")
for(i in 1:2) {
  cr <- gtkCellRendererText()
  vc <- gtkTreeViewColumn()
  vc$setSortColumnId(i-1) # allow sorting
  vc$setResizable(TRUE)
  vc$setTitle(nms[i])
  vc$packStart(cr,TRUE)
  vc$addAttribute(cr,"text",i-1)
  view$insertColumn(vc, i-1)
}
@ 

<<exampleGUI, echo=FALSE>>=
## We now place the tree view widget into a basic GUI.
sw <- gtkScrolledWindow()
sw$setPolicy("automatic","automatic")
sw$add(view)

w <- gtkWindow()
w$setTitle("Tree view")
w$add(sw)
@ 

