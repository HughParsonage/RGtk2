This example shows how to pack buttons into a box so that the spacing
between the similar buttons is 12 pixels, but between potentially
dangerous buttons is 24 pixels, as per the Mac human interface
guidelines.
\GTK\/ provides the constructor \constructor{gtkHButtonBox} for
holding buttons, which provides a means to apply consistent styles,
but the default styles do not allow such spacing as desired. (Had all
we wanted was to right align the buttons, then that style is certainly
supported.) As such, we will illustrate how this can be done through a
combination of \code{spacing} arguments.
We assume that our parent container, \code{g}, is a
horizontal box container.
<<MacOSXstyleButton,echo=FALSE>>=
## not shown
w <- gtkWindow(show=FALSE)
w$setTitle("MAC OS X style buttons")
g <- gtkHButtonBox()
fg <- gtkHBox()
fg$setSizeRequest(width=800, height=-1)
w$add(fg)

g <- gtkHBox()
fg$packStart(g, padding=15)              # for size grip
@ 


\begin{figure}
  \centering
  \includegraphics[width=.85\textwidth]{ex-RGtk2-mac-buttons}
  \caption{Example using stock buttons with extra spacing added between the \code{delete} and \code{cancel} buttons.}
  \label{fig:ex-RGtk2-mac-buttons}
\end{figure}

We include standard buttons, so use the stock names and icons.
<<StockButtons>>=
cancel <- gtkButton(stock.id="gtk-cancel")
ok <- gtkButton(stock.id="gtk-ok")
delete <- gtkButton(stock.id="gtk-delete")
@ 

We will right align our buttons, so use the parent container's
\code{PackEnd} method. The \code{ok} button has no padding, the
12-pixel gap between it and the \code{cancel} button is ensured by  the
\code{padding} argument when the \code{cancel} button is
added. Treating the \code{delete} button as potentially irreversible,
we aim to have 24 pixels of separation between it and the
\code{cancel} button. This is given by adding 12 pixels of padding
when this button is packed in, giving 24 in total. The blank label is
there to fill out space if the parent container expands.
<<macButtonPack>>=
g$packEnd(ok, padding=0)
g$packEnd(cancel, padding=12)
g$packEnd(delete, padding=12)
g$packEnd(gtkLabel(""), expand=TRUE, fill=TRUE)
@ 
We make \code{ok} the default button, so have it grab the focus and
add a simple callback when the button is either clicked or the
\kbd{enter} key is pressed when the button has the focus.
<<>>=
ok$grabFocus()
QT <- gSignalConnect(ok, "clicked", function(...) print("ok"))
@ 

<<echo=FALSE>>=
## not shown
w$showAll()
@ 
<<gtkHButtonBoxExample, echo=FALSE>>=
## not shown
## Had we only wanted to use a button box
w <- gtkWindow()
bb <- gtkHButtonBox()
w$add(bb)

bb$add(gtkButton(stock.id="gtk-delete"))
bb$add(gtkButton(stock.id="gtk-cancel"))
bb$add(gtkButton(stock.id="gtk-ok"))
@ 





