To illustrate popup menus, we construct one and display it in response
to a mouse click. We start with a \code{gtkMenu} instance, to which we
add some items:
<<"menubar-ex">>=
popup <- gtkMenu()                       # top level
popup$append(gtkMenuItem("cut"))
popup$append(gtkMenuItem("copy"))
popup$append(gtkSeparatorMenuItem())
popup$append(gtkMenuItem("paste"))
@ 

Let us assume that we have a button that will popup a menu when
clicked with the third (right) mouse button:
<<rgtk2-menus-popup-button>>=
button <- gtkButton("Click me with right mouse button")
window <- gtkWindow(); window$setTitle("Popup menu example")
window$add(button)
@

This menu will be shown by calling \code{gtkMenuPopup} in response to
the \code{button-press-event} signal on the button:
<<>>=
gSignalConnect(button, "button-press-event",
       f = function(button, event, menu) {
         if(event$getButton() == 3 ||
            (event$getButton() == 1 && # a mac
             event$getState() == GdkModifierType['control-mask'])) 
           gtkMenuPopup(menu, 
                        button = event$getButton(),
                        activate.time = event$getTime())
         return(FALSE)
       }, data = popup)
@ 
%
The \function{gtkMenuPopup} function is called with the menu, some
optional arguments for placement, and some values describing the
event: the mouse button and time. The event values can be retrieved
from the second argument of the callback (a \code{GdkEvent}).

The above will popup a menu, but until we bind a callback to the
\code{activate} signal on each item, nothing will happen when a menu
item is selected. Below we supply a stub for sake of illustration:
<<results=hide>>=
sapply(popup$getChildren(), function(child) {
  if(!inherits(child, "GtkSeparatorMenuItem")) # skip these
    gSignalConnect(child, "activate",
           f = function(child, data) message("replace me"))
})
@ 
%
We iterate over the children, avoiding the separator.
