% Menus in RGtk2
<<echo=FALSE>>=
require(RGtk2)
@ 

\section{Actions}
\label{sec:RGtk2:actions}

Actions are a means to create reusable representations for some action
to be initiated. The \constructor{gtkAction} constructor creates
actions, taking arguments \argument{name}{gtkAction},
\argument{label}{gtkAction} (what gets shown),
\argument{tooltip}{gtkAction}, and \argument{stock.id}{gtkAction}.
The act associated with an action is specified by adding a callback to
the \signal{activate} signal.

Actions are connected to widgets, through the method
\method{connectProxy}{gtkAction}. For buttons, the stock id
information must be added to the button through the button's
\code{setImage} method. The action's \method{createIcon}{gtkAction}
method, with argument coming from a value of \code{GtkIconSize}, will
return the needed image.

Actions can have their \code{sensitivity} property adjusted through
their \method{SetSensitive}{gtkAction} method. This will propogate to
all the widgets the action has a proxy connection with.


\begin{example}{An action object}{ex:RGtk2-action-object}
A basic action can be defined as follows:
<<DefineAction>>=
a <- gtkAction(name="ok", label="_Ok", tooltip="An OK button", stock.id="gtk-ok")
ID <- gSignalConnect(a, "activate", f = function(w, data) {
  print(a$GetName())                    # of some useful thing
})
@ 
To connect the action to a button, is straightforward.
<<ConnectAction>>=
b <- gtkButton()
a$connectProxy(b)
@ 

The image must be manually placed, which is facilitated by methods for
the button and the action object.
<<addImageFromStockId>>=
b$setImage(a$createIcon('button')) # GtkIconSize value
@ 

<<showGUI, echo=FALSE>>=
w <- gtkWindow(show=FALSE)
w['title'] <- "Action with button example"
w$add(b)
w$showAll()
@ 
\end{example}
\section{Menus}
\label{sec:RGtk2:menus}

A menu allows access to the GUI's actions in an organized way. This
organization relies on a choice of top-level menu items, their
possible submenus, and grouping within the same level of a
menu. Menubars are typically nested. Toolbars allow access more
quickly to common actions, but do not allow for nesting.

Menubars and popup menus  may be constructed by appending each menuitem
and submenu separately, as illustrated below. An alternative, using a
UI manager, is described in a subsequent section,

To specify a menubar step-by-step consists of defining a top-level
menu bar (\command{gtkMenuBar}). To a menu bar we append menu
items. Menu items may have sub menus (\constructor{gtkMenu}) appended, which gives
the heirarchical nature of a menu. Popup menus are similar, although begin with a \constructor{gtkMenu} instance.  

%% attach
\paragraph{Building the the menu}
Submenus and added to a menu item through the
\method{SetSubMenu}{gtkMenuItem} method. Menu items are added to a
menu through the methods
\method{Append}{gtkMenuShell}; \method{Prepend}{gtkMenuShell}; and
\method{Insert}{gtkMenuShell}, the latter requiring an index where the
insertion is to take place, with 0 being the same as \code{Prepend},
in addition to the child. After a child is added, the method
\method{ReorderChild}{gtkMenuShell} can be used to move it to a new
position ($0$-based). Menuitems are not typically removed, rather they
are disabled through their \code{SetSensitive} method, but if desired
their \method{Show}{gtkWidget} and \method{Hide}{gtkWidget} methods
can be used to stop them from being drawn.

%% Menu itmes
%% From API docs for gtkAccelGroup
% Note that accelerators are different from mnemonics. Accelerators are shortcuts for activating a menu item; they appear alongside the menu item they're a shortcut for. For example "Ctrl+Q" might appear alongside the "Quit" menu item. Mnemonics are shortcuts for GUI elements such as text entries or buttons; they appear as underlined characters. See gtk_label_new_with_mnemonic(). Menu items can have both accelerators and mnemonics, of course. 

\paragraph{Menu items}
Menu items represent actions to be taken and are created by several
different constructors.  A basic menu item is created by
\constructor{gtkMenuItem}. The argument \argument{label}{gtkMenuItem}
allows one to specify the label at construction time. The related
constructor, \constructor{gtkMenuItemNewWithMnemonic} also allows the
specification of a label, only underscores within the string specify
the mnemonic for the menu item.  To group menu items, one use
separators (\constructor{gtkSeparatorMenuItem}).

A menu item for a \code{gtkAction} object can be created by its
\method{createMenuItem}{gtkAction} method. For window managers that
display them, any icon specified the action's \code{stock.id} argument
will be displayed.


To add a different image in the menu bar, the
\constructor{gtkImageMenuItem} can be used. Although, the
\argument{stock.id}{gtkImageMenuItem} argument can be used to specify
the icon, we don't use this, as then the argument
\argument{accel.group}{gtkImageMenuItem} must be specified. An
accelerator group defines a set of keyboard shortcuts to initiate
actions, such as a \kbd{Ctrl+Q} to quit. (A mnemonic is a keyboard
shortcut to indicate a GUI element). We don't discuss creating those
here (they are given in the UI manager example). If instead of the
\code{stock.id} argument, just the \code{label} is specified for the
image menu item, the image can be added later through the
\method{SetImage}{gtkImageMenuItem} method. This takes an image object
for an argument. 

A check button menu item can be created by
\constructor{gtkCheckMenuItem}. This menu item shows a check box when
the \code{active} state for the menu is set. The default is not
active. Use the \method{GetActive}{gtkCheckMenuItem} to test if the
state is active or not.  It may be best to set this state to active,
so the user can identify that the item is a toggle (use the method
\code{SetActive(TRUE)}. When the user clicks on the menu item, the
\signal{toggled} signal is emitted.

\begin{example}{A basic menu bar}{eg:Rgtk2-Basic}
  \SweaveInput{ex-RGtk2-basic-menu}
\end{example}

\begin{example}{Popup menus}{ex:RGtk2-popup-menus}
\SweaveInput{ex-RGtk2-menu-popup}
\end{example}


The above can easily be automated. The menubar widget in
\pkg{gWidgetsRGtk2} simply maps a list with named components to the
above, by setting menu items for each top-level component, submenus for
each component that contains children, and menu items for components
that do not have children. However, the next approach is preferred for
larger menubars, as it separates out the presentation from the actions.

\section{Toolbars}
\label{sec:RGtk2:toolbars}

Toolbars are like menubars only they only contain actions, there are
no submenus. Toolbar objects are constructed by
\constructor{gtkToolbar}. The placement of the widget at the top of a
top-level window is done by the programmer. Toolbar items are added to
the toolbar using the \method{Add}{gtkContainer} method. Once added,
items can be referred to by index using the \code{[[} method.

Toolbar items have some common properties. The buttons are comprised
of an icon and text, and the style of their layout is specified by the
toolbar method \method{SetStyle}{gtkToolbar}, with values coming from
the \code{GtkToolbarStyle} enumeration. Toolbar items can have a
tooltip set for them through the methods
\method{SetTooltipText}{gtkToolItem} or
\method{SetTooltipMarkup}{gtkToolItem}, the latter if PANGO markup is
desired. Toolbar items can be disabled, through the method \method{SetSensitive}{gtkWidget}.

The items can be one of a few different types. A stock toolbar item is
constructed by \constructor{gtkToolbarButtonNewFromStock}, with the
stock id as the argument. The constructor
\constructor{gtkToolbarButton} creates a button that can have its
label and icon value set through methods
\method{SetLabel}{gtkToolbarButton} and
\method{SetIconWidget}{gtkToolbarButton}. Additionally, there are
methods for setting a tooltip or specifying a stock id after
construction. A toggle button, which toggles between looking depressed
or not when clicked is created by \constructor{gtkToggleToolButton} or \constructor{gtkToggleToolButtonNewFromStock}.
Additionally there are constructors to place menus
(\constructor{gtkMenuToolButton}) and radio groups (\constructor{gtkRadioToolButton}).
  
% signale
The \code{clicked} signal is emitted when a toolbar button is
pressed. For the toggle button, the \code{toggle} signal is emitteed. Other



\begin{example}{Basic toolbar usage}{ex:RGtk2-basic-toolbar}
We illustrate with a toolbar, whose buttons are produced in various ways.
<<>>=
tb <- gtkToolbar()
@ 
A button with a stock icon is produced by a call to the appropriate constructor.
<<>>=
b1 <-  gtkToolButtonNewFromStock("gtk-open") 
tb$add(b1)
@ 
To use a custom icons, requires a few steps.
<<>>=
f <- system.file("images/dataframe.gif", package="gWidgets")
image <- gtkImageNewFromFile(f)
b2 <- gtkToolButton()
b2$setIconWidget(image)
b2$setLabel("Edit")
tb$add(b2)
@ 
Adding a toggle button also is just a matter of calling the
appropriate constructor. In this, example we illustrate how to
initiate the callback only when the button is depressed.
<<>>=
b3 <- gtkToggleToolButtonNewFromStock("gtk-fullscreen")
tb$add(b3)
QT <- gSignalConnect(b3, "toggled", f=function(button, data) {
  if(button$getActive())
    cat("toggle button is depressed\n")
  })
@ 
We give the other buttons a simple callback when clicked:
<<>>=
QT <- sapply(1:2, function(i) gSignalConnect(tb[[i]], "clicked", function(button, data) {
  cat("You clicked", button$getLabel(), "\n")
}))
@ 

<<MakeToolbarGUI>>=
w <- gtkWindow(show=FALSE)
w['title'] <- "Toolbar example"
g <- gtkVBox()
w$add(g)
g$packStart(tb, expand=FALSE)
g$packStart(gtkLabel("filler"), expand=TRUE, fill=TRUE)
w$showAll()
@ 
\end{example}

\section{Statusbars}
\label{sec:RGtk2:statusbars}

In \GTK, a statusbar is constructed through by the
\constructor{gtkStatusbar} function. Statusbars must be placed at the
bottom of a top-level window by the programmer. In \GTK, a statusbar
keeps various stacks of messages for display. One adds a message to
display for given stack through the \method{Push}{gtkStatusbar} method
by specifying first an integer value for \code{context.id} and a
message. To pop the top message on a stack and display the next, the
method \method{Pop}{gtkStatusbar} method is available.


\section{UI Managers}
\label{sec:RGtk2:UIManager}


A GUI is designed around actions that are accessible through the
menubar and the toolbar. The notion of a \dfn{user interface manager}
(\acronym{UI} manager) separates out the definitions of the actions
from the user interface. The steps required to use \GTK's UI manager
are 
\begin{enumerate}
\item define a UI manager,
\item  set up an accelarator group for
keyboard shortcuts,
\item define our actions,
\item create action groups to
specify the name, label (with possible mnuemonic), keyboard
accelerator, tooltip, icon and callback for the graphical elements
that call the action,
\item specify where the menu items and toolbar
items will be placed,
\item connect the action group to the UI manager,
and finally
\item display the widgets.
\end{enumerate}

We show by an example how this is done. 

\begin{example}{UI Manager example}{ex:RGtk2:UImanager}
  \SweaveInput{ex-RGtk2-UImanager}
\end{example}
