% Menus in RGtk2

<<echo=FALSE>>=
require(RGtk2)
@ 

In the traditional WIMP-style GUI, the user executes commands by
selecting items from a menu. In GUI terminology, such a command is
known as an \textit{action}. A GUI may provide more than one control
for executing a particular action. Menu bars and tool bars are the two
most common widgets for organizing application-wide actions. An
application also needs to report its status in an unobtrusive
way. Thus, a typical application window contains, from top to bottom, 
a menu bar, a tool bar, a large application-specific region, and a
status bar.  In this chapter, we will introduce actions, menus,
tool bars and status bars and conclude by explaining the mechanisms in
\GTK\/ for conveniently defining and managing actions and associated
widgets in a large application.


\section{Actions}
\label{sec:RGtk2:actions}


\GTK\/ represents actions with the \class{GtkAction} class. A
\class{GtkAction} can be proxied by widgets like buttons in a
\class{GtkMenubar} or \class{GtkToolbar}.  The \constructor{gtkAction}
function is the constructor:
<<rgtk2-menus-actions-constructor>>=
action <- gtkAction(name = "ok", label = "_Ok", 
                    tooltip = "An OK button", stock.id = "gtk-ok")
@ 
%
The constructor takes arguments \argument{name}{gtkAction} (to
programmatically refer to the action), \argument{label}{gtkAction}
(the displayed text), \argument{tooltip}{gtkAction}, and
\argument{stock.id}{gtkAction} (identifying a stock icon).  The
command associated with an action is implemented by a callback
connected to the \signal{activate} signal:
<<rgtk2-menus-actions-activate, results=hide>>=
gSignalConnect(action, "activate", 
               f = function(action, data) {
                 print(action$getName())
               })
@ 


\begin{figure}
  \centering
  \includegraphics[width=.7\textwidth]{ex-RGtk2-action-items-infobar}
  \caption{An application window mock up showing a menubar, toolbar,
  and info bar}
  \label{fig:RGtk2-action-items-infobar}
\end{figure}

An action plays the role of a data model describing a command, while
widgets that implement the \class{GtkActivatable} interface are the
views and controllers. All buttons, menu items and tool items
implement \class{GtkActivatable} and thus may serve as action
proxies. Actions are connected to widgets through the method
\method{setRelatedAction}{GtkActivatable}:
<<ConnectAction>>=
button <- gtkButton()
button$setRelatedAction(action)
@
%
Certain aspects of a proxy widget are coordinated through the
action. This includes sensitivity and visibility, corresponding to the
\code{sensitive} and \code{visible} properties. By default, aesthetic
properties like the \code{label} and \code{stock-id} are also
inherited.

Often, the commands in an application have a natural grouping. It can
be convenient to coordinate the sensitivity and visibility of entire
groups of actions. \class{GtkActionGroup} represents a group of
actions. By convention, keyboard accelerators are organized by group,
and the accelerator for an action is usually specified upon insertion:
<<rgtk2-menus-action-group>>=
group <- gtkActionGroup()
group$addActionWithAccel(action, "<control>O")
@ 

In addition to the properties already introduced, an action may have a
shorter label for display in a toolbar (\code{short\_label}), and
hints for when to display its label (\code{is\_important}) and image
(\code{always\_show\_image}).

There is a special type of action that has a toggled state:
\class{GtkToggleAction}. The \code{active} property represents the
toggle. A further extension is \class{GtkRadioAction}, where the
toggled state is shared across a list of radio actions, via the
\code{group} property. Proxy widgets represent toggle and radio
actions with controls resembling check boxes and radio buttons,
respectively. Here, we create a toggle action for fullscreen mode:
<<rgtk2-menus-toggle-action>>=
full_screen_action <- gtkToggleAction("fullscreen", "Full screen", 
                                      "Toggle full screen",
                                      stock.id = "gtk-fullscreen")
gSignalConnect(full_screen_action, "toggled", function(action) {
  if(full_screen_action['active'])
    window$fullscreen()
  else
    window$unfullscreen()
})
@
%
We connect to the \code{toggled} signal to respond to a change in the
action state.

<<showGUI, echo=FALSE>>=
window <- gtkWindow(show=FALSE)
window['title'] <- "Action with button example"
window$add(button)
window$showAll()
@ 

\section{Menus}
\label{sec:RGtk2:menus}

A menu is a compact, hierarchically organized collection of buttons,
each of which may proxy an action. Menus listing window-level actions
are usually contained within a menubar at the top of the window or
screen. Menus with options specific to a particular GUI element may
``popup'' when the user interacts with the element, such as by
clicking the right mouse button. Menubars and popup menus may be
constructed by appending each menu item and submenu separately, as
illustrated below. For menus with more than a few items, we recommend
the strategies described in Section~\ref{sec:RGtk2:UIManager}.

\subsection{Menubars}

We will first demonstrate the menubar, leaving the popup menu for
later. Figure~\ref{fig:RGtk2-action-items-infobar} will show a
realization. The first step is to construct the menubar itself:
<<rgtk2-menus-menubar>>=
menubar <- gtkMenuBar()
@


A menubar is a special type of container called a menu shell. An
instance of \class{GtkMenuShell} contains one or more menu
items. \class{GtkMenuItem} is an implementation of
\class{GtkActivatable}, so each menu item can proxy an
action. Usually, a menubar consists of multiple instances of the other
type of menu shell: the menu, \class{GtkMenu}. Here, we create a menu
object for our ``File'' menu:
<<rgtk2-menus-menu>>=
file_menu <- gtkMenu()
@
%
As a menu is not itself a menu item, we first must embed the menu
into a menu item, which is labeled with the menu title:
<<rgtk2-menus-menuitem>>=
file_item <- gtkMenuItemNewWithMnemonic(label = "_File")
file_item$setSubmenu(file_menu)
@
%
The underscore in the label indicates the key associated with the
mnemonic for use when navigating the menu with a keyboard.  Finally,
we append the item containing the file menu to the menubar:
<<rgtk2-menus-append>>=
menubar$append(file_item)
@ 
%
In addition to \method{append}{GtkMenuShell}, it is also possible to
\method{prepend}{GtkMenuShell} and \method{insert}{GtkMenuShell} menu
items into a menu shell. As with any container, one can
\method{remove}{GtkContainer} a child menu item, although the
convention is to desensitize an item, through the \code{sensitive}
property, when it is not currently relevant.

Next, we populate our file menu with menu items that perform some
command. For example, we may desire an open item:
<<rgtk2-menus-open>>=
open_item <- gtkMenuItemNewWithMnemonic("_Open")
@
%
This item does not have an associated \class{GtkAction}, so we need to
implement its activate signal directly:
<<rgtk2-menus-open-activate, results=hide>>=
gSignalConnect(open_item, "activate", function(item) {
  file.show(file.choose())
})
@ 
%
The item is now ready to be added to the file menu:
<<rgtk2-menus-append-item>>=
file_menu$append(open_item)
@ 

It is recommended, however, to create menu items that proxy an
action. This will facilitate, for example, adding an equivalent
toolbar item later. We demonstrate with a ``Save'' action:
<<rgtk2-menus-save-action>>=
save_action <- 
  gtkAction("save", "Save", "Save object", "gtk-save")
@ 
%
Then the appropriate menu item is generated from the action and added
to the file menu:
<<rgtk2-menus-save-item>>=
save_item <- saveAction$createMenuItem()
file_menu$append(save_item)
@ 

A simple way to organize menu items, besides grouping into menus, is
to insert separators between logical groups of items. Here, we insert
a separator item, rendered as a line, to group the open and save
commands apart from the rest of the menu:
<<rgtk2-menus-separator>>=
file_menu$append(gtkSeparatorMenuItem())
@ 

Toggle menu items, i.e., a label next to a check box, are also
supported. A toggle action will create one implicitly:
<<rgtk2-menus-toggle-item>>=
auto_save_action <- gtkToggleAction("autosave", "Autosave", 
                                    "Enable autosave")
auto_save_item <- auto_save_action$createMenuItem()
file_menu$append(auto_save)
@ 

Finally, we add our menubar to the top of a window:
<<rgtk2-menus-window>>=
main_mindow <- gtkWindow()
vbox <- gtkVBox()
main_mindow$add(vbox)
vbox$packStart(menubar, FALSE, FALSE)
@ 

\subsection{Popup menus}

\begin{example}{Popup menus}{ex:RGtk2-popup-menus}
\SweaveInput{ex-RGtk2-menu-popup}
\end{example}

\section{Toolbars}
\label{sec:RGtk2:toolbars}

Toolbars are like menubars in that they are containers for
activatable items, but toolbars are not hierarchical. Also, their
items are usually visible for the life-time of the application, not
upon user interaction. Thus, toolbars are not appropriate for storing a
large number of items, only those that are activated most often.

We begin by constructing an instance of \class{GtkToolbar}:
<<rgtk2-menus-toolbar-construct>>=
toolbar <- gtkToolbar()
@ 

In analogous fashion to the menubar, toolbars are containers for tool
items. Technically, an instance of \class{GtkToolItem} could contain
any type of widget, yet toolbars typically represent actions
with buttons. The \class{GtkToolButton} widget implements this common
case.  Here, we create a tool button for opening a file:
<<rgtk2-menus-toolbar-open-item>>=
open_button <- gtkToolButton(stock.id = "gtk-open") 
@ 
%
Tool buttons have a number of properties, including \code{label} and
several for icons. Above, we specify a stock identifier,
for which there is a predefined translated label and theme-specific icon.
As with any other container, the button may be added to the toolbar with
the \method{add}{GtkContainer} method:
<<rgtk2-menus-toolbar-add>>=
toolbar$add(open_button)
@ 
%
This appends the open button to the end of the toolbar. To insert into
a specific position, we would call the \method{insert}{GtkToolbar} method.

Usually, any application with a toolbar also has a menubar, in which
case many actions are shared between the two containers. Thus, it is
often beneficial to construct a tool button directly from its
corresponding action:
<<rgtk2-menus-toolbar-save-item>>=
save_button <- save_action$createToolItem()
toolbar$add(save_button)
@ 
%
A tool button is created for \code{saveAction}, created in the
previous section.

Like menus, related buttons may be grouped using separators:
<<rgtk2-menus-toolbar-separator>>=
toolbar$add(gtkSeparatorToolItem())
@

Any toggle action will create a toggle tool button as its proxy:
<<rgtk2-menus-toolbar-toggle>>=
full_screen_button <- full_screen_action$createToolItem()
toolbar$add(full_screen_button)
@ 
%
A \class{GtkToggleToolButton} embeds a \class{GtkToggleButton}, which
is depressed whenever its \code{active} property is \code{TRUE}.

As mentioned above, toolbars, unlike menus, are usually visible for the
duration of the application. This is desirable, as the actions in a
toolbar are among those most commonly performed. However, care must be
taken to conserve screen space. The toolbar \textit{style} controls
whether the tool items display their icons, their text, or both. The
possible settings are in the \gtkenum{GtkToolbarStyle} enumeration. The
default value is specified by the global \GTK\/ style (theme). Here,
we override the default to only display images:
<<rgtk2-menus-toolbar-style, eval=FALSE>>=
toolbar$setStyle("icon")
@ 
%
For canonical actions like \textit{open} and \textit{save}, icons are
usually sufficient. Some actions, however, may require textual
explanation. The \code{is-important} property on the action will
request display of the label in a particular tool item, in addition to
the icon:
<<rgtk2-menus-toolbar-is-important>>=
full_screen_action["is-important"] <- TRUE
@ 

Normally, tool items are tightly packed against the left side of the
toolbar. Sometimes, a more complex layout is desired. For example, we
may wish to place a \textit{help} item against the right side. We can
achieve this with an invisible item that expands against its siblings:
%% ML: use latest svn for this
<<rgtk2-menus-toolbar-expand, eval=FALSE>>=
expander <- gtkSeparatorToolItem()
expander["draw"] <- FALSE
toolbar$add(expander)
toolbar$childSet(expander, expand = TRUE)
@ 

% 
The dummy item is a separator with its \code{draw} property set to
\code{FALSE}, and its \code{expand} child property set to
\code{TRUE}. Now we can add the \textit{help} item:
<<rgtk2-menus-toolbar-help>>=
help_action <- gtkAction("help", "Help", "Get help", "gtk-help")
toolbar$add(help_action$createToolItem())
@ 

It is now our responsibility to place the toolbar at the top of the
window, under the menu created in the previous section:
<<rgtk2-menus-toolbar-place>>=
vbox$packStart(toolbar, FALSE, FALSE)
@ 

\begin{example}{Color menu tool button}{ex:RGtk2-color-tool-button}
  \SweaveInput{ex-RGtk2-color-tool-button}
\end{example}
  
%% GtkToolPalette as a compromise between menus and toolbars

Some applications may offer a large number of actions, where there is
no clear subset of actions that are more commonly performed than the
rest. It would be impractical to place a tool item for each action in
a static toolbar. \GTK\/ provides a \textit{tool palette} widget as
one solution, which leaves the configuration of a multi-row toolbar to
the user. The tool items are organized into collapsible groups, and
the grouping is customizable through drag and drop.

\class{GtkToolPalette} is a container of \class{GtkToolItemGroup}
widgets, each of which is a container of tool items and implements
\class{GtkToolShell}, like \class{GtkToolbar}. We begin our brief
example by creating a two groups of tool items:
%% JV: commented out next 3 for eval as my GTK is a bit to old to run. --Need
%% to update
%% ML: went ahead and uncommented them, assuming you've updated
%% JV: SOrry, stuck with 2.18 for now.
<<rgtk2-menus-tool-item-group, eval=FALSE>>=
file_group <- gtkToolItemGroup("File")
file_group$add(gtkToolButton(stock.id = "gtk-open"))
file_group$add(save_action$createToolItem())
help_group <- gtkToolItemGroup("Help")
help_group$add(help_action$createToolItem())
@ 
%

The groups are then added to an instance of \class{GtkToolPalette}:
<<rgtk2-menus-tool-palette, eval=FALSE>>=
palette <- gtkToolPalette()
palette$add(file_group)
palette$add(help_group)
@ 
%
Finally, we can programmatically collapse a group:
<<rgtk2-menus-tool-palette-collapse, eval=FALSE>>=
help_group$setCollapsed(TRUE)
@ 

\section{Status reporting}
\label{sec:RGtk2:statusbars}

\subsection{Statusbars}

In \GTK, a status bar is constructed through the
\constructor{gtkStatusbar} function. Statusbars must be placed at the
bottom of a top-level window. A status bar keeps various stacks of
messages for display. Stacks and messages are associated with a
context ID, which represents a message source. It is required to
register each context ID against a string description. The visibility
depends on the ordering of the global stack, while the context ID
allows the status bar to maintain a separate message stack for each
part of an application, without worry of interference between
components.

To display a message, one pushes it onto the top of the global stack,
as well as a context stack, through the \method{push}{GtkStatusbar}
method, which expects an integer value for \code{context.id} and a
message.  To pop a message from a context stack, pass the context ID to
the \method{pop}{GtkStatusbar} method. If the message was on top of
the global stack, the next message down becomes visible.

Below, we create a status bar, register a context for I/O-related
messages, display the message and then pop it to restore the original
state:
<<gtk-app-status-bar, results=hide>>=
statusbar <- gtkStatusbar()
io_id <- statusbar$getContextId("I/O")
statusbar$push(io_id, "Incomplete final line")
## ...
statusbar$pop(io_id)
@ 

\subsection{Information bars}
\label{sec:gtkInfoBar}

An information bar is similar in purpose to a message dialog, only it
is intended to be less obtrusive. Typically, an information bar raises
from the bottom of the window, displaying a message, possibly with
response buttons. It then fades away after a number of seconds. The
focus is not affected, nor is the user interrupted. \GTK\/ provides
the \class{GtkInfoBar} class for this purpose. The use is similar to a
dialog: one places widgets into a content area, and listens to the
\signal{response} signal.

We create our info bar:
<<>>=
info_bar <- gtkInfoBar(show=FALSE)
info_bar$setNoShowAll(TRUE)
@ 
We call \method{setNoShowAll}{GtkWidget} to prevent the widget from being shown
when \method{showAll}{GtkWidget} is called on the parent. Normally, an
information bar is not shown until it has a message. 

We will emit a warning message by adding a simple label with the text
and specifying the message type as \code{warning}, from
\code{GtkMessageType}:
<<>>=
label <- gtkLabel("Warning, Warning ....")
info_bar$setMessageType("warning")            
info_bar$getContentArea()$add(label)
@ 

A button to allow the user to hide the bar can be added as follows:
<<results=hide>>=
info_bar$addButton(button.text = "gtk-ok",
                   response.id = GtkResponseType['ok'])
@ 
%
This is similar to the dialog API: the appearance of the ``Ok'' button is
defined by the stock ID \code{gtk-ok}, and the response ID will be
passed to the \signal{response} signal when the button is clicked. Our
handle simply closes the bar:
<<results=hide>>=
gSignalConnect(info_bar, "response", 
               function(info_bar, resp.id) info_bar$hide())
@ 

Finally, we add the info bar to our main window and show it:
<<addToWinodw>>=
vbox$packStart(info_bar, expand = FALSE)
info_bar$show()
@ 

\section{Managing a complex user interface}
\label{sec:RGtk2:UIManager}

Complex applications implement a large number of actions and operate
in a number of different modes. Within a given mode, only a subset of
actions are applicable. For example, a word processor may have an
editing mode and a print preview mode. \GTK\/ provides a \dfn{user
  interface manager}, \class{GtkUIManager}, to manage the layout of
the toolbars and menubars across multiple user interface modes. We
illustrate through an example.

The steps required to use \GTK's UI manager are:
\begin{enumerate}
\item construct the UI manager,
\item specify in XML the layout of the menubars and toolbars,
\item define the actions in groups,
\item connect the action group to the UI manager, 
\item set up an accelerator group for keyboard shortcuts, 
and finally
\item display the widgets.
\end{enumerate}

\begin{example}{UI manager example}{ex:RGtk2:UImanager}
  \SweaveInput{ex-RGtk2-UImanager-II}
\end{example}
