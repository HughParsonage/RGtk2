This example shows how to select one or more rows from a data frame
that contains some information. We write it so any data frame could be
used, although in the specific case we show a list of the installed
packages that can be upgraded from CRAN. The use of checkboxes for
selection, employs the toggle cell renderer.

<<echo=FALSE>>=
## example showing how to add a toggle button on left of data display
library(RGtk2)
@ 

To get the installed packages that can be upgraded, we use some of the
functions provided by the  \pkg{utils} package.
<<FixACRANforSweave, echo=FALSE>>=
repos <- getOption("repos")
repos["CRAN"] <- "http://streaming.stat.iastate.edu/CRAN"
options(repos = repos)
@ 
<<getUpgradablePackages>>=
avail <- available.packages()
installed <- installed.packages()
tmp <- merge(avail, installed, by="Package")
need.upgrade <- with(tmp, as.character(Version.x) 
                     != as.character(Version.y))
d <- tmp[need.upgrade, c(1, 2, 16, 6)]
names(d) <- c("Package", "Available", "Installed", "Depends")
@ 


This function will be called on the selected rows. The \code{print}
call would be replaced with something more reasonable, such as a call
to \function{install.packages}.
<<>>=
doThis <- function(d) print(d)
@ 

The rest of this code is independent of the details of \code{d}. We first
append a column to the data frame to store the selection information.
<<>>=
n <- ncol(d)
nms <- names(d)
d$.toggle <- rep(FALSE, nrow(d))
store <- rGtkDataFrame(d)
@ 

Our tree view shows each column using a simple text cell renderer,
except for an initial one where the user can select the packages they
want to call \code{doThis} on.
<<>>=
view <- gtkTreeView()
# add toggle
togglevc <- gtkTreeViewColumn()
QT <- view$insertColumn(togglevc, 0)
cr <- gtkCellRendererToggle()
togglevc$packStart(cr)
cr['activatable'] <- TRUE
togglevc$addAttribute(cr, "active", n)
QT <- gSignalConnect(cr, "toggled", function(cr, path, user.data) {
  view <- user.data
  row <- as.numeric(path) + 1
  model <- view$getModel()
  n <- dim(model)[2]
  model[row, n] <- !model[row, n]
},
               data=view)
@ 

The text columns are added one-by-one in a similar manner:
<<>>=
QT <- sapply(1:n, function(i) {
  vc <- gtkTreeViewColumn()
  vc$setTitle(nms[i])
  view$insertColumn(vc, i)

  cr <- gtkCellRendererText()
  vc$packStart(cr)
  vc$addAttribute(cr, "text", i-1)
})
@ 

Finally, we connect the store to the model.
<<>>=
view$setModel(store)
@ 

To initiate the action, we create a button and assign a callback. We
pass in the view, rather than the model, in case the model would be
modified by the \code{doThis} call. In a real application, once a
package is upgraded it would be removed from the display.
<<>>=
b <- gtkButton("click me")
QT <- gSignalConnect(b, "clicked", function(w, data) {
  view <- data
  model <- view$getModel()
  n <- dim(model)[2]
  vals <- model[model[, n], -n, drop=FALSE]
  doThis(vals)
}, data=view)
@ 


Our basic GUI places the view into a box container that also holds a
button to initiate the action.
<<>>=
w <- gtkWindow(show=FALSE)
w$setTitle("Installed packages that need upgrading")
w$setSizeRequest(300, 300)

g <- gtkVBox(); w$add(g)
sw <- gtkScrolledWindow()
g$packStart(sw, expand=TRUE, fill=TRUE)

sw$add(view)
sw$setPolicy("automatic", "automatic")
g$packStart(b, expand=FALSE)
w$show()
@ 
