This example demonstrates the construction of a GUI for selecting one
or more rows from a data frame. We will display a list of the installed
packages that can be upgraded from CRAN, although this code is
trivially generalizable to any list of choices. The user selects a row
by clicking on a 
check box produced by a toggle cell renderer.




<<echo=FALSE>>=
## example showing how to add a toggle button on left of data display
library(RGtk2)
@ 


To get the installed packages that can be upgraded, we use some of the
functions provided by the  \pkg{utils} package.
<<FixACRANforSweave, echo=FALSE>>=
repos <- getOption("repos")
repos["CRAN"] <- "http://streaming.stat.iastate.edu/CRAN"
options(repos = repos)
@ 
<<getUpgradablePackages>>=
old_packages <- 
  old.packages()[,c("Package", "Installed", "ReposVer")]
DF <- as.data.frame(old_packages)
@ 


This function will be called on the selected rows. Here, we simply
call \function{install.packages} to update the selected packages.
<<>>=
doUpdate <- function(old_packages) 
  install.packages(old_packages$Package)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-RGtk2-add-toggle-to-df.png}
  \caption{A GUI to select packages using checkboxes rendered with a \class{GtkCellRenererToggle} instance.}
  \label{fig:RGtk2-add-toggle-to-df}
\end{figure}
To display the data frame, we first append a column to the data frame
to store the selection information and then create a corresponding
\class{RGtkDataFrame}.
<<>>=
model <- rGtkDataFrame(cbind(DF, .toggle=rep(FALSE, nrow(DF))))
@ 

Our tree view shows each text column using a simple text cell renderer,
except for the first column that contains the check boxes for selection.
<<results=hide>>=
view <- gtkTreeView()
# add toggle
cell_renderer <- gtkCellRendererToggle()
view$insertColumnWithAttributes(0, "", cell_renderer, active = ncol(DF))
cell_renderer['activatable'] <- TRUE
gSignalConnect(cell_renderer, "toggled", 
               function(cell_renderer, path, user.data) {
                 view <- user.data
                 row <- as.numeric(path) + 1
                 model <- view$getModel()
                 n <- dim(model)[2]
                 model[row, n] <- !model[row, n]
               }, data=view)
@ 

The text columns are added in one go:
<<results=hide>>=
mapply(view$insertColumnWithAttributes, -1, colnames(DF), 
       list(gtkCellRendererText()), text = seq_along(DF) -1L)
@ 
%
Finally, we connect the store to the model.
<<>>=
view$setModel(model)
@ 
%
To allow the user to initiate the action, we create a button and
assign a callback. We pass in the view, rather than the model, in case
the model would be recreated by the \code{doUpdate} call. In a real
application, once a package is upgraded it would be removed from the
display.
<<results=hide>>=
button <- gtkButton("Update packages")
gSignalConnect(button, "clicked", function(button, data) {
  view <- data
  model <- view$getModel()
  old_packages <- 
    model[model[, ncol(model)], -ncol(model), drop = FALSE]
  doUpdate(old_packages)
}, data=view)
@ 


Our basic GUI places the view into a box container that also holds the
button to initiate the action.
<<>>=
window <- gtkWindow(show = FALSE)
window$setTitle("Installed packages that need upgrading")
window$setSizeRequest(300, 300)

vbox <- gtkVBox(); window$add(vbox)
scrolled_window <- gtkScrolledWindow()
vbox$packStart(scrolled_window, expand = TRUE, fill = TRUE)

scrolled_window$add(view)
scrolled_window$setPolicy("automatic", "automatic")
vbox$packStart(button, expand = FALSE)
window$show()
@ 
