This example shows how to get an iter at the insert point for new
text. It will also illustrate a few of the ways that iters can
reference pieces of the buffer. Possible ways include by character,
word, sentence, or line.
  
A useful feature of many editors is to have matching braces
highlighted temporarily. This example shows how to add a callback to
the \signal{changed} signal that implements this.

This first method for an iter uses the method
\method{BackwardChar}{GtkTextIter} to step back a character in the
buffer. As iters are transient, the \GTK\/ functions that manipulate
them update their values in place. This is why a copy is made of the
iter passed into the function using the method
\method{Copy}{GtkTextIter}.

<<>>=
window <- gtkWindowNew()
view <- gtkTextView()
window$add(view)
buffer <- view$getBuffer()
@ 

<<>>=
gtkTextIterGetTextAtIter <- function(iter) {
  siter <- iter$copy();  eiter <- iter$copy()
  val <- siter$backwardChar()
  if(val) 
    siter$getText(eiter)                # GetText method of an iter
  else 
    return(NA)
}
@ 


We now define a function to find the matching token when the token is
a closing parentheses or brace. The algorithm is simple, as long as
there is a character to the left, this character is read and compared
to the token. It matches the left or right side of the token then a
counter is updated. When there are the same number of left and right
tokens, there is a match.

<<>>=
## match up tokens
tokenMatch <- list("("=")",")"="(",
                   "["="]","]"="[",
                   "{"="}","}"="{")

findLeftMatch <- function(iter) {
                    
  titer <- iter$copy()
  token = titer$getTextAtIter()

  if(!token %in% c(")","}","]"))
    return(list(retval=FALSE, iter= NA))

  lt <- rt <- 0                      # count left, right tokens
  while(!is.na(char <- titer$getTextAtIter())) {
    if(char == token)
      rt <- rt + 1
    else if(char == tokenMatch[[token]])
      lt <- lt + 1
    if(lt == rt) {
      titer$backwardChar()              # step back 1
      return(list(retval=TRUE, iter=titer))
    } else if(lt > rt) {
      return(list(retval=FALSE, iter=NA))
    }

    titer$backwardChar()
  }
  return(list(retval=FALSE, iter=NA))   # no match
}  
@ 

Now to create a text tag to implement the highlighting. This one sets
the background color to yellow.
<<>>=
tag.highlight <-
  buffer$createTag(tag.name="highlight", background="yellow")
@ 

Finally, we connect a callback to the \signal{changed} signal that
either highlights a matching pair of tokens, or removes all
highlighted pairs. As the callback only includes the text buffer, we
use the concept of a mark and the method
\method{GetInsert}{GtkTextBuffer} to find the iter corresponding to
the inserted value. 

<<>>=
ID <- 
  gSignalConnect(buffer,"changed",
                 f = function(buffer, data) {
                   ## get iter at cursor
                   iter <- buffer$getIterAtMark(buffer$getInsert())$iter
                   char <- iter$getTextAtIter()
                   val <- findLeftMatch(iter)
                   if(val$retval) {
                     buffer$applyTagByName("highlight",val$iter,iter)
                   } else {
                     bnds <- buffer$getBounds() # remove all
                     buffer$removeTagByName("highlight",bnds$start, bnds$end)
                   }
                 })
@ 

