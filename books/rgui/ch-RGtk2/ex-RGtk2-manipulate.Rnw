<<echo=FALSE>>=
## manipulate for RGtk2
#
# Original license for manipulate package
#
# Copyright (C) 2009-11 by RStudio, Inc.
#
# This program is licensed to you under the terms of version 3 of the
# GNU Affero General Public License. This program is distributed WITHOUT
# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
#
#

## THe main point of AGPL:
##   The GNU Affero General Public License is designed specifically to
## ensure that, in such cases, the modified source code becomes available
## to the community.  It requires the operator of a network server to
## provide the source code of the modified version running there to the
## users of that server.  Therefore, public use of a modified version, on
## a publicly accessible server, gives the public access to the source
## code of the modified version.
## This is satisfied by the ProgGUIinR package, which will contain this entire example.

require(RGtk2)
require(cairoDevice)
@ 

The RStudio\texttrademark{} Workbench is an IDE for R that provides a
similar interface whether run on any of its supported operating
systems or through a web browser. Accompanying the workbench is an
\R{} package \pkg{manipulate} that provides a convenient means to
create simple graphical interfaces for plotting. As RStudio leverages
web technologies to render its widgets and there is no public
interface, the package is not available for non-RStudio users. Too
bad. This example shows how one can use \pkg{RGtk2} to provide a
similar interface. In the example, we borrow liberally from the
\pkg{manipulate} code, which is released under an AGPL
license. Although we don't show the entire code here, the
\pkg{ProgGUIinR} package contains it all.

\begin{figure}
  \centering
  \includegraphics[width=.8\textwidth]{fig-RGtk2-manipulate.png}
  \caption{An implementation of RStudio's \pkg{manipulate} package in \pkg{RGtk2}}
  \label{fig:RGtk2-manipulate}
\end{figure}


<<resolveVariableArguments, echo=FALSE>>=
## Not shown
resolveVariableArguments <- function(args) {
  # if the first argument is an unnamed list then just use this list
  if ( (length(args) == 1L) &&
       is.list(args[[1L]])  &&
       (is.null(names(args)) || (names(args)[[1L]] == "")) )  {
    return (args[[1L]])
  } else {
    return (args)
  }
}
@ 

The \pkg{manipulate} package uses environments to store state
etc. Here we use reference classes, as they allow for a more
structured programming interface. 

A typical use of \pkg{manipulate} is along the lines of
(Figure~\ref{fig:RGtk2-manipulate}) the following example from the
\pkg{manipulate} help pages:
<<manipulate_example, eval=FALSE>>=
manipulate(## expression
           plot(cars, xlim = c(x.min, x.max), type = type, 
                axes = axes, ann = label),
           ## controls
           x.min = slider(0,15),
           x.max = slider(15,30, initial = 25),
           type = picker("p", "l", "b", "c", "o", "h", "s"),
           axes = checkbox(TRUE, label="Draw Axes"),
           label = checkbox(FALSE, label="Draw Labels")
           )
@ 
%
The first argument is an expression, possibly containing parameters,
that produces a plot. The other arguments create widgets that
control the parameter values in the plotting expression. There are
three basic controls: a slider, a picker (combo box), and a check
box. As one can glean, the constructors have a terse but simple set
of arguments. A main task ahead will be mapping these controls to one
of \GTK's widgets.

For now, we begin by defining our \code{Manipulate} class to have two
properties, one to hold the expression and the other to hold a list of controls.
<<ManipulateClass>>=
Manipulate <- setRefClass("Manipulate",
                          fields=list(
                            .code="ANY",
                            .controls="list"
                            ))
@ 
%


<<manipulate_validate_controls, echo=FALSE>>=
Manipulate$methods(validate_controls=function() {
  "Validate that controls are specified properly"
  ## validate that all controls have unique names
  controlNames <- names(.controls)
  duplicatedIndex <- anyDuplicated(controlNames)
  if (duplicatedIndex > 0)
    stop(paste("duplicated control name:", controlNames[[duplicatedIndex]]))
  
  ## iterate over the names and controls, adding the default values to the env
  for (name in names(.controls)) {
    ## check the name
    if (name == "")
      stop("all controls passed to manipulate must be named")
    ## confirm that this is in fact a control
    if(!is(.controls[[name]], "ManipulateControls"))
      stop(paste("argument", name, "is not a control"))
    ## default label is control name
    if(length(.controls[[name]]$label) == 0) 
      .controls[[name]]$label <<- name
  }
})
@ 

When one of the controls is changed, the entire plot will be
redrawn. The following handler will be assigned to each control. Its
environment contains the main properties so the evaluation can be done
as expected. Note that each control is expected to provide a
\meth{get\_value} method.

<<Manipulate_change_handler>>=
Manipulate$methods(
           get_values=function() {
             "Get widget values as list"
             sapply(.controls, function(i) i$get_value(), 
                    simplify=FALSE)
           },
           change_handler=function(...) {
             "Evaluate code with current values"
             values <- get_values()
             result <- withVisible(eval(.code, envir=values))
             if (result$visible) {
               eval(print(result$value))
             }
           })
@ 
%

The \meth{execute} method is called during initialization to setup the
GUI. We use a \class{GtkHPaned} instance to allow the user to adjust
the space between the graphic device and the controls frame. Each
control is expected to have a \meth{make\_gui} interface.

<<Manipulate_execute>>=
Manipulate$methods(  
           execute=function() {
             "Make the GUI"
             w <- gtkWindow(show=FALSE)
             w$setTitle("ManipulateR")
             ## Set up graphic device
             paned <- gtkHPaned()
             w$add(paned)
             device <- gtkDrawingArea()
             device$setSizeRequest(480, 480)
             asCairoDevice(device)
             paned$add(device)
             ## Controls frame
             f <- gtkFrame("Controls")
             control_table <- gtkTableNew()
             control_table$setHomogeneous(FALSE)
             control_table['column-spacing'] <- 10
             ## insert horizontal strut
             control_table$attach(strut <- gtkHBox(), 1,2,0,1,
                           xoptions="", yoptions="shrink")
             strut$setSizeRequest(75, -1)
             f$add(control_table)
             paned$add(f)
             ## add each control
             sapply(.controls, function(i) {
               i$make_gui(cont=control_table, 
                          handler=.self$change_handler)
             })
             w$show()
             change_handler()                    # initial
           })
@ 
%

The \code{control\_table} is used hold the respective controls. We
added a \ilayout{struts}strut to request a minimum width for the
second column, as otherwise the slider controls can render too
narrowly.



The initialize method calls a function provided by the
\pkg{manipulate} package to to pick the controls out of the \code{...}
argument. The \code{validate\_controls} method is not shown, but
simply borrows code from the package to do some error checking,
ensuring the controls are defined properly.

<<Manipulate_Initialize>>=
Manipulate$methods(  
           initialize=function(code, ...) {
             controls <- resolveVariableArguments(list(...))
             initFields(.code=code,
                        .controls=controls)
             validate_controls()
             ## now execute
             execute()
             .self
           })
@ 
%

We now provide a constructor allowing access to our class.
<<manipulate_constructor>>=
manipulate <- function(`_expr`,...)
  Manipulate$new(substitute(`_expr`),...)
@ 
%

There are three main controls, but perhaps more could be added. We
give ourselves the flexibility to expand by creating a base class for
a control that can be subclassed. We define the class below. The
properties are \code{l}, to store a list of arguments (a legacy of the
original code); \code{widget}, to store the widget; \code{label} to
hold the label for the control; and \code{initial}.


<<ManipulateControls>>=
ManipulateControls <- setRefClass("ManipulateControls",
                        fields=list(
                          l="list",
                          widget = "ANY",
                          label="character",
                          initial="ANY"
                          ))
@ 

There main interface includes three methods: \meth{validate\_inputs}
(to ensure the control is defined properly) and the previously noted
\meth{get\_value} and \meth{make\_gui} (defined separately).
<<MC_Interface>>=
ManipulateControls$methods(
            validate_inputs = function(...) {
              "Validate input code"
            },
            get_value=function(...) {
              "Get value of widget"
            })
@ 

The \meth{make\_gui} method has two tasks: to define the widget
instance and to add the widget to the GUI. This is done in the base
class. The label and widget are added as a row to a \class{GtkTable} instance.
<<MC_make_gui>>=
ManipulateControls$methods(make_gui=function(cont) {
            "Create widget, then add to table"
            ## cont a GtkTable instance
            nrows <- cont['n-rows']
            label_widget <- gtkLabel(label)
            label_widget['xalign'] <- 1
            cont$attach(label_widget, 0, 1, nrows, nrows+1,
                        xoptions="shrink", yoptions="shrink"
                        )
            cont$attach(widget, 1, 2, nrows, nrows+1,
                        xoptions=c("expand", "fill"),
                        yoptions="")
          })
@ 

The \code{slider} constructor just creates an instance of a soon to be
defined sub-class of the \class{ManipulateControls} class. The
arguments follow RStudio's.

<<Slider_constructor>>=
slider <- function(min, max, initial=min, label=NULL, 
                   step=-1, ticks=TRUE) {
  Slider$new(min, max, initial=min, label=label, 
             step=step, ticks=ticks)
}
@ 

The \class{Slider} class has no new properties:
<<Slider>>=
Slider <- setRefClass("Slider",
                      contains="ManipulateControls")
@ 


<<Slider_validate, echo=FALSE>>=
Slider$methods(validate_inputs = function(min, max, initial, step, ticks, label) {
                            ## validate inputs
                          if (!is.numeric(initial) || !is.numeric(min) || !is.numeric(max))
                            stop("min, max, amd initial must all be numeric values")
                          else if (initial < min)
                            stop(paste("slider initial value", initial, "is less than the specified minimum"))
                          else if (initial > max)
                            stop(paste("slider initial value", initial, "is greater than the specified maximum"))
                          else if (min > max)
                            stop(paste("slider maximum is greater than minimum"))
                          else if ( !is.null(step) ) {
                            if ( !is.numeric(step) )
                              stop("step is not a numeric value")
                            if ( step > (max - min) )
                              stop("step is greater than range")
                          } else if ( !is.logical(ticks) )
                            stop("ticks is not a logical value")
                        })
@ 


The \meth{initialize} method simply creates a list and sets some
properties. This follows the setup of the original package.
<<Slider_initialize>>=
Slider$methods(
       initialize=function(min, max, initial=min, label=NULL, 
         step=-1, ticks=TRUE) {
           validate_inputs(min, max, initial, step, ticks)
           ## create slider and return it
           slider <- list(type = 0,
                          min = min,
                          max = max,
                          step = step,
                          ticks = ticks)
           initFields(l=slider, label=label, initial=initial)
           .self
         })
@ 

Our \meth{make\_gui} method basically defines the widget, turning the
arguments of the constructor into those for the \GTK{} widget. It then
calls the same method from the superclass to lay it the widget. Here
we define a slider and initialize it using the values in the list,
\code{l}. The \code{handler} is the change handler passed in from a
\class{Manipulate} instance.
<<Slider_make_gui>>=
Slider$methods(
       make_gui=function(cont, handler, ...) {
         widget <<- gtkHScale(min=l$min, max=l$max, step=l$step)
         widget$setValue(initial)
         gSignalConnect(widget, "value-changed", handler)
         callSuper(cont)
       },
       get_value=function() {
         as.numeric(widget$getValue())
       })
@ 

<<Picker, echo=FALSE>>=
## Not shown -- too long
Picker <- setRefClass("Picker",
                      contains="ManipulateControls",
                      methods=list(
                        initialize=function(..., initial=NULL, label=NULL) {
                          
                          ## get values
                          values <- resolveVariableArguments(list(...))
                          
                          ## get value names
                          valueNames <- names(values)
                          if (is.null(valueNames))
                            valueNames <- character(length(values))
                          
                          ## default missing names to choice values
                          missingNames <- valueNames == ""
                          valueNames[missingNames] <- paste(values)[missingNames]
                          names(values) <- valueNames
                          validate_inputs(values, valueNames, initial,label)
                          
                          if(is.null(initial)) 
                            initial <<- valueNames[1]
                          else
                            initial <<- initial
                          ## create picker
                          picker <- list(type = 1,
                                         choices = valueNames,
                                         values = values
                                         )
                          initFields(l=picker, label=label)
                          .self
                        },
                        make_gui=function(cont, handler, ...) {
                          widget <<- gtkComboBoxNewText()
                          sapply(l$choices, widget$appendText) # visible ones
                          ## initialize
                          ind <- match(initial, l$choices)
                          if(is.na(ind)) ind <- 1
                          widget$setActive(ind - 1L)
                          ## add signal
                          gSignalConnect(widget, "changed", handler)
                          callSuper(cont)
                        },
                        get_value=function() {
                          ind <- widget$getActive()
                          l$values[[ind + 1L]]
                        },
                        validate_inputs=function(values, valueNames, initial,label) {
                          if ( length(values) < 1 ) {
                            stop("picker choices must contain at least one value")
                          } else if ( length(valueNames) != length(unique(valueNames)) ) {
                            stop("picker choices must have unique names (duplicate detected)")
                          } else if ( !is.null(initial) ) {
                            if (length(initial) != 1)
                              stop("initial must be a single object")
                            else if ( !(as.character(initial) %in% valueNames) )
                              stop("initial doesn't match one of the supplied choices") 
                          }
                        }
                        
                        ))
picker <- function(..., initial = NULL, label = NULL) 
  Picker$new(..., initial=initial, label=label)
@ 

<<Checkbox, echo=FALSE>>=
Checkbox <- setRefClass("Checkbox", contains="ManipulateControls")
Checkbox$methods(
                 validate_inputs=function(initial, label) {
                   if ( !is.logical(initial) )
                     stop("initial must be a logical")
                 })
@ 
%

%% Not showing the combobox one. Could, but isn't anything special
The \function{picker} and \function{checkbox} functions (and their
classes) are similarly defined. For example, the \class{Checkbox}
class, the three main methods are given by:
<<>>=
Checkbox$methods(
         initialize=function(initial=FALSE, label=NULL) {
           validate_inputs(initial, label)
           checkbox <- list(type = 2)
           initFields(l=checkbox, label=label, initial=initial)
           .self
         },
         make_gui=function(cont, handler, ...) {
           widget <<- gtkCheckButton() # no label
           widget$setActive(initial)
           gSignalConnect(widget, "toggled", handler)
           callSuper(cont)
         },
         get_value=function() widget['active']
         )
@ 
%
We don't provide a label to the check button, as one is provided in
the table.

<<Checkbox_constructor, echo=FALSE>>=
checkbox <- function(initial = FALSE, label = NULL) Checkbox$new(initial, label)                            
@     

%% Try it out
<<echo=FALSE, results=hide>>=
<<manipulate_example>>
@ 
