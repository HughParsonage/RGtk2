%% using cairoDevice to embed graphics
%% cairoDevice

The package \pkg{cairoDevice} is an R graphics device based on the
Cairo graphics library.  It supports alpha-blending and antialiasing
and reports user events through the \function{getGraphicsEvent}
function. \pkg{RGtk2} and \pkg{cairoDevice} are integrated through the
\function{asCairoDevice} function. If a \class{GtkDrawingArea},
\class{GdkDrawable}, \class{Cairo} context, or \class{GtkPrintContext}
is passed to \function{asCairoDevice}, an R graphics device will be
initialized that targets its drawing to the object. For simply
displaying graphics in a GUI, the \class{GtkDrawingArea} is the best
choice. 

This is the simplest usage:
<<gtk-cairo-device, results=hide>>=
library(cairoDevice)
device <- gtkDrawingArea()
asCairoDevice(device)
##
win <- gtkWindow(show=FALSE)
win$add(device)
win$showAll()
plot(mpg ~ hp, data = mtcars)
@ 
%
In the above, we create the \class{GtkDrawingArea}, coerce it to a
Cairo-based graphics device, and then place it in a
window. Example~\ref{sec:RGtk2:scroll-windows} goes further by
embedding the drawing area into a scrolled window to support zooming
and panning.

For more complex use cases, such as compositing a layer above or below
the R graphic, one should pass an off-screen \class{GdkDrawable}, like
a \class{GdkPixmap}, or a \class{Cairo} context. The off-screen
drawing could then be composited with other images when
displayed. Example~\ref{ex:RGtk2:pixbuf} generates an icon by pointing
the device to a pixmap. Finally, passing a \class{GtkPrintContext} to
\function{asCairoDevice} allows printing R graphics through the \GTK\/
printing dialogs.

\begin{example}{Printing R graphics}{eg:RGtk2:printing-graphics}
  This example will show how to use the printing support in \GTK\/ for
  printing an R plot. 
  
  A print operation is encapsulated by \class{GtkPrintOperation}:
<<gtk-cairo-print-operation>>=
printOp <- gtkPrintOperation()
@ 
%
A print operation may perform several different actions: print
directly, print through a dialog, show a print preview and export to a
file. Before performing any such action, we need to implement the
rendering of our document into printed form. This is accomplished by
connecting to the \signal{draw-page} signal. The handler is passed a
\class{GtkPrintContext}, which contains the target Cairo context. In
general, one would call Cairo functions to render the document, which
is beyond our scope. In this case, though, we can pass the context
directly to \pkg{cairoDevice} for rendering the R plot:
<<gtk-cairo-draw-page>>=
gSignalConnect(printOp, "draw-page", 
               function(x, context, page_nr) {
                 asCairoDevice(context)
                 plot(mpg ~ wt, data = mtcars)
               })
@ 
%
  The final step is to run the operation to perform one of the
  available actions. In this example, we launch a print dialog:
<<gtk-cairo-run-dialog, results=hide>>=
printOp$run(action = "print-dialog", parent = NULL)
@
% 
  When the user confirms the dialog, the
  \signal{draw-page} handler is invoked, and the
  rendered page is sent to the printer.
\end{example}

%% JV: Added a new example combining some basic widgets, the cairo
%% device and a reference class
\begin{example}{The \pkg{manipulate} package in \pkg{RGtk2}}{eg-RGtk2-manipulate}
  \SweaveInput{ex-RGtk2-manipulate}
\end{example}
