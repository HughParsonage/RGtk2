<<echo=FALSE>>=
## a combobox that learns as you go.
## no tooltip per item, but here we add as detail
library(RGtk2)
@ 
%%
This example uses an editable combo box as an simple interface to the
\R\/ help system. Along the way, we record the number of times the
user searches for a page.

Our model for the combo box will be an \class{RGtkDataFrame} instance
with three columns: a function name, a string describing the
number of visits and an integer to record the number of visits. We
create the combo box with this model using the first column for the text:
<<>>=
m <- rGtkDataFrame(data.frame(
             fname=character(0), visits=character(0), 
             novisits=integer(0), stringsAsFactors=FALSE))
cb <- gtkComboBoxEntryNewWithModel(m, text.column=0)
@ 

It is not currently possible to put tooltip information on the drop
down elements of a combo box, as was done with a tree view. Instead,
we borrow from popular web browser interfaces and add textual
information about the number of visits to the drop down menu. This
requires us to pack in a new cell renderer to accompany the original
label provided by the \code{gtkComboBoxEntry} widget:
<<ConfigureCellRenderers>>=
cr <- gtkCellRendererText()
cb$packStart(cr)
cb$addAttribute(cr, "text", 1)
cr['foreground'] <- "gray50"
cr['ellipsize'] <- "end"
cr['style'] <- "italic"
cr['alignment'] <- "right"
@ 

%% JV: This first point seems like a misunderstanding on my part, but
%% I tried:
%% > m =rGtkDataFrame(data.frame(a=character(0), b=character(0), stringsAsFactors=FALSE))
%% > sapply(m[,], class)          a           b 
%% "character" "character" 
%% > m$appendRows(list(a="a", b="b"))
%% <pointer: 0x11eda4e30>
%% attr(,"interfaces")
%% [1] "GtkTreeModel"    "GtkTreeSortable"
%% attr(,"class")
%% [1] "RGtkDataFrame" "GObject"       "RGtkObject"   
%% > sapply(m[,], class)
%%        a        b 
%% "factor" "factor" 

%% ML: Just pass a data.frame to the appendRows function. The updating
%% dimensions comment was false. It was just a bug in RGtkDataFrame
%% that is now fixed in svn.

This helper function will be called each time a help page is
requested. It first updates the visit information, selects the
text for easier editing the next time round, then calls \function{help}.
<<helperFunction2>>=
callHelpFunction <- function(cb, value) {
  model <- cb$getModel()
  ind <- match(value,model[,1, drop=TRUE])
  n <- model[ind, "novisits"] <- model[ind, "novisits"] + 1
  model[ind, "visits"] <- 
    sprintf(ngettext(n, "%s visit", "%s visits"), n)
  ## select for easier editing
  cb$getChild()$selectRegion(start=0,end=-1)
  help(value)
}
gSignalConnect(cb, "changed", f=function(w, ...) {
  if(cb$getActive() >= 0) {
    val <- w$getActiveText()
    callHelpFunction(w, val)
  }
})
@ 
%

When the user enters a new value in the entry, we need to check if we
have previously accessed the item. If not, we add the value to our model.
<<results=hide>>=
gSignalConnect(cb$getChild(), "activate", 
               f = function(cb, entry, ...) {
  val <- entry$getText()
  if(!any(val == cb$getModel()[,1, drop=TRUE])) {
    model <- cb$getModel()
    tmp <- data.frame(fname=val, visits="", novisits=0,
                      stringsAsFactors = FALSE)
    model$appendRows(tmp)
  }
  callHelpFunction(cb, val)
}, data=cb, user.data.first=TRUE)
@ 

We place this in a minimal GUI with a label:
<<Layout>>=
w <- gtkWindow(show=FALSE)
w['border-width'] <- 15
g <- gtkHBox(); w$add(g)
g$packStart(gtkLabel("Help on:"))
g$packStart(cb, expand=TRUE, fill=TRUE)
#
w$show()
@ 

An alternative approach would be to use the completion support of
\class{GtkEntry}, presented next, but we leave that as an exercise to
the reader.

