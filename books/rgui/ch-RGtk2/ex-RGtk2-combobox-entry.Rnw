<<echo=FALSE>>=
## a combobox that learns as you go.
## no tooltip per item, but here we add as detail
library(RGtk2)
@ 
%%
This example uses an editable combo box as an simple interface to the
\R\/ help system. Along the way, we record the number of times the
user searches for a page.

Our model for the combo box will be an \class{RGtkDataFrame} instance
with three columns: a function name, a string describing the
number of visits and an integer to record the number of visits. 
<<>>=
model <- rGtkDataFrame(data.frame(filename = character(0), 
                                  visits = character(0), 
                                  nvisits = integer(0), 
                                  stringsAsFactors = FALSE))
@ 

As introduced in the previous chapter, the \class{GtkComboBoxEntry}
widget extends \class{GtkComboBox} to provide an entry widget for the
user to enter arbitrary values. To construct a combo box entry on top
of a tree model, one should pass the model, as well as the column
index that holds the textual item labels, to the
\constructor{gtkComboBoxEntry} constructor. It is not necessary to
create a cell renderer for displaying the text, as the entry depends
on having text labels and thus enforces their display. It is still
possible, of course, to add cell renderers for other model columns.
We create the combo box with this model using the first column for the
text:
<<>>=
combo_box <- gtkComboBoxEntryNewWithModel(model, 
                                          text.column = 0)
@ 

It is not currently possible to put tooltip information on the drop
down elements of a combo box, as was done with a tree view. Instead,
we borrow from popular web browser interfaces and add textual
information about the number of visits to the drop down menu. This
requires us to pack in a new cell renderer to accompany the original
label provided by the \code{gtkComboBoxEntry} widget:
<<ConfigureCellRenderers>>=
cell_renderer <- gtkCellRendererText()
combo_box$packStart(cell_renderer)
combo_box$addAttribute(cell_renderer, "text", 1)
cell_renderer['foreground'] <- "gray50"
cell_renderer['ellipsize'] <- "end"
cell_renderer['style'] <- "italic"
cell_renderer['alignment'] <- "right"
@ 

%% JV: This first point seems like a misunderstanding on my part, but
%% I tried:
%% > m =rGtkDataFrame(data.frame(a=character(0), b=character(0), stringsAsFactors=FALSE))
%% > sapply(m[,], class)          a           b 
%% "character" "character" 
%% > m$appendRows(list(a="a", b="b"))
%% <pointer: 0x11eda4e30>
%% attr(,"interfaces")
%% [1] "GtkTreeModel"    "GtkTreeSortable"
%% attr(,"class")
%% [1] "RGtkDataFrame" "GObject"       "RGtkObject"   
%% > sapply(m[,], class)
%%        a        b 
%% "factor" "factor" 

%% ML: Just pass a data.frame to the appendRows function. The updating
%% dimensions comment was false. It was just a bug in RGtkDataFrame
%% that is now fixed in svn.

This helper function will be called each time a help page is
requested. It first updates the visit information, selects the
text for easier editing the next time round, then calls \function{help}.
<<helperFunction2>>=
callHelpFunction <- function(combo_box, value) {
  model <- combo_box$getModel()
  ind <- match(value, model[,1,drop=TRUE])
  nvisits <- model[ind, "nvisits"] <- model[ind, "nvisits"] + 1
  model[ind, "visits"] <- 
    sprintf(ngettext(nvisits, "%s visit", "%s visits"), nvisits)
  ## select for easier editing
  combo_box$getChild()$selectRegion(start = 0, end = -1)
  help(value)
}
gSignalConnect(combo_box, "changed", 
               f = function(combo_box, ...) {
                 if(combo_box$getActive() >= 0) {
                   value <- combo_box$getActiveText()
                   callHelpFunction(combo_box, value)
                 }
               })
@ 
%

When the user enters a new value in the entry, we need to check if we
have previously accessed the item. If not, we add the value to our model.
<<results=hide>>=
gSignalConnect(combo_box$getChild(), "activate", 
       f = function(combo_box, entry, ...) {
         value <- entry$getText()
         if(!any(value == combo_box$getModel()[,1,drop=TRUE])) {
           model <- combo_box$getModel()
           tmp <- data.frame(filename = value, visits = "", 
                             nvisits = 0, 
                             stringsAsFactors = FALSE)
           model$appendRows(tmp)
         }
         callHelpFunction(combo_box, value)
       }, data = combo_box, user.data.first = TRUE)
@ 

We place this in a minimal GUI with a label:
<<Layout>>=
window <- gtkWindow(show = FALSE)
window['border-width'] <- 15
hbox <- gtkHBox(); window$add(hbox)
hbox$packStart(gtkLabel("Help on:"))
hbox$packStart(combo_box, expand = TRUE, fill = TRUE)
#
window$show()
@ 

An alternative approach would be to use the completion support of
\class{GtkEntry}, presented next, but we leave that as an exercise to
the reader.

