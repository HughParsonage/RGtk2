This example shows how to use \class{GtkTreeModelFilter} to filter
rows according to whether they match a value entered into a text entry
box. The end result is similar to an entry widget with completion.

<<echo=FALSE>>=
library(RGtk2)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.45\textwidth]{ex-RGtk2-filtered}
  \caption{Example of a data model filtered by values typed into a
    text-entry widget.}
  \label{fig:RGtk2-filtered}
\end{figure}

First, we create a data frame. The
\code{visible} column will be added to the \code{rGtkDataFrame}
instance to adjust the visible rows.
<<>>=
DF <- data.frame(state.name)
DF$visible <- rep(TRUE, nrow(DF))
model <- rGtkDataFrame(DF)
@ 

The filtered model needs to have the column specified that contains
the logical values; in this example, it is the last column.
<<>>=
filtered_model <- model$filter()
filtered_model$setVisibleColumn(ncol(DF) - 1)      # offset
view <- gtkTreeView(filtered_model)
@ 

Next, we create a basic view of a single column:
<<results=hide>>=
view$insertColumnWithAttributes(0, "Col", 
                 gtkCellRendererText(), text = 0)
@ 

An entry widget will be used to control the filtering. In the
callback, we adjust the \code{visible} column of the
\code{rGtkDataFrame} instance to reflect the rows to be shown. When
\code{val} is an empty string, the result of \function{grepl} is 
\code{TRUE}, so all rows will be shown.
<<>>=
entry <- gtkEntry()
gSignalConnect(entry, "changed", function(entry, user.data) {
  pattern <- entry$getText()
  DF <- user.data$getModel()
  values <- DF[, "state.name"]
  DF[, "visible"] <- grepl(pattern, values)
}, data=filtered_model)
@ 


Figure~\ref{fig:RGtk2-filtered} shows the two widgets placed within a
simple GUI.
<<echo=FALSE>>=
## not shown, but this places widgets into a simple GUI
window <- gtkWindow(show=FALSE)
window['title'] <- "A filtered data model"
window$setSizeRequest(width=300, height=400)

box <- gtkVBox()
window$add(box)
box$packStart(entry, expand=FALSE)

## add scroll window
sw <- gtkScrolledWindow()
sw$setPolicy("automatic", "automatic")
sw$add(view)
box$packStart(sw, expand=TRUE, fill=TRUE)

window$show()
@ 
