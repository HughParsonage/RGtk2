This example shows how to use \GTK's filtering feature to restrict the rows of the model shown by matching against the values entered into a text entry box. The end result is similar to an entry widget with completion.
<<echo=FALSE>>=
library(RGtk2)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.45\textwidth]{ex-RGtk2-filtered}
  \caption{Example of a data store filtered by values typed into a text-entry widget.}
  \label{fig:RGtk2-filtered}
\end{figure}

We use a convenient set of names and create a data frame. The
\code{VISIBLE} column will be added to the \code{rGtkDataFrame}
instance to adjust the visible rows.
<<>>=
df <- data.frame(state.name)
df$VISIBLE <- rep(TRUE, nrow(df))
store <- rGtkDataFrame(df)
@ 

The filtered store needs to have the column specified that contains
the logical values, in this example it is the last column.
<<>>=
filteredStore <- store$filterNew()
filteredStore$setVisibleColumn(ncol(df)-1)      # offset
view <- gtkTreeView(filteredStore)
@ 

This example uses just one column, we create a basic view of it below.
<<>>=
vc <- gtkTreeViewColumn()
cr <- gtkCellRendererText()
vc$packStart(cr, TRUE)
vc$setTitle("Col")
vc$addAttribute(cr, "text", 0)
QT <- view$insertColumn(vc, 0)
@ 

An entry widget will be used to control the filtering. In the
callback, we adjust the \code{VISIBLE} column of the
\code{rGtkDataFrame} instance, to reflect the rows to be shown. When
\code{val} is an empty string, the result \function{grep} is just
\code{TRUE}, so all rows will be shown. The
\code{getModel} method of the filtered store is used, although we
could have passed in that store itself.
<<>>=
e <- gtkEntry()
ID <- gSignalConnect(e, "changed", function(w, data) {
  val <- w$getText()
  df <- data$getModel()
  values <- df[,1]
  df[, dim(df)[2]] <- sapply(values, function(i) 
                             as.logical(length(grep(val,i))))
},
                     data=filteredStore)

@ 


Figure~\ref{fig:RGtk2-filtered} shows the two widgets placed within a
simple GUI.
<<echo=FALSE>>=
## not shown, but this places widgets into a simple GUI
w <- gtkWindow(show=FALSE)
w['title'] <- "A filtered data store"
w$setSizeRequest(width=300, height=400)

g <- gtkVBox()
w$add(g)
g$packStart(e, expand=FALSE)

## add scroll window
sw <- gtkScrolledWindow()
sw$setPolicy("automatic", "automatic")
sw$add(view)
g$packStart(sw, expand=TRUE, fill=TRUE)

w$show()
@ 
