%% JV: 1/14/11: I moved this around following your comments after top
%% level windows: dialogs are now after box containers (as they are
%% needed for the example); discussion on other containers
%% follows. Then I moved the basic controls into a separate chapter,
%% as this one got rather long.



<<echo=FALSE>>=
library(RGtk2)
@ 

%% JV: 1/27/11 This intro para. needed a rewrite 
% This section covers some of the basic widgets and containers of
% \GTK. We begin with a discussion of top level containers and box
% containers. Then we describe many of the basic controls, and
% conclude with the mention of a few special-case containers.


This chapter covers top-level windows, dialogs and the container
objects provided by \GTK.

\section{Top-level windows}
\label{sec:RGtk2:gtkWindow}

%% constructor Show/Hide
As we saw in our ``Hello World'' example, top-level windows are
constructed by the \igui{top-level window}\constructor{gtkWindow} constructor. This function
has the argument \code{type} to specify the type of window to create. The
default is a top-level window, which we will always use, as the
alternative is for ``popups'' which are meant for internal use, e.g.,
for implementing menus. The second argument is \code{show}, which by
default is \code{TRUE}, indicating that the window should be shown. If
set to \code{FALSE}, the window, like other widgets, can later be
shown by calling its \method{show}{GtkWidget} method. The
\method{showAll}{GtkWidget} method will also show any child
components. These can be reversed with \method{hide}{GtkWidget} and
\method{hideAll}{GtkWidget}.

%% title
As with all objects, windows have several properties. The window title
is stored in the \code{title} property. As usual, this property can be
accessed via the ``get'' and ``set'' methods
\method{getTitle}{GtkWindow} and \method{setTitle}{gtkWindow}, or
using the \function{[} function. To illustrate, the following sets up
a new window with a title.
<<>>=
window <- gtkWindow(show=FALSE)          # use default type
window$setTitle("Window title")          # set window title
window['title']                          # or  use getTitle
window$setDefaultSize(250,300)           # 250 wide, 300 high
window$show()                            # show window
@ 

\paragraph{Window size}
The initial size of the window can be set with the
\method{setDefaultSize}{GtkWindow} method, as shown above, which takes a
\argument{width}{gtkWindow} and \argument{height}{gtkWindow} argument
specified in pixels. \ilayout{toplevel window size}This specification allows the window to be
resized but must be made before the window is drawn, as the window
then falls under control of the window manager. The
\method{setSizeRequest}{GtkWidget} method will request a minimum size,
which the window manager will usually honor, as long as a maximum
bound is not violated. To fix the size of a window, the
\code{resizable} property may be set to \code{FALSE}.

%% A container
\paragraph{Adding a child component to a window}
A window is a container. \class{GtkWindow} inherits from
\class{GtkBin}, which derives from \class{GtkContainer} and allows
only a single child. As before, this child is added through the
\method{add}{GtkContainer} method. 
We illustrate the basics by adding a simple label to a window.
<<basic-window-label>>=
window <- gtkWindow(show = FALSE); window$setTitle("Hello world")
label <- gtkLabel("Hello world")
window$add(label)
@
%
To display multiple widgets in a window, one simply needs to add a
non-\class{GtkBin} container as the child widget. We will discuss
additional container types in Section~\ref{sec:RGtk2:layout}.

%% delete-event; destroy
\paragraph{Destroying windows}
A window is normally closed by the window manager. Most often, this
occurs in response to the user clicking on a close button in a title
bar.  When this happens, the window manager requests that the window be deleted,
and the \code{delete-event} signal is emitted. As with any window
manager event, the default handler is overridden if a callback
connected to \code{delete-event} returns \code{TRUE}.  This can be
useful for confirming the intention of the user before closing the
window. For example:
<<gtk-container-window-delete>>=
gSignalConnect(window, "delete-event", function(event) {
  dialog <- gtkMessageDialog(parent = window, flags = 0, 
                             type = "question", 
                             buttons = c("yes", "no"),
                             "Are you sure you want to quit?")
  dialog$run() != GtkResponseType["yes"]
})
@ 
%
(We describe the use of message dialogs in
Section~\ref{sec:gtk-dialog-message}.) The contract of deletion is that
the window should no longer be visible on the screen. It is not
necessary for the actual window object to be removed from memory,
although this is the default behavior. Calling the \code{hideOnDelete}
method configures the window to hide but not destroy itself.

It is also possible to close a window programmatically by calling
its \method{destroy}{GtkWidget} method:
<<gtk-container-window-destroy>>=
window$destroy()
@ 

\paragraph{Transient windows}
New windows may be standalone top-level windows or may be associated
with some other window. For example, a dialog is usually associated
with the primary document window. The
\method{setTransientFor}{GtkWindow} method specifies the
window with which a transient (dialog) window is associated. This
hints to the window manager that the transient window should be kept on
top of its parent. The position relative to the parent window can be
specified with \code{setPostion}, which takes a value from the
\gtkenum{GtkWindowPosition} enumeration. Optionally, a dialog can be
set to be destroyed with its parent. For example:
<<>>=
## create a window and a dialog window
window <- gtkWindow(show = FALSE)
window$setTitle("Top level window")
##
dialog <- gtkWindow(show = FALSE)
dialog$setTitle("dialog window")
dialog$setTransientFor(window)
dialog$setPosition("center-on-parent")
dialog$setDestroyWithParent(TRUE)
window$show()
dialog$show()
@ 
% 
The above code produces a non-modal dialog window from scratch. Due to
its transient nature, it can hide parts of the top-level window, but,
unlike a modal dialog, it does not prevent that window from receiving
events. \GTK\/ provides a number of convenient high-level dialogs,
discussed in Section~\ref{sec:dialogs}, that support modal operation.

\section{Layout containers}
\label{sec:RGtk2:layout}

Once a top-level window is constructed, it remains to fill the window
with the controls that will constitute our GUI. As these controls are
graphical, they must occupy a specific region on the screen. The
region could be specified as a fixed rectangle. However, as a
user interface, a GUI is dynamic and interactive. The size constraints
of widgets will change, and the window will be resized. The programmer
can ill afford to explicitly manage a dynamic layout. Thus, \GTK\/
implements automatic layout in the form of container widgets.

\subsection{Basics}
\label{sec:RGtk2:layout:basics}

In \GTK{}, the \iprogram{widget hierarchy}widget hierarchy is built
when children are added to a parent container.  In this example, a
window is made the parent of a label:
<<>>=
window <- gtkWindow(show=FALSE)
window$setTitle("Hello world")
label <- gtkLabel("Hello world")
window$add(label)
@ 

The method \method{getChildren}{GtkContainer} will return the children
of a container as a list. Since in this case the list will be at most
length one, the \method{getChild}{GtkWidget} method may be more
convenient, as it directly returns the only child, if any. For
instance, to retrieve the label text one could do:
<<>>=
window$getChild()['label']
@ 
%% [[ for container
The \method{[[}{GObject} method 
%% ]]
accesses the child widgets by number, as a convenient wrapper
around the \method{getChildren}{GObject} method:
<<gtk-container-brackets>>=
window[[1]]['label']
@ 
%
Conversely, the \code{getParent} method for \GTK\/ widgets will
return the parent container of a widget.
<<eval=FALSE, echo=FALSE>>=
## leave out?
l$getParent()
@ 

Every container supports removing a child with the
\method{remove}{GtkWidget} method. The child can later be re-added.
For instance
<<remove-child-widget-3>>=
window$remove(label)
window$add(label)
@
% 
To remove a widget from the screen but not its container, use the
\method{hide}{GtkWidget} method on the widget. The
\method{reparent}{GtkWidget} method is a convenience for moving a
widget between containers that ensures the child is not
\iprogram{garbage collection}garbage
collected during the transition.\footnote{An object becomes available
  for garbage collection when it has no references to it, which can
  happen if it is removed from the parent container.}

\subsection{Widget size negotiation}
\label{sec:RGtk2:layout:size}

We have already seen perhaps the simplest automatic layout container,
\class{GtkBin}, which fills all of its space with its
child. Despite the apparent simplicity, there is a considerable amount
of logic for calculating the size of the widget on the screen. The
child will first inform the parent of its desired natural size. For
example, a label might ask for the dimensions necessary to display all
of its text. The container then decides whether to allocate the
requested size or to allocate more or less than the requested
amount. The child then consumes the allocated space. Consider the
previous example of adding a label to a window:
<<layout-window-show-first>>=
window <- gtkWindow(); window$setTitle("Hello world")
label <- gtkLabel("Hello world")
window$add(label)
@ 

%% Oddly this is choking for me
% <<layout-window-show-first>>=
% <<basic-window-label>>
% @
%
The window is shown before the label is added, and the default size is
likely much larger than the space the label needs to display ``Hello
world''. However, as the window size is now controlled by the window
manager, \class{GtkWindow} will not adjust its size. Thus, the label
is allocated more space than it requires.
<<layout-window-show-first-alloc, results=hide>>=
label$getAllocation()$allocation
@ 
% ML: a bit of a hack, because the size is not correct during build
% Might just have to iterate the event loop, but this is easy:
\begin{Soutput}
     x      y  width height 
     0      0    200    200 
\end{Soutput}
%
If, however, we avoid showing the window until the label is added, the
window will size itself so that the label has its natural size:
<<layout-window-show-later, results=hide>>=
window <- gtkWindow(show = FALSE); window$setTitle("Hello world")
label <- gtkLabel("Hello world")
window$add(label)
window$show()
label$getAllocation()$allocation
@ 
<<echo=FALSE>>=
sapply(label$getAllocation()$allocation, function(i) i)
@ 
%
One might notice that it is not possible to decrease the size of the
window further. This is due to \class{GtkLabel} asserting a minimum
size request that is sufficient to display its text. The
\method{setSizeRequest}{GtkWidget} sets a user-level minimum size 
request for any widget. It is obvious from the method name, however,
that this is still strictly a request. It may not be satisfied, for
example, if the maximum window size constraint of the window manager
is violated. More importantly, setting a minimum size request is
generally discouraged, as it decreases the flexibility of the layout.

Any non-trivial GUI will require a window containing multiple
widgets. Let us consider the case where the child of the window is
itself a container, with multiple children.  Essentially the same
negotiation process occurs between the container and its children (the
grandchildren of the window). The container calculates its size
request based on the requests of its children and communicates it to
the window. The size allocated to the container is then distributed to
the children according to its layout algorithm. This process is the
same for every level in the container hierarchy.

\subsection{Box containers}
\label{sec:RGtk2:layout:box}

The most commonly used multi-child container in \GTK\/ is the box
(implemented in class \class{GtkBox}) which \ilayout{box layout}packs its children as if
they were in a box. Instances of \class{GtkBox} are constructed by
\function{gtkHBox} or \function{gtkVBox}.  These produce horizontal or
vertical boxes, respectively. Each child widget is allocated a cell in
the box.  The cells are arranged in a single column (\class{GtkVBox})
or row (\class{GtkHBox}). This one dimensional stacking is usually all
that a layout requires. The child widgets can be containers
themselves, allowing for very flexible layouts. For special cases
where some widgets need to span multiple rows or columns and align
themselves in both dimensions, \GTK\/ provides the \class{GtkTable}
class, which is discussed later.  Many of the principles we discuss in
this section also apply to \class{GtkTable}.

Here we will explain and demonstrate the use of \class{GtkHBox}, the
general horizontal box layout container. \class{GtkVBox} can be used
exactly the same way; only the direction of stacking is different.
Figure~\ref{fig:packing} illustrates a sampling of the possible
layouts that are possible with a \class{GtkHBox}.

%% JV: Michael, I don't have this figure and am not sure what to put
%% here. Can you show me the code or a figure? THanks.
%% ML: I put the figure in here, but it's somewhat redundant with your
%% example. Could we adjust your example just to show padding? It
%% seems like we could get rid of the fourth row and add a row where
%% fill and expand are TRUE but padding is 10.
%% JV: We need to tighten this up, but your figure has a much better
%% layout. I'll put the two together as suggested, but keep your
%% frames and numbering. XXX TODO
\begin{figure}[h!tbp]
  \begin{center}
    \includegraphics[angle=90, width=.65\textwidth]{packing.png}
    \caption{\label{fig:packing}A screenshot demonstrating the effect
      of packing two buttons into \class{GtkHBox} instances using the
      \method{packStart}{GtkBox} method with different combinations of
      the \argument{expand}{gtkBoxPackStart} and
      \argument{fill}{gtkBoxPackStart} settings.  The effect of the
      \argument{homogeneous}{gtkBoxPackStart} spacing setting on the
      \class{GtkHBox} is also shown.}
  \end{center}
\end{figure}

The code for some of these layouts is presented here. We begin by
creating a \class{GtkHBox} widget. We pass \code{TRUE} for the first
parameter, \argument{homogeneous}{gtkHBox}. This means that the
horizontal allocation of the box will be evenly distributed between
the children.  The second parameter directs the box to leave 5 pixels
of space between each child.  The following code constructs the
\class{GtkHBox}:
<<basic-box-homo>>=
box <- gtkHBox(TRUE, 5)
@
The equal distribution of available space is strictly enforced; the
minimum size requirement of a homogeneous box is set such that the box
always satisfies this assertion, as well as the minimum size
requirements of its children.

The \method{packStart}{GtkBox} and \method{packEnd}{GtkBox} methods pack a
widget into a box against the left and right side (top and
bottom for a \class{GtkVBox}), respectively. For this explanation, we
restrict ourselves to \method{packStart}{GtkBox}, since
\method{packEnd}{GtkBox} works the same except for the
direction. Below, we pack two buttons, \code{button\_a} and
\code{button\_b} against the left side:
<<basic-box-homo-nofill>>=
button_a <- gtkButton("Button A")
button_b <- gtkButton("Button B")
box$packStart(button_a, fill = FALSE)
box$packStart(button_b, fill = FALSE)
@
%
First, \code{button\_a} is packed against the left side of the box,
and then we pack \code{button\_b} against the right side of
\code{button\_a}. This results in the first row in
Figure~\ref{fig:packing}. The space distribution is homogeneous, but
making the space available to a child does not mean that the child
will fill it. That depends on the natural size of the child, as well
as the value of the \argument{fill}{gtkBoxPackStart} parameter passed
to \method{packStart}{GtkBox}. In this case,
\argument{fill}{gtkBoxPackStart} is \code{FALSE}, so the extra space
is not filled and the widget is aligned in the center of its
space. When a widget is packed with the
\argument{fill}{gtkBoxPackStart} parameter set to \code{TRUE}, the
widget is resized to consume the available space. This results in
rows~$2$ and $3$ in Figure~\ref{fig:packing}.

In many cases, it is desirable to give children unequal amounts of
available space, as in rows~4--9 in Figure~\ref{fig:packing}. 
To create a heterogeneously spaced \class{GtkHBox}, we pass
\code{FALSE} as the first argument to the constructor, as in the
following code:
<<basic-box-hetero>>=
box <- gtkHBox(FALSE, 5)
@ 

A heterogeneous layout is freed of the restriction that all widgets
must be given the same amount of available space; it only needs to
ensure that each child has enough space to meet its minimum size
requirement. After satisfying this constraint, a box is often left
with extra space. The programmer may control the distribution of this
extra space through the \argument{expand}{gtkBoxPackStart} parameter
to \method{packStart}{GtkBox}.  When a widget is packed with
\argument{expand}{gtkBoxPackStart} set to \code{TRUE}, we will call
the widget an \emph{expanding} widget. All expanding widgets in a box
are given an equal portion of the entirety of the extra space. If no
widgets in a box are expanding, as in row~5 of
Figure~\ref{fig:packing}, the extra space is left undistributed. 

It is common to mix expanding and non-expanding widgets in the same
box.
% FIXME: do we use the mirror dialog example or another one?  For
% example, in the CRAN mirrors dialog, the box first ensures that the
% mirror list and the label above it are given enough space to satisfy
% their minimum requirement. Then, since the mirror list is expanding,
% all of the extra space is made available to it, while the label is
% left only with its minimum requirement (i.e., enough space to show
% its text).
An example is given below, where \code{button\_a} is expanding,
while \code{button\_b} is not:
<<echo=FALSE>>=
## re create buttons
button_a <- gtkButton("Button A")
button_b <- gtkButton("Button B")
@ 
%
<<basic-box-expand>>=
box$packStart(button_a, expand = TRUE, fill = FALSE)
box$packStart(button_b, expand = FALSE, fill = FALSE)
@ 
%
The result is shown in row~6 of Figure~\ref{fig:packing}.  The figure
contains several other permutations of the
\argument{homogeneous}{gtkBoxPackStart},
\argument{expand}{gtkBoxPackStart} and
\argument{fill}{gtkBoxPackStart} settings.

\begin{figure}
  \centering
%%    \includegraphics[angle=90, height=.8\textheight, width=.75\textwidth]{packing.png} 
  \includegraphics[width=.8\textwidth]{ex-RGtk2-pack-start.png} 
  \caption{Examples of packing widgets into a box container. The top
    row shows no padding, whereas the 2nd and 3rd illustrate the
    difference between \code{padding} (an amount around each child)
    and \code{spacing} (an amount between each child). The last two
    rows show the effect of \code{fill} when \code{expand=TRUE}. This
    illustration follows one in the original \GTK\/ tutorial.}
  \label{fig:RGtk2-pack-start}
\end{figure}

\paragraph{Padding}
There are several ways to add space around widgets in a box container.
The \argument{spacing}{gtkHBox} argument for the constructors
specifies the amount of space, in pixels, between the cells. This
defaults to zero. The \code{pack} methods have a
\argument{padding}{gtkBoxPackStart} argument, also defaulting to zero,
for specifying the padding in pixels on either side of the child. It
is important to note the difference: \code{spacing} is between
children and the same for every boundary, while the \code{padding} is
specific to a particular child and occurs on either side, even on the
ends. The spacing between widgets is the sum of the \code{spacing}
value and the two \code{padding} values when the children are added.
Example~\ref{eg:RGtk2:mac-buttons} provides an example and
Figure~\ref{fig:RGtk2-pack-start} an illustration.

\paragraph{Positioning}
The \method{reorderChild}{GtkBox} method reorders the child
widgets. The new position of the child is specified using 0-based
indexing. This code will move the third child of \code{g} to the second position:
<<echo=FALSE, results=hide>>=
hbox <- gtkHBox()
sapply(1:3, function(i) hbox$packStart(gtkLabel(i)))
@ 
<<>>=
b3 <- hbox[[3]]
hbox$reorderChild(b3, 2 - 1)               # second is 2 - 1
@ 

\subsection{Alignment}
\label{sec:RGtk2:layout:align}

We began this section with a simple example of a window containing a
label:
<<basic-layout-align-window>>=
window <- gtkWindow(); window$setTitle("Hello world")
label <- gtkLabel("Hello world")
window$add(label)
@ 
%% again giving me issues
% <<basic-layout-align-window>>=
% <<basic-window-label>>
% @ 
%
The window allocates all of its space to the label, despite the actual
text consuming a much smaller region. The size of the text is fixed,
according to the font size, so it could not be expanded. Thus, the
label decided to center the text within itself (and thus the
window). A similar problem is faced by widgets displaying images. The
image cannot be expanded without distortion. Widgets that display
objects of fixed size inherit from \class{GtkMisc}, which provides
methods and properties for tweaking how the object is aligned within
the space of the widget. For example, the \code{xalign} and
\code{yalign} properties specify how the text is aligned in our label
and take values between $0$ and $1$, with $0$ being left and
top. Their defaults are $0.5$, for centered alignment. We modify them
below to make our label left justified:
<<basic-layout-align-left>>=
label["xalign"] <- 0
@ 
%% SCREENSHOT
Unlike a block of text or an image, a widget usually does not have a
fixed size. However, the user may wish to tweak how a widget fills
the space allocated by its container.  \GTK\/ provides the
\class{GtkAlignment} container for this purpose. For example, rather
than adjust the justification of the label text, we could have
instructed the layout not to expand but to position itself against the
left side of the window:
<<basic-layout-align-GtkAlignment>>=
window <- gtkWindow(); window$setTitle("Hello world")
alignment <- gtkAlignment()
alignment$set(xalign = 0, yalign = 0.5, xscale = 0, yscale = 1)
window$add(alignment)
label <- gtkLabel("Hello world")
alignment$add(label)
@ 

\section{Dialogs}
\label{sec:dialogs}

\SweaveInput{Pre-defined-dialogs}


\section{Special-purpose containers}
\label{sec:RGtk2:containers}

In Section~\ref{sec:RGtk2:layout}, we presented \class{GtkBox} and
\class{GtkAlignment}, the two most useful layout containers in
\GTK. This section introduces some other important containers. These
include the merely decorative \class{GtkFrame}; the interactive
\class{GtkExpander}, \class{GtkPaned} and \class{GtkNotebook}; and the
grid-style layout container \class{GtkTable}. All of these widgets are
derived from \class{GtkContainer}, and so share many methods.

\subsection{Framed containers}
\label{sec:RGtk2:gtkFrame}

The \constructor{gtkFrame} function constructs a container that draws
a decorative, labeled frame around its single child:
<<gtk-container-frame>>=
frame <- gtkFrame("Options")
vbox <- gtkVBox()
vbox$packStart(gtkCheckButton("Option 1"), FALSE)
vbox$packStart(gtkCheckButton("Option 2"), FALSE)
frame$add(vbox)
@ 
%
A frame is useful for visually segregating a set of conceptually
related widgets from the rest of the GUI. The type of decorative
shadow is stored in the \code{shadow-type} property.  The
\method{setLabelAlign}{GtkFrame} aligns the label relative to the
frame. This is to the left, by default.

\subsection{Expandable containers}
\label{sec:RGtk2:gtkExpander}

The \class{GtkExpander} widget provides a button that hides and shows
a single child upon demand. This is often an effective mechanism for
managing screen space. Expandable containers are constructed by
\function{gtkExpander}:
<<gtk-container-expander>>=
expander <- gtkExpander("Advanced")
expander$add(frame)
@ 
%
Use \function{gtkExpanderNewWithMnemonic} if a mnemonic is desired.
The \code{expanded} property, which can be accessed with
\method{getExpanded}{GtkExpander} and
\method{setExpanded}{GtkExpander}, represents the visible state of the
widget.  When the \code{expanded} property changes, the
\signal{activate} signal is emitted.

\subsection{Notebooks}
\label{sec:RGtk2:gtkNotebook}

The \constructor{gtkNotebook} constructor creates a notebook
container, a widget that displays an array of buttons resembling
notebook tabs. Each tab corresponds to a widget, and when a tab is
selected, its widget is made visible, while the others are hidden. If
\class{GtkExpander} is like a check button, \class{GtkNotebook} is
like a radio button group. 

We create a notebook and add some pages:
<<qt-layout-notebook>>=
notebook <- gtkNotebook()
notebook$appendPage(gtkLabel("Page 1"), gtkLabel("Tab 1"))
notebook$appendPage(gtkLabel("Page 2"), gtkLabel("Tab 2"))
@
%
A page specification consists of a widget for the page and a widget
for the tab. Any type of widget is accepted, although a label is
typically used for the tab.  This flexibility allows for more complicated tabs,
such as a box container with a label and close icon.

The tabs can be positioned on any of the four sides of the notebook;
this depends on the \property{tab-pos}{gtkNotebook} property, with a value from
\gtkenum{GtkPositionType}: \qcode{left}, \qcode{right}, \qcode{top}, or
\qcode{bottom}. By default, the tabs are on top. We move the current ones to the
bottom:
<<qt-layout-notebook-pos>>=
notebook['tab-pos'] <- "bottom"
@ 

Methods and properties that affect pages expect the page index,
instead of the page widget. To map from the child widget to the page
number, use the method \method{pageNum}{GtkNotebook}.  The
\property{page}{gtkNotebook} property holds the zero-based index of the active
tab. We make the second tab active:
<<qt-layout-notebook-current>>=
notebook['page'] <- 1
notebook['page']
@
%
To move sequentially through the pages, call the methods
\method{nextPage}{GtkNotebook} and
\method{prevPage}{GtkNotebook}. When the current page changes, the
\signal{switch-page} signal is emitted.

Pages can be reordered using the \method{reorderChild}{GtkNotebook},
although it is usually desirable to allow the user to reorder
pages. The \method{setTabReorderable}{GtkNotebook} enables drag and
drop reordering for a specific tab. It is also possible for the user
to drag and drop pages between notebooks, as long as they belong to
the same group, which depends on the \prop{group-id}
property. Pages can be deleted using the method
\method{removePage}{GtkNotebook}.

\paragraph{Managing many pages}
By default, a notebook will request enough space to display all of its
tabs. If there are many tabs, space may be wasted. \class{GtkNotebook}
solves this with the scrolling idiom. If the
property \code{scrollable} is set to \code{TRUE}, arrows will be added
to allow the user to scroll through the tabs. In this case, the tabs
may become difficult to navigate. Setting the \code{enable-popup}
property to \code{TRUE} enables a right-click popup menu listing all
of the tabs for direct navigation.

\begin{example}{Adding a page with a close button}{eg:RGtk2-notebook-close-icon}
  A familiar element of notebooks in many web browsers is a tab close
  button. The following defines a new method
  \method{insertPageWithCloseButton}{GtkNotebook} that will use the
  themeable stock close icon.  The callback passes both the notebook
  and the page through the \code{data} argument, so that the proper
  page can be deleted.

  \begin{figure}
    \centering
    \includegraphics[width=.5\textwidth]{fig-RGtk2-notebook-close-buttons.png}
    \caption{Simple illustration of customized tab in a notebook. These include a close button.}
    \label{fig:RGtk2-notebook-close-buttons}
  \end{figure}
  
<<>>=
gtkNotebookInsertPageWithCloseButton <- 
  function(object, child, label.text="", position=-1) {
    icon <- gtkImage(pixbuf = 
      object$renderIcon("gtk-close", "button", size = "menu"))
    closeButton <- gtkButton()
    closeButton$setImage(icon)
    closeButton$setRelief("none")
    ##
    label <- gtkHBox()
    label$packStart(gtkLabel(label.text))
    label$packEnd(closeButton)
    ##
    gSignalConnect(closeButton, "clicked", function(button) {
      index <- notebook$pageNum(child)
      notebook$removePage(index)
    })
    object$insertPage(child, label, position)
  }
@ 


Here is a simple demonstration of its usage:
<<results=hide>>=
window <- gtkWindow()
notebook <- gtkNotebook(); window$add(notebook)
notebook$insertPageWithCloseButton(gtkButton("hello"), 
                                   label.text = "page 1")
notebook$insertPageWithCloseButton(gtkButton("world"), 
                                   label.text = "page 2")
@ 
  
\end{example}


\subsection{Scrollable windows}
\label{sec:RGtk2:scroll-windows}

The \class{GtkExpander} and \class{GtkNotebook} widgets support
efficient use of screen real estate. However, when a widget is always
too large to fit in a GUI, partial display is necessary. A
\class{GtkScrolledWindow} supports this by providing scrollbars for
the user to adjust the visible region of a single child. The range,
step and position of \class{GtkScrollbar} are controlled by an
instance of \class{GtkAdjustment}, just as with the slider and spin
button. Scrolled windows are most often used with potentially large
widgets like table views and when displaying images and graphics.

Our example will embed an R graphics device in a scrolled window and
allow the user to zoom in and out and pull on the scroll bars to pan
the view. First, we create an R graphics device using the
\pkg{cairoDevice} package
<<gtk-container-scrolled-device, results=hide>>=
library(cairoDevice)
device <- gtkDrawingArea()
device$setSizeRequest(600, 400)
asCairoDevice(device)
@ 
%
and then embed it within a scrolled window
<<gtk-container-scrolled-construct>>=
scrolled <- gtkScrolledWindow()
scrolled$addWithViewport(device)
@ 
%
The widget in a scrolled window must know how to display only a part
of itself, i.e., it must be scrollable. Some widgets, including
\class{GtkTreeView} and \class{GtkTextView}, have native scrolling
support. Other widgets, like our \class{GtkDrawingArea}, must be
embedded within the proxy \class{GtkViewport}. The
\class{GtkScrolledWindow} convenience method
\method{addWithViewport}{GtkScrolledWindow} allows the programmer to
skip the \class{GtkViewport} step.


Next, we define a function for scaling the plot:
<<gtk-container-scrolled-zoom>>=
zoomPlot <- function(x = 2.0) {
  allocation <- device$getAllocation()$allocation
  device$setSizeRequest(allocation$width * x, 
                        allocation$height * x)
  updateAdjustment <- function(adjustment) {
    adjustment$setValue(x * adjustment$getValue() + 
                        (x - 1) * adjustment$getPageSize() / 2)
  }
  updateAdjustment(scrolled$getHadjustment())
  updateAdjustment(scrolled$getVadjustment())
}
@ 
%
The function gets the current size allocation from the device, scales
it by \qcode{x} and requests the new size. It then scrolls the window
to preserve the center point. The state of each scroll bar is
represented by a \class{GtkAdjustment}.  We update the value of
the horizontal and vertical adjustments to scroll the window.  The
value of an adjustment corresponds to the left/top position of the
window, so we adjust by half the page size after scaling the value.

\igui{keystroke events}
We had key press events, so that pressing \kbd{+} zooms in and
pressing \kbd{-} zooms out:
<<gtk-container-scrolled-key-press>>=
gSignalConnect(scrolled, "key-press-event", 
               function(scrolled, event) {
                 key <- event[["keyval"]]
                 if (key == GDK_plus)
                   zoomPlot(2.0)
                 else if (key == GDK_minus)
                   zoomPlot(0.5)
                 TRUE
               })
@ 

Despite its name, the scrolled window is not a top-level window. Thus,
it needs to be added to a top-level window:
<<gtk-container-scrolled-window>>=
win <- gtkWindow(show = FALSE)
win$add(scrolled)
win$showAll()
@ 
 
Finally, a basic scatterplot is displayed in the viewer:
<<gtk-container-scrolled-plot>>=
plot(mpg ~ hp, data = mtcars)
@ 

The properties \code{hscrollbar-policy} and \code{vscrollbar-policy}
determine when the scrollbars are drawn. By default, they are always
drawn. The \qcode{automatic} value from the \code{GtkPolicyType}
enumeration draws the scrollbars only if needed, i.e, if the child
widget requests more space than can be allocated. The
\method{setPolicy}{GtkScrolledWindow} method allows both to be set at
once.

% \begin{example}{Scrolled window example}{eg:RGtk2:scrolled-window}
%   \SweaveInput{ex-RGtk2-scrolled-window}
% \end{example}

\subsection{Divided containers}
\label{sec:RGtk2:gtkPanedWindow}

The \constructor{gtkHPaned} and \constructor{gtkVPaned} constructors
create containers that contain two widgets, arranged horizontally or
vertically and separated by a divider displaying a handle allowing the
user to adjust the allocation of space between the child
components. We will demonstrate only the horizontal pane
\class{GtkHPaned} here, without loss of generality.
% An example is presented in Example \ref{eg:RGtk2:using-tree-content}. 

First, we construct an instance of \class{GtkHPaned}:
<<gtk-container-paned-construct>>=
paned <- gtkHPaned()
@ 

The two children may be added two different ways. The simplest
approach calls \method{add1}{GtkPaned} and
\method{add2}{GtkPaned} for adding the first and second child,
respectively. 
<<gtk-container-paned-add>>=
paned$add1(gtkLabel("Left (1)"))
paned$add2(gtkLabel("Right (2)"))
@ 
%
This configures the container such that both children are allowed to
shrink and only the second widget can expand. Such a configuration is
appropriate for a GUI with main widget and a side pane to the
left. More flexibility is afforded by the methods
\method{pack1}{GtkPaned} and \method{pack2}{GtkPaned}, which have
arguments for specifying whether the child should expand
(\qcode{resize}) and/or \qcode{shrink}. Here we add the children such
that both can expand and shrink:
<<gtk-container-paned-pack>>=
paned$pack1(gtkLabel("Left (1)"), resize = TRUE, shrink = TRUE)
paned$pack2(gtkLabel("Right (2)"), resize = TRUE, shrink = TRUE)
@
%
After children are added, they can be retrieved from the container
through the \method{getChild1}{GtkPaned} and
\method{getChild2}{GtkPaned} methods.

The screen position of the handle can be set with the
\method{setPosition}{GtkPaned} method.  The properties
\code{min-position} and \code{max-position} are useful for converting
a percentage into a screen position. The \signal{move-handle} signal
is emitted when the handle position is changed.

\subsection{Tabular layout}
\label{sec:RGtk2:gtkTable}

\class{GtkTable} is a container for laying out objects in a tabular
(or grid) \ilayout{grid layout}format. It is \emph{not} meant for displaying tabular
data. The container divides its space into cells of a grid, and a
child widget may occupy one or more cells. The allocation of space
within a row or column follows logic similar to that of box
layouts. The most common use case of a \class{GtkTable} is a form
layout, which we will demonstrate in our example.

\begin{example}{Dialog layout}{ex-RGtk2-dialog-layout}
  \SweaveInput{ex-RGtk2-dialog-layout.Rnw}
\end{example}

