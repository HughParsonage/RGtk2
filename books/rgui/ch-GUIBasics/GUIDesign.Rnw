% Section to introduce GUI design and principles through a comparison of
% three dialogs and general discussion


%% mac defs:

% Document windows contain file-based user data. They present a view
% into the content that people create and store. If the document is
% larger than the window, the window shows a portion of the document’s
% contents and provides users with the ability to scroll to other areas.

% Application windows are the main windows of applications that are not
% document-based. These windows can use the standard Aqua window look
% and features or (less frequently) the brushed metal look.

% Utility windows float above other windows and provide tools or
% controls that users can work with while documents are open. Utility
% windows (also called palettes) are discussed in more detail
% in “Utility Windows.” (page 202)

% Dialogs and alerts require a response from the user. These are
% discussed in “Dialogs.” (page 207)


The most prevalent pattern of user interface design is denoted WIMP,
which stands for Window, Icon, Menu and Pointer (i.e., mouse). The
WIMP approach was developed at Xerox PARC in the 1970's and later
popularized by the Apple Macintosh in 1984. This is particularly
evident in the separation of the window from the menubar on the Mac
desktop. Other graphical operating systems, such as Microsoft Windows,
later adapted the WIMP paradigm, and libraries of reusable GUI
components emerged to support development of applications in such
environments. Thus, GUI development in R adheres to WIMP approach.

The primary WIMP component from our perspective is the window. A
typical interface design consists of a top-level window referred to as
the \dfnref{document window} that shows the current state of a
``document'', whatever that is taken to be. In \R\/ it could be a data
frame, a command line, a function editor, a graphic or an arbitrarily
complex form containing an assortment of such elements. 

The actions that can be performed on the ``document'' are called
through another WIMP component, the menu. Abstractly, every control in
a window belongs to some menu. Two common ways of organizing controls
into menus are the menubar and toolbar.

The parameters of an action call, if any, are controlled in
sub-windows. These sub-windows are termed \dfnref{application windows}
by Apple~\citep{APPLE:HIG}, but we prefer the term \dfnref{dialogs},
or \dfnref{dialog boxes}. These terms may also refer to smaller
sub-windows that are used for alerts or confirmation. The program
often needs to wait for user input before continuing with an action,
in which case the window is modal. We refer to these as \dfnref{modal
  dialog boxes}.

Each window or dialog typically consists of numerous controls laid out
in some manner to facilitate the user interaction. Each window and
control is a type of \textit{widget}, the basic element of a
GUI. Every GUI is constituted by its widgets. Not all widgets are
directly visible by the user; for example, many GUI frameworks employ
invisible widgets to lay out the other widgets in a window.

There is a wide variety of available widget types, and widgets may be
combined in an infinite number of ways. Thus, there are often numerous
means to achieve the same goals. For example,
Figure~\ref{fig:GUI:print-dialogs} contains three dialogs that perform
the same task -- collect arguments from the user to customize the
printing of a document. Although all were designed to do the same
thing, there are many differences.

%% ML: Print dialogs might be problematic, especially with Firefox, which
%% (through GTK+) will use the platform native print dialog. On Linux,
%% there is no native dialog, so GTK+ implements one. This might not
%% be true of Firefox 2.0 specifically, but that is getting old
%% now. What about taking the print dialog from the R Windows GUI?

%% Principles of GUI layout
%% http://www.sylvantech.com/~talin/projects/ui_design.html has a nice list

\begin{figure}
  \centering
  \includegraphics[width=.60\textwidth]{fig-mac-print}
  \\
  \includegraphics[width=.60\textwidth]{firefox-print}
  \\
  \includegraphics[width=.60\textwidth]{kde-print}
  \caption{Three print dialogs. One from Mac OS X 10.6, one from
    firefox 2.0 and one from KDE 3.5.}
  \label{fig:GUI:print-dialogs}
\end{figure}

%% Choice of widget -- familiar metaphors, use of icons, 
In some cases, typical usage suggests one control over another. The
choice of printer for each is specified through a combo box. However,
for other choices a variety of widgets are employed. For example, the
control to indicate the number of copies for the Mac and Firefox
dialogs is a simple text entry window, whereas for the KDE dialog it
is a spinbutton. The latter minimizes user error, say through entering
a non-positive integer. The KDE and Mac dialogs have icons to
compactly represent actions, whereas the Firefox example has none. The
landscape icon for the Mac is very clear and provides this feature
without having to use a sub dialog.


%% Choice of layout -- positioning, focus, use of spacing, center
%% balance, vs. ...
How the interfaces are laid out also varies. All are read top to
bottom, although the Mac interface also has a very nice preview
feature on the left side. The Firefox and KDE dialogs use frames to
separate out the printer arguments from the arguments that specify how
the print job is to proceed. The Mac uses a vertical arrangement to
guide the user through this. For the Mac, horizontal separators are used instead of
frames to break up the areas, although a frame is used towards the
bottom. 

Apple uses a center balance for its controls. They are not left
justified as are the KDE and Firefox dialogs. Apple has strict
user-interface guidelines and this center balance is a design
decision. 




%% state visualization: sensitive/not; focus, not, 
The Mac GUI provides a very nice preview of the current document
indicating to the user clearly what is to be printed and how
much. Adjusting GUIs to the possible state is an important user
interface property.  GUI areas that are not currently sensitive to
user input are grayed out. For example, the ``collate'' feature of the
GUI only makes sense when multiple copies are selected, so the
designers have it grayed out until then. A common element of GUI
design is to only enable controls when their associated action is
possible, given the state of the application.

%% shortcuts -- default button, keyboard accelerators
 
The Mac GUI has the number of pages in focus, whereas Firefox places
the printer in focus. This allows the user to interact with the GUI
without the mouse. Typically the \kbd{tab} key is used to step through
the controls. GUI's often have keyboard accelerators that allow power
users to shift the focus directly to a specific widget. Examples are
found in the KDE dialog, where the underlined letters indicate the
accelerator key. Most dialogs also have a default button, which will
initiate the dialog action when the \kbd{return} key is pressed. The
KDE dialog, for example, indicates that the ``print'' button is the
default button through special shading.

%% help
For such a common dialog, it is unlikely the user will need help. As
such the Firefox dialog does not provide a link. However, the
KDE and Mac dialogs do. A dialog should provide assistance for
complex and unfamiliar tasks.

%% safety -- postion of buttons
%% ML: Do we really want to mention something that is not applicable?
The Apple human interface guidelines suggest putting buttons that can
cause the destruction of data separate from other control buttons. As
this isn't directly applicable here, we see that Apple does separate
buttons that are common to many dialogs (cancel, print) from the ones
specific to the dialog. The KDE buttons have nice icons, but their
similar, but irregular, sizing is a bit unusual.

%% feature exposure, Choice of options -- what to show, what to leave out
One of the greatest differences between these dialogs is the amount of
features they choose to expose. The Firefox dialog is minimalist
compared to the others. This is a general theme for Firefox and seems
justifiable given that printing is not a very common task for a web
browser.  The Mac GUI uses ``disclosure buttons'' to allow access to
printer properties and the PDF settings, whereas KDE uses a notebook
container to show possible options without revealing all of their
detail.




\subsection{Choice of widget}
\label{sec:choice-widget}
%% real estate, type of data

A GUI is comprised of one or more widgets. Typically these widgets
display some type of information and/or allow a user to specify some
input, often a selection from one or more possible choices. The
appropriate choice of widget varies greatly, depending on the type and
size of the information being displayed, the constraints on the user
input, and on the space available in the GUI layout. As an example, we
take the common GUI task of presenting a set of options to the
user. Table~\ref{tab:gui-design-widget-type} lists several different
types of widgets used for this purpose.
  
<<echo=FALSE, results=tex>>=
df <- rbind(
            c("Boolean","Checkbox",""),
            c("Small list","radiogroup\\newline combobox\\newline list box","checkboxgroup\\newline list box"),
            c("Moderate list","combobox\\newline list box","list box"),
            c("Large list","list box","list box"),
            c("Sequential","slider\\ spinbutton",""),
            c("Tabular","table","table"),
            c("Heirarchical","tree","tree")
            )
colnames(df) <- c("Type of data","Single","Multiple")
cat(booktabs(df,
             colTypes=c("l","p{0.35\\textwidth}","p{0.35\\textwidth}"),
             caption="Table of possible selection widgets by data type and size",
             label="tab:gui-design-widget-type"))
@ 


Figure~\ref{fig:GUI:spss-11-term-selection} shows several such
controls in a single GUI. A checkbox enables an intercept,
a radio group selects either full factorial or a custom
model, a combobox selects the ``sum of squares'' type, and a
list box allows for multiple selection from the available
variables in the data set. 



\begin{figure}
  \centering
  \includegraphics[width=.65\textwidth]{spss-11-model-selection}
 \caption{A dialog box from SPSS version 11 for specifying terms
    for a linear model. The graphic shows a dialog that allows
    the user to specify individual terms in the model  using
    several types of widgets for selection of values, such as a radio
    group, a checkbox, combo boxes, and list boxes. }
  \label{fig:GUI:spss-11-term-selection}
\end{figure}

%% Metaphors, user base
For many \R\/ object types there are natural choices of widget. For
example, values from a sequence map naturally to a slider or spin
button; a data frame maps naturally to a table widget; or a list with
similar structure can map naturally to a tree widget. However, certain
\R\/ types have less common metaphors. For instance, a formula object
can be fairly complex. Figure~\ref{fig:GUI:spss-11-term-selection}
shows an SPSS dialog to build terms in a model. \R\/ power users may
be much faster specifying the formula through a text entry box, but
beginning \R\/ users coming to grips with the command line and the
concept of a formula may benefit from the assistance of a well
designed GUI. One might desire an interface that balances the needs of
both types of user, or the SPSS interface may be appropriate. Knowing
the potential user base is important.





