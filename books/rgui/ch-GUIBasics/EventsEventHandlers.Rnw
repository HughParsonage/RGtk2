%% Describe events, signals, event handlers
%% chain of how things are called


\subsection{Event loops}
\label{sec:GUI:event-loops}

The read-parse-evaluate loop (RPEL) describes the basic interactive
\R\/ session. \R\/ reads in commands from the command line or a file,
then these commands are parsed and then evaluated. For command line
usage, this loop is natural. We enter a command, press \kbd{enter} and
then wait for the output. Lather. Rinse. Repeat. 

For GUIs we expect a different behaviour. The GUI somehow sits idle,
separate from the command line, and should only enter into the above
loop when the user intiates some action, such as clicking on a
button. Modal dialog boxes, such as file selectors, are an exception
to this, there the \R\/ command loop is halted while it awaits the
choice of file, but for the most part, a GUI should be out of the way
unless summoned.

To achieve this behaviour, the developers of the GUI packages have
to accomodate the underlying event loops. Unfortunately, this is not a
trivial matter, as there are different event loops for the different
operating systems and the different toolkits. This can cause
issues. For example, using \R\/ under Mac OS X has different event
loop behaviour if used from within the GUI or from the command line;
under Windows the \pkg{tcltk} and the \pkg{RGtk2} event loops are
reported to not co-exist peacable; under Linux, the \pkg{RGtk2} event
loop doesn't allow for tooltips to pop up. However, these things are
minor, compared to the ability to create GUIs within \R.


\subsection{Signals}
\label{sec:GUI:signals}
\XXX{Write me}

\subsection{Event handlers}
\label{sec:GUI:event-handlers}
\XXX{Write me}

\subsection{Drag and Drop}
\label{sec:GUI:dnd}
\XXX{Write me}

%% drop source; drop target
