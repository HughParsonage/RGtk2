%% Containers

%%% FIXME: move to \paragraph{} instead of \subsubsection{}?

%% ML: Layout management is orthogonal to the type of container. This
%% is made obvious in the design of Swing and Qt: there is a separate
%% class hierarchy for layout managers, which are assigned to
%% container widgets. The container could be invisible or provide an
%% interface around its children, as with a frame, notebook or top-level
%% window. Thus, in Qt, a frame container could lay out its children
%% as a box, a grid, etc. I suggest discussing container types first,
%% and then discuss layout management policies, explaining that some
%% toolkits have widgets specific to a particular policy (and so
%% require a lot of nesting), while in others any container type is
%% capable of any type of layout.


%% JV: good point. 
% Widgets are arranged in a window to produce a GUI. Container widgets
% manage the layout. The simplest containers are like boxes
% that get packed in left to right or top to bottom. These boxes may be
% decorated with a frame or label, or may have some means of being
% hidden or displayed by the user. The nesting of box containers can
% provide a great deal of flexibility, but usually not
% enough. An example of a more flexible layout strategy is to position
% widgets on a grid.

%% Widget Hierarchy

The KDE print dialog of Figure~\ref{fig:GUI:print-dialogs} contains
many of the widgets we discussed in the previous section. Before we
can create such a dialog, we need to introduce how to position widgets
on the screen. This process is called \textit{widget layout}.

\ilayout{widget hierarchy}
A layout emerges from the organization of the widgets into a
hierarchy, where a parent widget positions its children within its
allocated space.  The top-level window is parentless and forms the
root of the hierarchy. A parent visually contains its children and
thus is usually called a \defn{container}. This design is natural,
because almost every GUI has a hierarchical layout. It is easy to
apply a different layout strategy to each region of a GUI, and when a
parent is added or removed from the GUI, so are its children.

It is sometimes tempting for novices to simply assign a fixed position
and dimensions for every widget in a GUI. However, such static layouts
do not scale well to changes in the state of the application or simply
changes to the window size dictated by the window manager. Thus, it is
strongly encouraged to delegate the responsibility of layout to a
\defn{layout manager} that dynamically calculates the layout as
constraints change. Depending on the toolkit, the layout manager might
be the container itself, or it might be a separate object to which the
container delegates.

Regardless, the type of layout is generally orthogonal to the type of
container. For example, a container might draw a border around its
children, and this would be independent of how its children are laid
out.  The rest of this section is divided into two parts: container
widgets and layout algorithms. We will continually refer back to the
KDE print dialog example as we proceed.

% The Apple guidelines\footcite[Ch. 15]{APPLE:HIG} suggest using ``center
% equalization'' for arranging widgets within a window. This means that
% the visual weight is balanced between the right and left side of the
% content area. This is not the case with the KDE print dialog.

\subsection{Containers}
\label{sec:containers}

\subsubsection{Top level windows}
\label{sec:GUI:top-level-windows}

The top-level window of a GUI is the root of the container
hierarchy. All other widgets are contained within it.  The
conventional main application window will consist of a menubar, a
tool bar and a status bar. The primary content of the window is
inserted between the tool bar and the status bar, in an area known as
the \dfnref{client area} or \dfnref{content area}. In the case of a
dialog, the content usually appears above a row of buttons, each of
which represent a possible response. The print dialog conforms to the
dialog convention. The print options fill the content area, and there
is a row of buttons at the bottom for issuing a response, such as
``Print''.

A window is typically decorated with a title and buttons to iconify,
maximize, or close. In the case of the print dialog, the top-level
window is entitled ``Print -- KPDF.''. Besides the text of the title,
the decorations are generally the domain of the window manager (often
part of the operating system). The application controls the contents
of the window.

Once a window is shown, its dimensions are managed by the user,
through the window manager. Thus, the programmer must size the window
before it becomes visible. This is often referred to as the
``default'' size of the window. Positioning of a top-level window is
generally left to the window manager.

The top-level window forwards window manager events to the
application. For example, an application might listen to the window
close event in order to prompt a user if there are any unsaved changes
to a document.

% Table~\ref{tab:GUI:containers-constructors} lists them
% together and provides the constructor name for the different toolkits
% discussed in this book.

\subsubsection{Tabbed notebooks}
\label{sec:GUI:notebooks}

A notebook widget depicts each child as if it were a page in a 
notebook. A
page is selected by clicking on a button that appears as a tab. Only a
single child is shown at once. The tabbed notebook is a space
efficient, categorizing container that is most appropriate when a user
is only interested in one page at a time. Modern web browsers take
advantage of it to allow several web pages to be open at once within
the same window. In the KDE print dialog, detailed options are
collapsed into a notebook in order to save space and organize the
multitude of options into simple categories: ``Copies'', ``Advanced
Options'', and ``Additional Tags''.

% %% A table showing the values and constructors
% %% Make changes to gnumeric spreadsheet, export
% {\small
% \newcommand{\PARASIZE}{1.25in}
% \begin{landscape}
%   \begin{table}
%     \centering
%     \caption{A table listing several containers with a constructor for the
%     different toolkits discussed in the text.}
%     \begin{tabular}{lp{\PARASIZE}@{\quad}p{\PARASIZE}@{\quad}p{\PARASIZE}@{\quad}p{\PARASIZE}@{\quad}p{\PARASIZE}@{\quad}c}
%       Widget & \code{gWidgets} & \code{RGtk2} & \code{RwxWidgets} &
%       \code{tcltk} & \code{rJava} &\\
%       \hline
%       \SweaveInput{containers-constructors}
%     \end{tabular}
%     \label{tab:GUI:containers-constructors}
%   \end{table}
% \end{landscape}
% }

\subsubsection{Frames}
\label{sec:GUI:frames}

A frame is a simple container that draws a border, possibly with a
label, around its child. The purpose of a frame is to enhance
comprehension of a GUI by visually distinguishing one group of
components from the others. The displayed page of the notebook in
Figure~\ref{fig:GUI:print-dialogs} contains two frames, visually
grouping widgets by their function: either \code{Page Selection}
or \code{Output Settings}.

\subsubsection{Expanding boxes}
\label{sec:GUI:expanding-boxes}

An expanding container, or box, will show or hide its children, according to the
state of a toggle button. By way of analogy, radio buttons are to
notebooks as check buttons are to expanding containers. An expanding box
allows the user to adapt a GUI to a particular use case or mode of
operation. Often, an expanding box contains so-called ``advanced''
widgets that are only occasionally useful and are only of interest to
a small subset of the users. For example, the \code{Options} button in
Figure~\ref{fig:GUI:print-dialogs} controls an expanding box that
contains the print options, which are usually best left to their
defaults.

\subsubsection{Paned boxes}
\label{sec:GUI:paned-boxes}

Usually, a layout manager allocates screen space to widgets, but
sometimes the user needs to adapt the allocation, according to a
present need. For example, the user may wish to increase the size of
an image to see the fine details. The \dfnref{paned container}
supports this by juxtaposing panes, either vertically (stacked) or
horizontally. The area separating the panes, sometimes called a
\dfnref{sash}, can be adjusted by the user with the mouse.
   
\subsection{Layout algorithms}
\label{sec:GUI:layout}

\subsubsection{Box layout}
\label{sec:GUI:Box-containers}

\ilayout{box layout}The box layout is the most common type of layout algorithm for
positioning child components. A box will pack its children either
horizontally or vertically\footnote{The \code{pack} command of
  \pkg{tcltk} can mix the two directions}. Usually, the widgets are
packed from left to right, for horizontal boxes, or from top to
bottom, in the case of a vertical box.  The upper left figure in
Figure~\ref{fig:GUI:box-possibilities} illustrates these possibilities.

\ilayout{resizing}The box layout needs to allocate space to its children in both the
vertical and horizontal directions. The typical box layout algorithm
begins by satisfying the minimum size requirements of its
children. The box may need to request more space for itself in order
to meet the requirements. 

Once the minimum requirements are satisfied, it is conventional and
usually desirable for the widgets to fill the space in the direction
orthogonal to the packing. For example, widgets in a horizontal box
will fill all of their vertical space (the upper right graphic in
Figure~\ref{fig:GUI:box-possibilities} shows some fill
possibilities). When this is not desired, most box widgets support
different ways of vertically (or horizontally) aligning the widgets
(the lower left graphic in Figure~\ref{fig:GUI:box-possibilities}).

More complex logic is involved in the allocation of space in the
direction of packing. Any available space after meeting minimum
requirements needs to be either allocated to the children or left
empty. This depends on whether any children are set to expand. The
available space will be distributed evenly to all expanding
children. Each child may fill that space or leave it empty. The
non-expanding children are simply packed against their
side of the container. If there are no expanding children, the
remaining space is left empty in the middle (or end if there are no
widgets packed against the other side). See the lower right
panel in Figure~\ref{fig:GUI:box-possibilities}. One could think
of this space being occupied by an invisible \ilayout{spring}spring. Invisible
expanding widgets also act as springs.

<<echo=FALSE, results=hide>>=
## code to make figure
library(tcltk)
bw <- 1
fm <- function(parent, expand=TRUE) {
  f <- ttkframe(parent, padding=2)
  tkconfigure(f, borderwidth=bw, relief="solid")
  tkpack(f, expand=expand, fill="both", side="left", padx=2)
  f
}
tl <- function(parent, txt, ...) {
  l <- ttklabel(parent, text=txt, borderwidth=bw+2, relief="solid")
  tkpack(l, ...)
}

w <- tktoplevel()
tkwm.title(w, "Horizontal, vertical packing")
f <- ttkframe(w, padding=2); tkpack(f, expand=TRUE, fill="both")

f1 <- fm(f)
tl(f1, "  1  ", expand=TRUE, fill="x", side="left")
tl(f1, "  2  ", expand=FALSE, fill="y", side="left")
tl(f1, "  3  ", expand=TRUE, fill="x", side="left")

f1 <- fm(f)
tl(f1, "  1  ", expand=TRUE, fill="y")
tl(f1, "  2  ", expand=FALSE, fill="x")
tl(f1, "  3  ", expand=TRUE, fill="y")
tkwm.geometry(w, "300x200")

w <- tktoplevel()
tkwm.title(w, "Alignment")
f <- ttkframe(w, padding=2); tkpack(f, expand=TRUE, fill="both")

f1 <- fm(f)
tl(f1, "  NE  ", expand=TRUE, anchor="ne", side="left")
f1 <- fm(f)
tl(f1, "  SW  ", expand=TRUE, anchor="sw", side="left")

f1 <- fm(f)
tl(f1, "  W  ", expand=TRUE, anchor="w", side="left")
tkwm.geometry(w, "300x200")

##

w <- tktoplevel()
tkwm.title(w, "Fill")
f <- ttkframe(w, padding=2); tkpack(f, expand=TRUE, fill="both")


f1 <- fm(f)
tl(f1, "  x  " , expand=TRUE, fill="x")


f1 <- fm(f)
tl(f1, "  y  ", expand=TRUE, fill="y")

f1 <- fm(f)
tl(f1, "  both  ", expand=TRUE, fill="both")
tkwm.geometry(w, "300x200")

##

w <- tktoplevel()
tkwm.title(w, "Spring")
f <- ttkframe(w, padding=4); tkpack(f, expand=TRUE, fill="both")

f <- fm(f)
tl(f, "  1  ", side="left")
tl(f, "  2  ", side="left", padx=10)
tkpack(ttklabel(f, text=" "), expand=TRUE, fill="both", side="left")
tl(f, "  3  ", side="left")

tkwm.geometry(w, "300x200")

@ 

\begin{figure}
  \centering
  \includegraphics[width=.40\textwidth]{fig-basics-hor-ver}
  \includegraphics[width=.40\textwidth]{fig-basics-fill}\\
  \includegraphics[width=.40\textwidth]{fig-basics-alignment}
  \includegraphics[width=.40\textwidth]{fig-basics-spring}
  \caption{
   %% 
    Different possibilities for packing child components within
    a box. 
    %% 
    The upper left shows horizontal and vertical layout.
    %% 
    The upper right shows some possible alignments or anchorings.
    %% 
    The lower left shows that a child could ``expand'' to fill the space
    either horizontally, vertically, or both.
    %% 
    The lower right shows both a fixed amount of space between the
    children and an expanding spring between the child components.  }
  \label{fig:GUI:box-possibilities}
\end{figure}

The button box in the KDE print dialog shows five buttons as child
components. At first glance the sizing appears to show that each
button is drawn to fully show its label with some fixed space placed
between the buttons. If the dialog is expanded, it is seen that there
is a spring between the 3rd and 4th buttons, so that the first 3 are
aligned with the left side of the window and the last two the right
side.

\subsubsection{Grid layout}
\label{sec:GUI:grid-layout}

The box layout algorithm only aligns its children along a single
dimension. The horizontal box, for example, vertically aligns its
children. Nevertheless, nesting permits the construction of complex
layouts using only simple boxes. However, it is sometimes desirable to
align widgets in both dimensions, i.e., to lay them out on a
\ilayout{grid layout}grid. The
most flexible grid layout algorithms allow non-regular sizing of rows
and columns, as well as the ability for a widget to span multiple
cells. Usually, a widget fills the cells allocated to it, but if this
is not possible, it may be anchored at a specific point within its
cell. 

The widgets in the ``Printer'' frame of
Figure~\ref{fig:GUI:box-possibilities} are subject to a grid layout
with five columns and six rows. The first row begins with the
``Name:'' label, and each widget in that row occupy a separate
column. This exposes the size of each column. The first column has
only labels, with text justified to the left.  The labels are aligned
horizontally to each other and vertically with the adjacent field.
