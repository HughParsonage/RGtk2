This section provides an overview of many common controls, i.e.,
widgets that display some information and possibly accept user input.

% ML: From the WIMP perspective, the GUI is really a means for
% executing commands, in other words, performing actions. Thus, the
% interface needs a way to prompt the user with choices, display
% enough data for the user to make an informed decision, and finally
% provide a means for the user to execute the action. I think this
% section is organized well for that, but it sort of short-changes the
% role of widgets in data communication/visualization. Tables, for
% example, can be useful even without selection, yet they are stuck
% into the Selection section. The "Display of Information" is kind of
% a let-down, because it only discusses static widgets.

%% JV: Maybe putting tables and trees in a separate category from selection?

% ML: We should probably cutback on the number of references to
% particular toolkit behaviors, given that each already has its own chapter.

%% JV: Good point.
\subsection{Selection}
\label{sec:GUI:basic-selection}

A common task for a GUI is the selection of a value. In the context of
\R\/, there are many different types of values the user may need to
select. For example, selecting a data frame from a list of data
frames, selecting a variable in a data frame, selecting certain cases
in a data frame, selecting a logical value for a function argument,
selecting a numeric value for a confidence level or selecting a string
to specify an alternative hypothesis. Clearly there can be no
one-size-fits-all widget to handle the selection of a value. We
describe some standard selection widgets next. 


% XXX REDO FIGURE
% \begin{figure}
%   \centering
%   \includegraphics[width=.45\textwidth]{spss-11-model-selection}
%   \includegraphics[width=.45\textwidth]{spss-11-one-way-anova}
%   \caption{Two dialog boxes from SPSS version 11 for specifying terms
%     for a linear model. The left graphic shows a dialog that allows
%     the user to specify individual terms in the model. This uses
%     several types of widgets for selection of values, such as a radio
%     group, a checkbox, combo boxes, and list boxes. The right graphic
%     shows a dialog that allows the user to specify response variables
%     and a grouping variable for a one-way ANOVA.}
%   \label{fig:GUI:spss-11-model-selection}
% \end{figure}

\subsubsection{Checkboxes}
\label{sec:GUI:checkboxes}

A \dfn{checkbox} allows the user to select a logical value for a
variable. Checkboxes have labels to indicate which variable is being
selected. Combining multiple checkboxes into a group
allows for the selection of one or more values at a time.  

% ML: how are checkbox groups "linked"?
%% JV: gone,

\subsubsection{Radio Button Groups}
\label{sec:GUI:radio=button-groups}

A \dfn{radio button group} allows a user to select exactly one value from a
vector of possible values. The analogy dates back to old car radios
where there were a handful of buttons to press to select a preset channel. When a new
button was pushed in, the old button popped up. This safety feature
allowed drivers to keep their eyes on the road.
Radio button groups are useful, provided there are not too many values to choose from, as
all the values are shown. These values can be arranged in a row, a
column or rows and columns to better use screen space.

%% tcltk examples
\begin{figure}
  \centering
  \includegraphics[width=.35\textwidth]{ex-listbox}
  \includegraphics[width=.35\textwidth]{tcltk-tkdensity}
  \caption{
    Two applications of the \pkg{tcltk} package. 
    %%
    The left graphic is
    produced by \command{chooseCRANmirror} and uses a list box to
    allow selection from a long list of possibiulities.
    %% 
    The right graphic is the \code{tkdensity} demo from the
    package. It uses radio buttons and a slider to select the
    parameter values for a density plot.
  }
  \label{fig:GUI:ex-tcltk}
\end{figure}

\subsubsection{Sliders and spinbuttons}
\label{sec:GUI:sliders}

A \dfn{slider} is a widget that allows the selection of a value from a
sequence of possible values (typically) through the manipulation of a
knob that can visually range over the possible values. Some toolkits
(e.g. Java/Swing) only allow for the sequence to have integer values. The
slider is a good choice for offering the user a selection of parameter
values. The \code{tkdensity} demo of the \pkg{tcltk} package
(Figure~\ref{fig:GUI:ex-tcltk}) uses a slider to dynamically adjust the
bandwith of a density estimate.


A \dfn{spin button} also allows the user to specify a value from a
possible sequence of values. Typically, this widget is is drawn with a
text box displaying the current value and two arrows to increment or
decrement the selection. The text box can usually be edited. Some
toolkits allow the sequence to be a more general than a numeric
sequence. A spin button has the advantage of using less screen space,
but is less usable if the sequence is long, although often the user
can enter in the choice using the keyboard. A spin button is used in
the KDE print dialog of Figure~\ref{fig:GUI:print-dialogs} to adjust
the number of copies.


\subsubsection{Popup menus and Combo boxes}
\label{sec:GUI:combo-boxes}

A \dfn{combo box} is a widget that allows the selection of one of
several fixed values, while displaying just the currently selected
one. Comboboxes may also offer the user the ability to specify a
value, in which case they are combined with a text entry area. 
From a screen-space perspective, they can
efficiently allow the selection of a value from many values, although
a choice from too many values can be annoying to the user, as anyone
who has had to select their country out of over 100 in a web form can
attest.

% ML: I think a popup menu is more general; it's just a window that
% pops up when the user performs an action, like a right
% click. Perhaps the term here is 'drop-down box'.

% JV: I'm going to be like Qt and just call them both comboboxes

\subsubsection{List boxes}

A \dfn{list box} is a widget that displays in a column the list of
possible choices. A scrollbar is used when the list is too long to
show in the allocated space. Some toolkits have list boxes that allow
the values to spread out over several columns. Selection typically
occurs with a right mouse click or through the keyboad, whereas a
double-click will typically be programmed to initiate some
action. Unlike comboboxes, List boxes can be used for multiple
selection. This is typically done by holding down either the
\kbd{shift} or \kbd{ctrl} keys. Figure~\ref{fig:GUI:ex-tcltk} shows a
list box created by \R\/ that is called from the function
\command{chooseCRANmirror}.

%List boxes are a good alternative to drop lists when the number of
%selections gets bigger than 30. Additionally, 

% ML: what is the rationale for > 30 selections? Drop lists are
% essentially like a list box in that regard.
% JV: I guess personal preference. I took it out.

% Some toolkits allow widgets to be placed next to the entries, such as
% checkboxes or icons. The right-most graphic in
% Figure~\ref{fig:GUI:spss-11-model-selection} shows how SPSS places an icon
% indicating the type of variable next to the variable name in a list
% box, to aid in selection of the proper type of variable.



\subsection{Working with tabular and heirarchical data}
\label{sec:GUI:tabular-display}

Two of the most data rich controls are those to display and
interact with tabular and heiarchical data.

%% JV: Need to include filtering example here

\subsubsection{Tabular display}

A \dfn{table widget} shows tabular data, such as a data frame, where
each column has a specific data type and cell rendering strategy.
Table widgets may be used to display and select tabular data, or may
also allow the user to edit the
data.  Figure~\ref{fig:GUI:spotfire} shows a table widget being used
in a Spotfire web player demonstration to
display the cases that a user selects through the filtering controls.


\begin{figure}
  \centering
  \includegraphics[width=0.8\textwidth]{fig-spotfire}
  \caption{A screen shot from Tibco's Spotfire web player illustrating a table widget (lower left) being used to display the selected cases that are summarized in the graphic. The right bar provides a means to filter the cases under consideration.}
  \label{fig:GUI:spotfire}
\end{figure}


% \begin{figure}
%   \centering
% %%  \includegraphics[width=.4\textwidth]{JGR-data-editor}
%   \includegraphics[width=.55\textwidth]{fathom-2-1-xyplot}
%   \caption{
%     Two windows showing the use of table widgets.
%     %%
    
% %     The left graphic shows the data editor from \pkg{JGR} using the
% %     table widget in Java.  
%     %%
%     The right graphic shows a data table and a graph in Fathom 2.1
%     with two views of the same data. One view uses a table widget, the
%     other a graph. Changes to one or the other views cause an update
%     to the underlying model. This model then will notify its various
%     displays to update. This arrangement allows for dynamic linking of
%     the table and the graph.}
%   \label{fig:GUI:table-widgets}
% \end{figure}

\subsubsection{Tree widgets}
\label{sec:GUI:tree-widgets}

So far, we have seen how list boxes display homogeneous vectors of
data, and how table widgets display tabular data, like that in a data
frame. Other widgets support the display of more complex data
structures. If the data has a heirarchical structure, then a \dfn{tree
  widget} may be appropriate for its display. Examples of heirarchical
data in \R, are directory structures, the components of a list, or
class hierarchies. The object browser in \pkg{JGR} uses a tree
widget to show the components of the objects in a users session (the
left graphic of Figure~\ref{fig:GUI:R-guis-exs-JGR-Rcmdr}). The root
node of the tree is the ``data'' folder, and each data object in the
global workspace is treated as an offspring of this root node. For the
data frame \code{iraq}, its variables are considered as offspring of
the data frame. In this case these variables have no further
offspring, as indicated by the ``page'' icon.


\subsection{Inititiating an action}

After the user has specified the parameters of an action, typically
through the selection widgets presented above, it comes time to
execute the action. Widgets that execute actions include the familiar
buttons, menubars and toolbars.


\subsubsection{Buttons}
\label{sec:GUI:buttons}

A \dfn{button} is typically used to give the user a place to click the
mouse in order to initiate some immediate action. The ``Properties''
button, when clicked, opens a dialog for setting printer
properties. The button with the wizard icon also opens a dialog.  As
buttons typically lead to an action, they often are labeled with a
verb.~\citep{APPLE:HIG} In Figure~\ref{fig:GUI:spss-11-term-selection}
we see how SPSS uses buttons in its dialogs: buttons which are not
valid in the current state are disabled; buttons which are designed to open
subsequent dialogs have trailing dots; and the standard actions of
resetting the data, canceling the dialog or requesting help are given
their own buttons on the right edge of the dialog box.  

To speed the user through a dialog, a button may be singled out as the
default button, so its action will be called if the user presses the
\kbd{return} key. As well, buttons may be given accelerator key
bindings, so as their actions are accesible by typing the proper key
combination. The KDE print dialog in
Figure~\ref{fig:GUI:print-dialogs} has these bindings indicated
through the underlined letter on the button label's.

%% ML: besides the accelerator comment, the below might be too much detail
%% JV: I'll leave it for the toolkit chapters if appropriate.
%% adjustments
% The look of the button can usually be manipulated.  A button is given
% a relief through its border, shading, and perhaps a color gradient
% along its face. Some toolkits allow these to be optionally drawn,
% thereby making a button look more like a label, as described below.
% The button text may have some markup or an indication of a accelerator
% keyboard binding, such as the \text{\underline{C}ontrasts...} button
% in the dialog shown in the right graphic of
% Figure~\ref{fig:GUI:spss-11-model-selection}.

\subsubsection{Icons}
\label{sec:GUI:icons}

In the WIMP paradigm, an \dfn{icon} is a pictorial representation of a
resource, such as a document or program, or, more generally, a
concept, such as a type of file. An application GUI typically adopts
the more general definition, where an icon is used to augment or
replace a text label on a button, a toolbar, in a list box, etc. When
icons are used on toolbars and buttons, they are associated with
actions, so the icons should have some visual implication of an
action.  Well chosen icons make a big visual difference in a GUI.

% ML: too much detail?
% JV: agreed
% Except for the default installation of \pkg{tcltk}, images and icons
% may be specified in a variety of different formats.  Icons can come in
% several different sizes from 16 by 16 pixels to 128 by 128. For
% toolbars and menubars, the toolkit takes care of selecting the
% appropriate icon.


\subsubsection{Menubars}
\label{sec:GUI:menubars}

Xerox Parc's revolutionary idea of a \acronym{WIMP} GUI added windows,
icons, menubars, and pointing devices to the desktop computing
environment. The central role of menu bars has not diminished. For a
GUI, the \dfn{menubar} gives access to the full range of functionality
available. Each common action should have a corresponding menu
item. Menubars are traditionally associated with a top-level
window. This is enforced by the toolkit in \wxWidgets\/ and \Java\/
but not \tcltk\/ and \GTK.  In Mac OS X, the menubar appears on the
top line of the display, but otherwise they typically appear at the
top of the main window. In most modern applications, standard
document-based design is used to organize a GUI and its actions, with
a main window showing the document and its menu bar calling actions on
the document, some of which may need to open subsequent application
windows or dialogs for gathering additional user input.  In this
model, only the main window has a menu bar, not the application
windows or dialogs. In a statistics application, the ``document'' may
be viewed as the active data frame, a report, or a graphic.

The styles used for menubars are fairly standardized, as this allows
new users to quickly orient themselves with a GUI. The visible menu
names are often in the order \code{File}, \code{Edit}, \code{View},
\code{Tools}, then application specific menus, and finally a
\code{Help} menu. Each visible menu item when clicked opens a menu of
possible actions. The text for these actions traditionally use a
\code{...}  to indicate that a subsequent dialog will open so that
more information can be gathered to complete the action, as opposed to
some immediate action being taken. The text may also indicate a
key-board accelerator, such as \code{Find \underline{N}ext F3}
indicating that both ``N'' as a keyboard accelerator and F3 as a
shortcut will initiate this same action.

Not all actions will be applicable at any given time. It is
recommended that rather than deleting these menu items, they be
disabled, or greyed out, instead. %%~\ref{KDE:HIG}

Menus can get very long. To help the user navigate, menu items are usually
grouped together, first by being under the appropriate menu title,
then with either horizontal separators to define subsequent groupings,
or hierarchical submenus. The latter are indicated with an
arrow. Several different levels are possible, but navigating through
too many can be tedious.

The use of menus has evolved to also allow the user to set properties
or attributes of current state of the GUI. There may be checkboxes
drawn next to the menu item or some icon indicating the current state.

Another use of menus is to bind contextual menus (popup menus) to
certain mouse clicks on GUI elements. Typically right mouse clicks
will pop up a menu that lists often-used commands that are appropriate
for that widget and the current state of the GUI. In Mac OS X
one-button users, these menus are bound to a \kbd{control}-click.

\subsubsection{Toolbars}
\label{sec:GUI:toolbars}

Toolbars are used to give immediate access to the frequently used actions
defined in the menubar. Toolbars typically have icons representing the
action and perhaps accompanying text. They traditionally appear on the
top of a window, but sometimes are used along the edges. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\subsection{Displaying and editing text}
\label{sec:GUI:text-widgets}

As much as possible, WIMP GUIs are designed around using the pointing
device to select values for user input. Perhaps this is because it is
difficult to both type and move the mouse at the same time. For
statistical GUIs, especially for \R\/ with its powerful command line,
the flexibity afforded by arbitrary text entry is essential for any
moderately complex GUI. There is a distinction made between widgets
for handling just single lines versus multiple lines of text.

\subsubsection{Single line text}
\label{sec:GUI:single-line-text}

A text entry widget for editing a single line of text is used in the
KDE print dialog (Figure~\ref{fig:GUI:print-dialogs}) to specify
the page range. As range's can be complex to specify, the command line
has an advantage. A disadvantage of using this type of widget is the need to
validate the user's input, as the input must conform to some specfication.

\subsubsection{Text edit boxes}
\label{sec:GUI:textboxes}

Multi-line text entry areas are used in many GUIs. The right graphic
of Figure~\ref{fig:GUI:R-guis-exs-JGR-Rcmdr} shows a text entry area
used by \pkg{Rcmdr} to enter in \R\/ commands; to show the output of
\R\/ commands and to provide a message area (in lieu of a status
bar). The ``Output Window'' shows that text may have formatting
attributes applied to it. In this case the color of the commands
differs from that of the output. This is accomplished by specifying
text-changing attributes to different portions of the text. The
difficulty is that when the text widget is changed, these positions
must also reflect the change. 

\begin{figure}
  \centering
  \includegraphics[width=.35\textwidth]{JGR-object-browser}
  \includegraphics[width=.5\textwidth]{Rcmdr-main-window}
  \caption{
    Some windows from \R\/ GUIs.
    %% 
    The left graphic shows the object browser in the \pkg{JGR} GUI
    using a tree widget 
    to display the possibly heirarchical nature of \R\/ objects.
    %%
    The right graphic shows the main Rcmdr (1.3-11) window
    illustrating the use of multi-line text entry areas for a command
    area, an output area and a message area.}
  \label{fig:GUI:R-guis-exs-JGR-Rcmdr}
\end{figure}


\XXX{Not needed here?}
% %% A table showing the values and constructors
% %% Make changes to gnumeric spreadsheet, export
% {\small
% \newcommand{\PARASIZE}{1.25in}
% \newcommand{\LARGEPARASIZE}{1.45in}
% \begin{landscape}
%   \begin{table}[tbp]
%     \centering
%     \begin{minipage}{1.0\textwidth}
%       \begin{tabular}{lp{\PARASIZE}@{\quad}p{\LARGEPARASIZE}@{\quad}p{\PARASIZE}@{\quad}p{\PARASIZE}@{\quad}p{\PARASIZE}@{\quad}c}
%         %%
%         Widget & \code{gWidgets} & \code{RGtk2} & \code{RwxWidgets} &
%         \code{tcltk}~\footnote{Some constructors require add-on
%           libraries, as indicated by parentheses.} & \code{rJava} &\\
%         \hline
%         \SweaveInput{widgets-constructors}
%       \end{tabular}
%     \end{minipage}
%     \caption{A table listing several common widgets with a constructor for
%       different toolkits discussed in the text.}
% \label{tab:GUI:widgets-constructors}
%   \end{table}
% \end{landscape}
% }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\subsection{Display of information}
\label{sec:GUI:info-display}

Some widgets are typically used to just display information and are
not expected to have any response to mouse clicks. These are called
static controls in \wxWidgets. 

\subsubsection{Labels}
\label{sec:GUI:labels}
%% Static Text
A label is a widget for placing text into a GUI that is typically not
intended for editing, or even selecting with a mouse. This widget is
used to label other controls, so the user understands what will happen
when that control is changed.

%% markup
A Label's text can be marked up in some toolkits. As well, regular font attributes
can be applied to the label in the other
toolkits. Figure~\ref{fig:GUI:Rcmdr-main-window} shows labels marked in
red and blue in \pkg{tcltk}.

\subsubsection{Statusbars}
\label{sec:GUI:statusbars}

A typical top-level window will have a menubar and toolbar for access
to the possible actions, an area to display the document being worked
on, and at the bottom of the window a statusbar for giving the user
immediated feedback on the actions that have been
intiated. 

\subsubsection{Progress bars}

A progress bar is used to notify how much time is left during a long
computation. They are often used during software installation. 


\subsubsection{Tooltips}
\label{sec:GUI:basic-tooltips}

A tooltip is a small window that pops up when a user hovers their mouse
over a tooltip-enabled widget. These are used to give quick feedback
on that particular widget. They can be useful for guiding new users of
a GUI and  annoying for familiar users. In \R\/ their implementation
for the toolkits can be hampered due to eventloop issues.


%% combined with modal dialogs
% \subsection{Choosers}
% \label{sec:GUI:choosers}

% Certain standard widgets are used to select values from a range
% defined by the system the user is on.


% \subsubsection{Color choosers}
% \label{sec:GUI:color-pickers}

% A color picker allows the selection of a color. 

% \subsubsection{Font choosers}
% \label{sec:GUI:font-choosers}

% A font chooser allows the selection of a font. 


\subsection{Modal dialog boxes}
\label{sec:GUI:modal-dialogs}

A \dfnref{modal dialog box} is a dialog box that keeps the focus until
the user takes an action to dismiss the box. They are used to notify
the user of some action, perhaps asking for confirmation in case the
action is destructive, such as overwriting of a file name. Modal
dialog boxes can be disruptive to a users flow, so should be used
sparingly. As the flow essentially stops until the window is
dismissed, functions that call modal dialogs can return a value when
an event occurs, rather than have a handler respond to the dismiss
event. The \command{file.choose} function, mentioned below, is a good
example. When used during an interactive \R\/ session, the user is
unable to interact with the command line until a file has been
specified and the dialog dismissed. 


\subsubsection{File choosers}
\label{sec:GUI:file-choosers}

A file chooser allows for the selection of existing files, existing
directories, or the specification of new files. They are familiar to
any user of a GUI. A typical \R\/ installation has the functions
\command{file.choose} and \command{tkchooseDirectory} (in the
\pkg{tcltk} package) to select files and directories.


Other common choosers are color choosers and font choosers.

\subsubsection{Message dialogs}
\label{sec:GUI:message-dialogs}

A \dfnref{message dialog} is a high-level dialog widget for
communicating a message to the user. Generally, it has a standard
form. There is a small rectangular box that appears in the middle of
the screen with an icon on the left and a message on the right. At the
bottom is a button to dismiss the dialog, often labeled ``OK.'' The
\dfnref{confirmation dialog} variant would add a ``cancel'' button
which invalidates the proposed action.


