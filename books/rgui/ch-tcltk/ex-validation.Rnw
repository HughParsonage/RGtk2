%% DEPREACATED...
<<echo=FALSE>>=

## Example of using validation to adjust the date
## in case a user doesn't use desired format

## Docs on validation
## VALIDATION
## The -validate, -validatecommand, and -invalidcommand options are used to enable entry widget validation.
## VALIDATION MODES
## There are two main validation modes: prevalidation, in which the -validatecommand is evaluated prior to each edit and the return value is used to determine whether to accept or reject the change; and revalidation, in which the -validatecommand is evaluated to determine whether the current value is valid.

## The -validate option determines when validation occurs; it may be set to any of the following values:

## none
##     Default. This means validation will only occur when specifically requested by the validate widget command.

## key
##     The entry will be prevalidated prior to each edit (specifically, whenever the insert or delete widget commands are called). If prevalidation fails, the edit is rejected.

## focus
##     The entry is revalidated when the entry receives or loses focus.

## focusin
##     The entry is revalidated when the entry receives focus.

## focusout
##     The entry is revalidated when the entry loses focus.

## all
##     Validation is performed for all above conditions.

## The -invalidcommand is evaluated whenever the -validatecommand returns a false value.

## The -validatecommand and -invalidcommand may modify the entry widget's value via the widget insert or delete commands, or by setting the linked -textvariable. If either does so during prevalidation, then the edit is rejected regardless of the value returned by the -validatecommand.

## If -validatecommand is empty (the default), validation always succeeds.
@ 


<<echo=FALSE, eval=FALSE>>=
## test of validation command
## tricky bit is that validation commands must return TRUE or FALSE
## we can do this with tcl("eval","FALSE") or .Tcl("expr false")

library(tcltk)
@ 

There is no native calendar widget in \pkg{tcltk}. This example shows how one can use the validation framework for entry widgets to check that user-entered dates conform to an expected format. First, we define some patterns for acceptable date formats.
<<>>=
datePatterns <- c()
for(i in list(c("%m","%d","%Y"),
              c("%m","%d","%y"))) {
  for(j in c("/","-"," ") )
      datePatterns[length(datePatterns)+1] <- paste(i,sep = "", collapse = j)
}
@ 

%% The entry widget man page has many details.
Validation happens in two phases. When a validation command is called it should check whether the current state of the entry widget is valid or not. If valid, it returns a \code{TRUE} value and \code{FALSE} otherwise. These need to be \TK\/ values, so the command \code{tcl("eval","TRUE")} (or \code{FALSE}) is used in the following for this. If the validation command returns \code{FALSE}, then a subsequent call to an invalidation command is made. Validation can happen in two modes: prevalidation where the command is evaluated prior to each edit and its return value is used to determine if to accept the change and revalidation where the validation checks if the proposed value is valid. This example will use revalidation. 

For each, a number of substitution values are possible, in addition to
the standard ones such as \code{W} to refer to the widget. These are:
\code{d} for the type of validation being done: 1 for insert
prevalidation, 0 for delete prevalidation, or -1 for revalidation;
\code{i} for the index of the string to be inserted or deleted or -1;
\code{P} for the new value if the edit is accepted (in prevalidation)
or the current value in revalidation; \code{s} for the value prior to
editing; \code{S} for the string being inserted or deleted; \code{v}
for the current value of \code{validate}; and \code{V} for the
condition that triggered the callback.  In the following callback
definition we use \code{W} so that we can change the entry text color
to black and format the data in a standard manner and \code{P} to get
the entry widget's value just prior to validations.
<<setValidDateCallback>>=
isValidDate <- function(W,P) {          #  P is the current value, W entry
  for(i in datePatterns) {
    date <- try( as.Date(P, format = i), silent = TRUE)
    if(!inherits(date, "try-error") && !is.na(date)) {
      tkconfigure(W, foreground = "black") #  consult style?
      tkdelete(W, "0", "end")
      tkinsert(W, 0, format(date, format = "%m/%d/%y"))
      return(tcl("expr", "TRUE"))
    } 
  }
  return(tcl("expr", "FALSE"))
}
@ 
The callback for when a date is invalid simply sets the text color to \code{red}. 
<<setInvalidCallback>>=
indicateInvalidDate <- function(W) {
  tkconfigure(W, foreground = "red")
  tcl("expr", "TRUE")
}
@

Now we define a simple GUI to show the entry widget.
<<>>=
w <- tktoplevel(); tkwm.title(w, "Validation of date example")
f <- ttkframe(w, padding = c(3,3,12,12)); tkpack(f, expand = TRUE, fill = "both")
tkpack(ttklabel(f, text = "Enter a date mm/dd/yy"), side = "left")
@ 

The \argument{validate}{ttkentry} argument is used to specify when the
validation command should be called. This can be a value of
\qcode{none} for validation when called through the \code{validation}
command; \qcode{key} for each key press; \qcode{focusin} for when the
widget receives the focus; \qcode{focusout} for when it loses focus;
\qcode{focus} for both the previous; and \qcode{all} for any of the
previous}. We use \qcode{focusout} below, so also give a button widget
so that the focus can be set elsewhere.

<<entryWidgetWithValidation>>=
e <- ttkentry(f, validate = "focusout",
              validatecommand = isValidDate,
              invalidcommand = indicateInvalidDate)
tkpack(e, side = "left")

b <- ttkbutton(f,text = "click")       # something to focus on
tkpack(b, side = "bottom")
@ 
              
