
This chapter covers both the standard dialogs provided by \TK\/ and
the various controls used to create custom dialogs. We begin with a
discussion of these standard dialogs, then cover the basic controls
in this chapter, leaving the next chapter for the more involved \constructor{tktext},
\constructor{ttktreeview}, and \constructor{tkcanvas} widgets.

%% Rewrite
% \Tk\/ has widgets for the common GUI controls. As mentioned in
% Chapter~\ref{sec:tcltk:overview} -- where we illustrated both buttons
% and labels -- the constructors for these widgets call the function
% \function{tkwidget} which calls the appropriate \TK\/ command and adds
% in extra information including an ID and an environment. As with
% labels and buttons, one primarily uses \function{tkconfigure} and
% \function{tkcget} to set and get properties of the widget when a
% \TCL\/ variable is not used to store the data for the widget.



\section{Dialogs}
\label{sec:tcltk:dialogs}
\SweaveInput{Dialogs}



\section{Selection widgets}
\label{sec:tcltk:selection-widgets}

This section covers the many different ways to present data for the
user to select a value. The widgets can use \TCL\/ variables to refer
to the value that is displayed or that the user selects.  Recall,
these were constructed through \function{tclVar} and manipulated
through \code{tclvalue}.  For example, a logical value can be stored as
<<>>=
value <- tclVar(TRUE)
tclvalue(value) <- FALSE
tclvalue(value)
@ 
As \code{tclvalue} coerces the logical into the  character string  \qcode{0} or \qcode{1}, some coercion may be desired.



\begin{figure}
  \centering
  \includegraphics[width=.75\textwidth]{fig-tcltk-t-test.png}
  \caption{A dialog to collect values for a $t$-test (cf.
    Example~\ref{ex-tcltk-t-test}) showing several of the selection
    widgets discussed in the section: a checkbutton, radio button,
    combo boxes, a scale widget and a spinbox.}
  \label{fig:fig-tcltk-t-test}
\end{figure}

\subsection{Checkbutton}
\label{sec:tcltk:checkboxes}

The \constructor{ttkcheckbutton} constructor returns a checkbutton
object. The checkbutton's value (\code{TRUE} or \code{FALSE}) is linked
to a \TCL\/ variable which can be specified using a logical value.
The checkbutton label can also be specified through a \TCL\/ variable
using the \option{textvariable}{ttkcheckbutton} option.  Alternately,
as with the \code{ttklabel} constructor, the label can be specified
through the \option{text}{ttkcheckbutton} option. As well, one can
specify an image and arrange its display -- as is done with
\function{ttklabel} -- using the \option{compound}{ttkcheckbutton}
option.

The \option{command}{ttkcheckbutton} argument is used at construction
time to specify a callback when the button is clicked. The callback is
called when the state toggles, so often a callback considers the state
of the widget before proceeding.  To add a callback with
\function{tkbind} use \code{\Event{ButtonRelease-1}}, as the callback
for the event \code{\Event{Button-1}} is called before the variable is
updated.

For example, if \code{frame} is a frame, we can create a new check button
with the following:
<<setup-window,echo=FALSE>>=
window <- tktoplevel(); tkwm.title(window, "Check button example")
frame <- ttkframe(window); tkpack(frame, expand = TRUE, fill = "both")
@ 

<<make-TCL-variables>>=
value_var <- tclVar(TRUE)
callback <- function() print(tclvalue(value_var))   # uses global
label_var <- tclVar("check button label")
check_button <- 
  ttkcheckbutton(frame, variable = value_var, 
                 textvariable = label_var, command = callback)
tkpack(check_button)
@ 


\paragraph{A toggle button}

By default the widget draws with a check box. Optionally the widget
can be drawn as a button, which when depressed indicates a \code{TRUE}
state. This is done by using the style \code{Toolbutton}, as in:
<<>>=
tkconfigure(check_button, style = "Toolbutton")
@ 

The ``Toolbutton'' style in general is for placing widgets into toolbars.


\paragraph{Avoiding global variables}
To avoid using a global variable is not trivial here. There is no easy
way to pass user data through to the callback, and there is no easy
way to get the \R\/ object from the values passed through the \%
substitution values. The variable holding the value can be found
through
<<>>=
tkcget(check_button, "variable" = NULL)
@ 

But then, one needs a means to lookup the variable from this id. Here is a
wrapper for the \function{tclVar} function and a lookup function that
use an environment created by the \pkg{tcltk} package in place of a
global variable.

<<ourTclVar>>=
our_tcl_var <- function(...) {
  var <- tclVar(...)
  .TkRoot$env[[as.character(var)]] <- var
  var
}
## lookup function
get_tcl_var_by_id <- function(id) {
  .TkRoot$env[[as.character(id)]]
}
@ 

Assuming we used \function{our_tcl_var} above, then the callback above
could be defined to avoid a (new) global variable by:

<<our_tcl_varExample, echo=FALSE>>=
window <- tktoplevel(); tkwm.title(window, "Check button example")
frame <- ttkframe(window); tkpack(frame, expand = TRUE, fill = "both")
value_var <- our_tcl_var(TRUE)
@

<<>>=
callback <- function(W) {
  id <- tkcget(W, "variable" = NULL)
  print(get_tcl_var_by_id(id))
}
@ 

<<echo=FALSE>>=
label_var <- tclVar("check button label")
check_button<- 
  ttkcheckbutton(frame, variable = value_var, 
                 textvariable = label_var, command = callback)
tkpack(check_button)
@ 

In Section~\ref{sec:tcltk:scale-widgets} we demonstrate how to encapsulate the widget and its
variable in a reference class so that one need not worry about scoping
rules to reference the variable. 


\subsection{Radio buttons}
\label{sec:tcltk:radio-buttons}

Radiobuttons are basically differently styled checkbuttons linked through a shared \TCL\/
variable. Each radio button is constructed through the
\constructor{ttkradiobutton} constructor. Each button has both a value and
a text label, which need not be the same. The
\option{variable}{ttkradiobutton} option refers to the
value. As with labels, the radio button labels may be specified
through a text variable or the \option{text}{ttkradiobutton} option,
in which case, as with a \code{ttklabel}, an image may also be
incorporated through the \option{image}{ttkradiobutton} and
\option{compound}{ttkradiobutton} options. In \TK\/ the placement of
the buttons is managed by the programmer.

<<radio-button-1,echo=FALSE>>=
window <- tktoplevel(); tkwm.title(window, "Radio example")
frame <- ttkframe(window, padding = c(3,3,12,12)); tkpack(frame, expand = TRUE, fill = "both")
@ 

This small example shows how radio buttons could be used for selection
of an alternative hypothesis, assuming \code{frame} is a parent container.

<<radio-button-2, results=hide>>=
values <- c("less", "greater", "two.sided")
var <- tclVar(values[3])                # initial value
callback <- function() print(tclvalue(var))
sapply(values, function(i) {
  radio_button <- ttkradiobutton(frame, variable = var, 
                                 text = i, value = i, 
                                 command = callback)
  tkpack(radio_button, side = "top", anchor = "w")
})
@ 

\subsection{Entry widgets}
\label{sec:tcltk:entry-widgets}

The \constructor{ttkentry} constructor provides a single line text
entry widget. The widget can be associated with a \TCL\/ variable at
construction to facilitate getting and setting the displayed values
through its argument \argument{textvariable}{ttkentry}. The width of
the widget can be adjusted at construction time through the
\argument{width}{ttkentry} argument. This takes a value for the number
of characters to be displayed, assuming average-width characters.  The
text alignment can be set through the \argument{justify}{ttkentry}
argument taking values of \qcode{left} (the default), \qcode{right}
and \qcode{center}. For gathering passwords, the argument
\argument{show}{ttkentry} can be used, such as with
\code{show=}\qcode{*}, to show asterisks in place of all the
characters.

The following constructs a basic example
<<entryExample,echo=FALSE>>=
window <- tktoplevel()
tkwm.title(window, "Entry widget test")
frame <- ttkframe(window, padding = c(3,3,12,12)); tkpack(frame, expand = TRUE, fill = "both")
@ 
<<entryExampleDef>>=
txt_var <- tclVar("initial value")
entry <- ttkentry(window, textvariable = txt_var)
tkpack(entry)
@ 

We can get and set values using the \TCL\/ variable.
<<>>=
tclvalue(txt_var)
tclvalue(txt_var) <- "set value"
@ 

The \code{get} command can also be used.
<<tkget>>=
tkget(entry)
@ 

\paragraph{Indices}
The entry widget uses an index to record the different positions
within the entry box. This index can be a number (0-based), an
$x$-coordinate of the value (\code{@x}), or one of the values
\qcode{end} and \qcode{insert} to refer to the end of the current text
and the insert point as set through the keyboard or mouse. The mouse
can also be used to make a selection. In this case the indices
\qcode{sel.first} and \qcode{sel.last} describe the selection.

With indices, we can insert  text with the \subcommand{insert}{ttkentry} command
<<tkinsert>>=
tkinsert(entry, "end", "new text")
@ 

Or, we can delete a range of text, in this case the first 4
characters, using \subcommand{delete}{ttkentry}:
<<>>=
tkdelete(entry, 0, 4)
@ 
%
The first value is the left most index to delete (0-based), the second
value the index to the right of the last value deleted.

The \subcommand{icursor}{ttkentry} command can be used to set the
cursor position to the specified index.
<<>>=
tkicursor(entry, 0)                         # move to beginning
@ 

Finally, we note that the selection can be adjusted using the
\subcommand{selection range}{ttkentry} subcommand. This takes two
indices. Like \code{delete}, the first index specifies the first character of
the selection, the second indicates the character to the right of the
selection boundary. The following example would select all the text.
<<>>=
tkselection.range(entry, 0, "end")
@ 
The \subcommand{selection clear}{ttkentry} subcommand clears the selection and \subcommand{selection present}{ttkentry} signals if a selection is currently made.

\paragraph{Events}
Several useful events include \code{\Event{KeyPress}} and
\code{\Event{KeyRelease}} for key presses and \code{\Event{FocusIn}}
and \code{\Event{FocusOut}} for focus events.

% The examples show a bit more about the entry widget. The first  shows how styles can be used to adjust the look of an entry widget, and the second how to validate the users data entry in an entry widget.

%% XXX This is too technical. -- put into package?
% \begin{example}{Using styles to adjust the look of an entry widget}{ex:tcltk-searchentry}
%   \SweaveInput{ex-tcltk-searchentry.Rnw}
% \end{example}


%% This is to wonky??
\begin{example}{Putting in an initial message}{ex:tcltk-entry-initial-message}
 \SweaveInput{ex-tcltk-initial-message}
\end{example}


\begin{example}{Using validation for dates}{ex:tcltk-validation-dates}
  \SweaveInput{ex-tcltk-validation}
\end{example}


\subsection{Combo boxes}
\label{sec:tcltk:comboboxes}

The \constructor{ttkcombobox} constructor returns a combo box object
allowing for selection from a list of values, or, with the appropriate
option, allowing the user to specify a value using an entry
widget. The value of the combo box can be specified using a \TCL\/
variable to the option \option{textvariable}{ttkcombobox}, making the
getting and setting of the displayed value straightforward. The
possible values to select from are specified as a character vector
through the \option{values}{ttkcombobox} option. (This may require one
to coerce the results to the desired class.)

Unlike \GTK{} and \Qt{} there is no option to include images in the
displayed text. One can adjust the alignment through the
\option{justify}{ttkcombobox} options.  By default, a user can add in
additional values through the entry widget part of the combo box. The
\option{state}{ttkcombobox} option controls this, with the default
\qcode{normal} and the value \qcode{readonly} as an alternative. For
editable combo boxes, the widget also supports some of the
\function{ttkentry} commands just discussed.


To illustrate, again suppose \code{frame} is a parent container. Then we
begin by defining some values to choose from and a \TCL\/ variable.

<<echo=FALSE>>=
window <- tktoplevel(); tkwm.title(window, "Combo box example")
frame <- ttkframe(window, padding = c(3,3,12,12))
tkpack(frame, expand = TRUE, fill = "both")
@ 

<<>>=
values <- state.name
var <- tclVar(values[1])              # initial value
@ 

The constructor call is as follows:
<<>>=
combo_box <- ttkcombobox(frame,
                         values = values,
                         textvariable = var,
                         state = "normal",     # or "readonly"
                         justify = "left")
tkpack(combo_box)
@ 


The possible values the user can select from can be configured after
construction through the \option{values}{ttkcombobox} option:
<<Combobox-set-values>>=
tkconfigure(combo_box, values = tolower(values))
@ 

There is one case where the above won't work: when there is a single
value and this value contains spaces. In this case, one can coerce the
value to be of class \class{tclObj}:
<<combobox-set-length-1, eval=FALSE>>=
tkconfigure(combo_box, values = as.tclObj("New York"))
@ 

\paragraph{Setting the value}
Setting values can be done through the \TCL\/ variable. As well, the
value can be set by value using the \subcommand{set}{ttkcombobox} sub
command through \function{tkset} or by index (0-based) using the
\subcommand{current}{ttkcombobox} sub command.

<<Combobox-set>>=
tclvalue(var) <- values[2]            # using tcl variable
tkset(combo_box, values[4])           # by value
tcl(combo_box, "current", 4)          # by index
@ 


\paragraph{Getting the value}
One can retrieve the selected object in various ways: from the \TCL\/
variable. Additionally, the \subcommand{get}{ttkcombobox} subcommand
can be used through \function{tkget}.

<<Combobox-get>>=
tclvalue(var)                           # TCL variable
tkget(combo_box)                        # get subcommand
tcl(combo_box, "current")               # 0-based index
@ 


\paragraph{Events}
The virtual event \code{\VirtualEvent{ComboboxSelected}} occurs with
selection. When the combo box may be edited, a user may expect some
action when the \kbd{return} key is pressed. This triggers a
\code{\Event{Return}} event. To bind to this event, one can do something
like the following:
<<combobox-selection-binding, echo=FALSE>>=
tkbind(combo_box, "<<ComboboxSelected>>", function() {
  print(tclvalue(var))
})
@ 

<<Combobox-binding-to-return>>=
tkbind(combo_box, "<Return>", function(W) {
  val <- tkget(W)
  cat(as.character(val), "\n")
})
@ 



% \subsection{Listboxes}
% \label{sec:tcltk:listboxes}

% The \constructor{tklistbox} is a non-themed widget that can be used
% to select from a table of values. One can do a similar thing using
% the more general tree widget provided by \function{ttktreeview}
% widget, but the listbox is more convenient to use.



\subsection{Scale widgets}
\label{sec:tcltk:scale-widgets}


\begin{figure}
  \centering
  \includegraphics[width=.5\textwidth]{fig-tcltk-slider-labels.png}
  \caption{The \code{ttk::scale} widget with labels added}
  \label{fig:tcltk-slider-labels}
\end{figure}

The \constructor{ttkscale} constructor to produce a themeable scale
(slider) control is missing\footnote{As of the version of \pkg{tcltk}
  accompanying \R{} 2.13.1}. You can define your own simply enough:
<<ttkscale>>=
ttkscale <- function(parent, ...) 
  tkwidget(parent, "ttk::scale", ...)
@ 

The orientation is set through the option \option{orient}{ttkscale}
taking values of \qcode{horizontal} (the default) or
\qcode{vertical}. For sizing the slider, the \option{length}{ttkscale}
option is available.  

To set the range, the basic options are \option{from}{ttkscale} and
\option{to}{ttkscale}. There is no \code{by} option as of \TK\/
8.5. The constructor \constructor{tkscale}, for a non-themeable slider,
has the option \option{resolution}{tkscale} to set that. Additionally,
the themeable slider does not have any label or tooltip indicating its
current value.


As a workaround, we show how to display a vector of values by sliding
through the indices and place labels at the ends of the slider to
indicate the range (Figure~\ref{fig:tcltk-slider-labels}). We write
this using an \R{} reference class.

<<ttksliderclass>>=
Slider <-
  setRefClass("TtkSlider",
     fields = c("frame", "widget", "var", "x", "FUN"),
     methods = list(
       initialize = function(parent, x, ...) {
         initFields(x = x, var = tclVar(1),
                    FUN = NULL, frame = ttkframe(parent))
         widget <<- ttkscale(frame, from = 1, to = length(x),
                             variable = var, orient = "horizontal")
         ## For this widget, the callback is passed a value 
         ## which we ignore here
         tkconfigure(widget, command = function(...) {
           if(is.function(FUN)) FUN(.self)
         })
         layout_gui()
         callSuper(...)
       },
       layout_gui = function() {         
         tkgrid(widget, row = 0, column = 0, columnspan = 3, 
                sticky = "we")
         tkgrid(ttklabel(frame, text = x[1]), 
                row = 1, column = 0)
         tkgrid(ttklabel(frame, text = x[length(x)]), 
                row = 1, column = 2)
         tkgrid.columnconfigure(frame, 1, weight = 1)
       },
       add_callback = function(FUN) FUN <<- FUN,
       get_value = function() x[as.numeric(tclvalue(var))],
       set_value = function(value) {
         "Set value. Value must be in x"
         ind <- match(value, x)
         if(!is.na(ind)) {
           var_local <- var
           tclvalue(var_local) <- ind
         }
       }
       ))
@ 

To use this, we have:
<<>>=
window <- tktoplevel()
frame <- ttkframe(window, padding = c(3,3,12,12))
tkpack(frame, expand = TRUE, fill = "both")
x <- seq(0,1,by = 0.05)
##
slider <- Slider$new(parent = window, x = x)
tkpack(slider$frame, expand = TRUE, fill = "x", anchor = "n")
##
slider$set_value(0.5)
print(slider$get_value())
@ 

As seen in the \meth{initialize} and \meth{get\_value} methods, the
\option{variable}{ttkscale} option can be used for specifying a \TCL\/
variable to record the value of the slider. This is convenient when
the variable and widget are encapsulated into a class, as
above. Otherwise the \option{value}{ttkscale} option is available.
The \function{tkget} and \function{tkset} function (using the
\subcommand{get}{ttkscale} and \subcommand{set}{ttkscale} sub
commands) can be used to get and set the value shown. They are used in
the same manner as the same-named subcommands for a combo box.

The \meth{add\_callback} method can be used to add a callback function
when the slider changes value. We set up the call to pass back in a
reference to the object, so there is no issue with finding the \TCL\/
variable to get the value.
<<use-slider-command>>=
slider$add_callback(function(obj) print(obj$get_value()))
@ 


\subsection{Spin boxes}
\label{sec:tcltk:spinboxes}

A themeable spinbox is introduced in \TK\/ version 8.5.9. However,  as of
writing, the Window libraries accompanying \R{} are 8.5.8, so we will
assume there is no themeable spinbox widget. In \TK\/ the
\code{spinbox} command produces a non-themeable spinbox. Again, there
is no direct \constructor{tkspinbox} constructor, but one can be
defined with:\footnote{One could compare the result of
  \code{tcl("info", "patchlevel")} to 8.5.9 and use
  \qcode{ttk::spinbox} if the libraries support it.}
<<tkspinbox>>=
tkspinbox <- function(parent, ...) 
    tkwidget(parent, "tk::spinbox", ...)
@ 

The non-themeable widgets have many more options than the themeable
ones, as style properties can be set on a per-widget basis. We won't
discuss those here. The spinbox can be used to select from a sequence
of numeric values or a vector of character values.


For example, the following allows a user to scroll either direction through the 50
states of the U.S.

<<>>=
window <- tktoplevel()
spin_box <- tkspinbox(window, values = state.name, wrap = TRUE)
@ 

Whereas, this invocation will allow scrolling through a numeric sequence:
<<>>=
spin_box1 <- tkspinbox(window, from = 1, to = 10, increment = 1)
@ 

<<echo=FALSE>>=
tkpack(spin_box)
tkpack(spin_box1)
@ 


The basic options to set the range for a numeric spinbox are
\option{from}{tkspinbox}, \option{to}{tkspinbox}, and
\option{increment}{tkspinbox}.  The \option{textvariable}{tkspinbox}
option can be used to link the spinbox to a \TCL\/ variable. As usual,
this allows the user to easily get and set the value
displayed. Otherwise, the \function{tkget} and \function{tkset}
functions may be used for these tasks. 

As seen, in \TK, spin boxes can also be used to select from a list of
text values. These are specified through the
\option{values}{tkspinbox} option. In the \code{state.name} example
above, we set the \option{wrap}{tkspinbox} option to \code{TRUE} so
that the values wrap around when the end is reached.
 
The option \option{state}{tkspinbox} can be used to specify whether
the user can enter values, the default of \qcode{normal}; not edit the
value, but simply select one of the given values (\qcode{readonly}),
or not select a value (\qcode{disabled}).  As with a combo box, when
the \TK\/ spinbox displays character data and is in the \qcode{normal}
state, the widget can be controlled like the entry widget of
Section~\ref{sec:tcltk:entry-widgets}.



% \begin{example}{A GUI for selecting a numeric range}{ex-tcltk-doublescale}
%   \SweaveInput{ex-tcltk-doublescale}
% \end{example}

%% Too much? It ain't pretty
\begin{example}{A GUI for \code{t.test}}{ex-tcltk-t-test}
  \SweaveInput{ex-tcltk-t-test.Rnw}
\end{example}

