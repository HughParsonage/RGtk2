In this example we show how to augment the \function{ttkentry} widget
to allow the inclusion of an initial message to direct the user. As
soon as the user focuses the entry area, say by clicking their mouse
on it, the initial message clears and the user can type in their
value.

We use an \R{} reference class for our programming, as it nicely
allows us to encapsulate the entry widget, its \TCL{} variable and the
initial message. The main properties we have are defined via

<<InitialMsg, echo=FALSE>>=
## "R5" class for ttk entry with initial message
library(tcltk)
@ 

<<>>=
setOldClass(c("tkwin", "tclVar"))
TtkEntry <- setRefClass("TtkEntry",
                        fields = list(
                          entry = "tkwin",     # entry
                          tcl_var  = "tclVar", # text variable
                          init_msg = "character"
                          ))
@ 
%

We need to indicate to the user that the initial message is not the
current text. We do so with a style. It simply sets the foreground
(text) color to gray.

<<init-msg-style>>=
.Tcl("ttk::style configure Gray.TEntry -foreground gray") 
@ 

%
Now we create methods to accomodate the initial message. We have
methods \meth{is\_init\_msg}, to compare the current text with the
initial message; and \meth{show\_init\_msg} and \meth{hide\_init\_msg}
to toggle the messages. The only novelty is using the
\argument{style}{tkconfigure} option for a themeable widget.
<<init-msg-methods>>=
TtkEntry$methods(
                 is_init_msg = function() {
                   "Is the init text showing?"
                   as.character(tclvalue(tcl_var)) == init_msg
                 },
                 hide_init_msg = function() {
                   "Hide the initial text"
                   if(is_init_msg()) {
                     tkconfigure(entry, style = "TEntry")
                     set_text("", hide = FALSE)
                   }
                 },
                 show_init_msg = function() {
                   "Show the initial text"
                   tkconfigure(entry, style = "Gray.TEntry")
                   set_text(init_msg, hide = FALSE)
                 })
@

Our accessor methods, \meth{set\_text} and \meth{get\_text}, must work around a possible initial message.
<<get-set-text>>=
TtkEntry$methods(
                 set_text = function(text, hide = TRUE) {
                   "Set text into widget"
                   if(hide) hide_init_msg()
                   tcl_var_local <- tcl_var     # avoid warning
                   tclvalue(tcl_var_local) <- text
                 },
                 get_text = function() {
                   "Get the text value"
                   if(!is_init_msg())
                     as.character(tclvalue(tcl_var))
                   else
                     ""
                 })
@
%

In the \meth{initialize} method, we will add bindings to switch between
the initial message and the entry area. We use the focus in and out
events to initiate this.
<<add-bindings>>=
TtkEntry$methods(
                 add_bindings = function() {
                   "Add focus bindings to make this work"
                   tkbind(entry, "<FocusIn>", hide_init_msg)
                   tkbind(entry, "<FocusOut>", function() {
                     if(nchar(get_text()) == 0)
                       show_init_msg()
                   })
                 })
@

Finally, our initialization method follows.
<<>>=
TtkEntry$methods(
         initialize = function(parent, text, init_msg = "", ...) {
           tcl_var <<- tclVar()
           entry <<- ttkentry(parent, textvariable = tcl_var)
           init_msg <<- init_msg
           ##
           if(missing(text))
             show_init_msg()
           else
             set_text(text)
           add_bindings()
           callSuper(...)
         })
@
%

Finally, to use this widget we call its \meth{new} method to create an
instance. The actual entry widget is kept in the \code{e} field, so we
pack in \code{widget\$entry}.
<<>>=
window <- tktoplevel()
widget <- TtkEntry$new(parent = window, 
                       init_msg = "type value here")
tkpack(widget$entry)
#
button <- ttkbutton(window, text = "focus out onto this", 
               command = function() {
                 print(widget$get_text())
               })
tkpack(button)
@ 

