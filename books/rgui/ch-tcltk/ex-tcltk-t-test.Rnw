This example illustrates how the basic widgets can be combined to make
a dialog for gathering information to run a $t$-test. A realization is shown in Figure~\ref{fig:fig-tcltk-t-test}.

\begin{figure}
  \centering
  \includegraphics[width=.75\textwidth]{fig-tcltk-t-test.png}
  \caption{A dialog to collect values for a $t$ test.}
  \label{fig:fig-tcltk-t-test}
\end{figure}

<<echo=FALSE>>=
## t.test dialog
## using basic widgets -- no entry widgets yet
library(tcltk)
@ 

<<echo=FALSE>>=
## helper functions
## not shown
getDfs <- function(envir=.GlobalEnv) {
  tmp <- ls(envir=envir)
  out <- sapply(tmp, function(i) is.data.frame(get(i, envir=envir)))
  tmp[out]
}
getNumericVars <- function(df) {
  if(missing(df))
    return(c(""))
  nms <- names(df)
  ind <- sapply(df, is.numeric)
  if(length(ind) > 0)
    nms[ind]
  else
    c("")
}
getTwoLevelFactor <- function(df) {
  if(missing(df))
    return(c(""))
  nms <- names(df)
  ind <- sapply(df, function(i) length(levels(as.factor(i))) == 2)
  if(length(ind) > 0)
    nms[ind]
  else
    c("")
}
@ 



We will use a data store to hold the values to be passed to
\code{t.test}. For the data store, we  use an environment to hold \Tcl\/ variables.

<<dataModel>>=
### Data model
e <- new.env()
e$x <- tclVar(""); e$f <- tclVar(""); e$data <- tclVar("")
e$mu <- tclVar(0); e$alternative <- tclVar("two.sided")
e$conf.level <- tclVar(95); e$var.equal <- tclVar(FALSE)
@ 


<<notShown, echo=FALSE>>=
### GUI Our standard setup
w <- tktoplevel()
tkwm.title(w, "t-test Dialog")
f <- ttkframe(w, padding=c(3,3,3,12))
tkpack(f, expand=TRUE, fill="both")
@ 

Our layout is basic. Here we pack a label frame into the window to give the dialog a nicer look.
We will use the \code{tkgrid} geometry manager below.
<<layout>>=
lf <- ttklabelframe(f, text="t.test()", padding=10)
tkpack(lf, expand=TRUE, fill="both", padx=5, pady=5)
@ 


This next function simplifies the task of adding a label.


<<tkgridHelper>>=
putLabel <- function(parent, text, row, column) {
  label <- ttklabel(parent, text=text)
  tkgrid(label, row=row, column=column, sticky="e")
}
@ 

Our first widget will be one to select a data frame. For this, a
combobox is used, although if a large number of data frames are a
possibility, a different widget may be better suited. The
\code{getDfs} function is not shown, but simply returns the names of
all data frames in the global environment. Also not shown are two
similar calls to create comboboxes \code{xCombo} and \code{fCombo}
which allow the user to specify parts of a formula.

<<>>=
putLabel(lf, "data:",0,0)
dataCombo <- ttkcombobox(lf, values=getDfs(), textvariable=e$data)
tkgrid(dataCombo, row=0, column=1, sticky="ew", padx=2)
tkfocus(dataCombo)                      # give focus
@ 

<<notShown, echo=FALSE>>=
## not shown
putLabel(lf, "x:",1,0)
xCombo <-  ttkcombobox(lf, values=getNumericVars(), textvariable=e$x)
tkgrid(xCombo, row=1, column=1, sticky="ew", padx=2)
@ 

<<notShown, echo=FALSE>>=
## not shown
putLabel(lf, "~ f:",1,2)
fCombo <-  ttkcombobox(lf, values=getTwoLevelFactor(), textvariable=e$f)
tkgrid(fCombo, row=1, column=3, sticky="ew", padx=2)
@ 

The combobox may not be the most natural widget to gather a numeric
value for the mean when the data is continuous, but at this point we
haven't quite yet discussed the \code{ttkentry} widget.
<<mu>>=
putLabel(lf, "mu:", 2, 0)
muCombo <-  ttkcombobox(lf, values=c(""), textvariable=e$mu)
tkgrid(muCombo, row=2, column=1, sticky="ew", padx=2)
@ 

The selection of an alternative hypothesis is a natural choice for a
combo box or a radio button group, but, as this alternative is
available in \pkg{tcltk}, we use a spin box with \code{wrap=TRUE}.
<<echo=FALSE>>=
ttkscale <- function(parent, ...) tkwidget(parent, "ttk::scale", ...)
tkspinbox <- function(parent, ...) tkwidget(parent, "tk::spinbox", ...)
@ 
<<>>=
putLabel(lf, "alternative:", 3, 0)
altCombo <- tkspinbox(lf, values=c("two.sided","less","greater"),
                      textvariable=e$alternative, wrap=TRUE)
tkgrid(altCombo, row=3, column=1, sticky="ew", padx=2)
@ 

Here we use two widgets to specify the confidence level. The slider
is quicker to use, but less precise than the spinbox. By sharing a
text variable, the widgets are automatically synchronized.
<<>>=
putLabel(lf, "conf.level:", 3, 2)
confFrame <- ttkframe(lf)
tkgrid(confFrame, row=3, column=3, columnspan=2, 
       sticky="ew", padx=2)
confScale <- ttkscale(confFrame, from=75, to=100, 
                     variable=e$conf.level)
tkpack(confScale, expand=TRUE, fill="y", side="left")

confSpin <- tkspinbox(confFrame, from=75, to=100, increment=1, 
                     textvariable=e$conf.level, width=5)
tkpack(confSpin, side="left")
@ 

A checkbox is used to set the binary variable for \code{var.equal}
<<>>=
putLabel(lf, "var.equal:", 4, 0)
veCheck <- ttkcheckbutton(lf, variable=e$var.equal)
tkgrid(veCheck, row=4, column=1, stick="w", padx=2)
@ 

When assigning grid weights, we don't want the labels (columns 0 and 2) to expand the same way we want the other columns to do, so we assign different weights.
<<>>=
tkgrid.columnconfigure(lf, 0, weight=1)
tkgrid.columnconfigure(lf, 1, weight=10)
tkgrid.columnconfigure(lf, 2, weight=1)
tkgrid.columnconfigure(lf, 1, weight=10)
@ 

The dialog has two control buttons we wish to include.
<<>>=
bf <- ttkframe(f)
tkpack(bf, fill="x", padx=5, pady=5)

cancel <- ttkbutton(bf, text="cancel", command=function() {
  tkdestroy(w)
})
ok <- ttkbutton(bf, text="ok")

tkpack(ttklabel(bf, text=" "), expand=TRUE, fill="y", 
       side="left")                     # add a spring
tkpack(cancel, padx=6, side="left")
tkpack(ok, padx=6, side="left")
@ 

For the \code{ok} button we want to gather the values and run the
function. The following callback does this. We add it to the button,
then make a binding to invoke either of the buttons commands when they
have the focus and \kbd{return} is pressed. (The widgets have a
default binding to the space bar for this.)
<<>>=
okCallback <- function() {
  l <- lapply(e, tclvalue)
  runTTest(l)
}
tkconfigure(ok, command=okCallback)
tkbind("TButton", "<Return>", function(W) tcl(W, "invoke"))
@ 

At this point, our GUI is complete, but we would like to have it
reflect any changes to the underlying \R\/ environment that effect its
display. A such, we define
a function, \code{updateUI}, which does two basic things: it searches for
new data frames and it adjusts the controls depending on the current
state.
<<>>=
updateUI <- function() {
  dfName <- tclvalue(e$data)
  curDfs <- getDfs()
  tkconfigure(dataCombo, values=curDfs)
  if(!dfName %in% curDfs) {
    dfName <- ""
    tclvalue(e$data) <- ""
  }

  if(dfName == "") {
    ## disable all
    sapply(list(xCombo, fCombo, muCombo,  veCheck),
           function(W) tkconfigure(W, state="disabled"))
    ## disable altSpin, confSpin, confScale
  } else {
    ## enable univariate
    sapply(list(xCombo,  muCombo),
           function(W) tkconfigure(W, state="normal"))
    ## enable altSpin, confSpin, confScale
    df <- get(dfName, envir=.GlobalEnv)
    numVars <- getNumericVars(df)
    tkconfigure(xCombo, values=numVars)
    if(! tclvalue(e$x) %in% numVars)
      tclvalue(e$x) <- ""

    ## bivariate
    availFactors <- getTwoLevelFactor(df)
    sapply(list(fCombo, veCheck),
           function(W) tkconfigure(W, state=ifelse(length(availFactors), "normal", "disabled")))
    tkconfigure(fCombo, values=availFactors)
    if(!tclvalue(e$f) %in% availFactors)
      tclvalue(e$f) <- ""
      
  }
}
updateUI()
tkbind(dataCombo, "<<ComboboxSelected>>", updateUI)
@ 

This function could be bound to a ``refresh'' button or we could
arrange to have it called in the background. Using the \code{after}
command we could periodically check for new data frames, using a task
callback we can call this everytime a new command is issued.  As the
call could potentially be costly, we only call if the available data
frames have been changed. Here is one way to arrange that:
<<>>=
require(digest)
create_function <- function() {
  .dfs <- digest(getDfs())
  f <- function(...) {
    if((val <- digest(getDfs())) != .dfs) {
      .dfs <<- val
      updateUI()
    }
    return(TRUE)
  }
}
@ 
Then to create a task callback we have
<<>>=
id <- addTaskCallback(create_function())
@ 

% <<>>=
% updateUI()                              # run once
% tkbind("TCombobox","<<ComboboxSelected>>", updateUI) ## misses update on new data
% @ 

<<echo=FALSE>>=
## We don't show the function runTTest.
## It is a bit long, as care must be taken as it isn't clear if a formula should be used.  
runTTest <- function(l) {
  ## ugly function to run t test
  if(l$data == "" || l$x == "")
    return()

  l$data <- get(l$data, envir=.GlobalEnv)

  if(l$f != "") {
    l$formula <- formula(paste(l$x,l$f, sep="~"))
    l$x <- l$f <- NULL
    l$mu <- NULL
    l$var.equal <- as.logical(as.numeric(l$var.equal))

    TTest <- stats:::t.test.formula
  } else {
    l$x <- l$data[, l$x]
    l$f <- NULL
    l$mu = as.numeric(l$mu)
    l$var.equal <- NULL

    TTest <- stats:::t.test.default
  }
  l$conf.level <- as.numeric(l$conf.level)/100
  ret <- capture.output(do.call("TTest", l))
  cat(paste(ret, collapse="\n"))
}
@ 
