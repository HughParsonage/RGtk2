This example illustrates how the basic widgets can be combined to make
a dialog for gathering information to run a $t$-test. A realization is
shown in Figure~\ref{fig:fig-tcltk-t-test}.

%% Moved earlier in text
% \begin{figure}
%   \centering
%   \includegraphics[width=.75\textwidth]{fig-tcltk-t-test.png}
%   \caption{A dialog to collect values for a $t$ test. This shows
%     several of the selection widgets discussed in the chapter: a check
%     button, radio button, combo boxes, an entry widget, a scale widget
%     and a spinbox.}
%   \label{fig:fig-tcltk-t-test}
% \end{figure}

<<echo=FALSE>>=
## t.test dialog
## using basic widgets -- no entry widgets yet
library(tcltk)
@ 

<<echo=FALSE>>=
## helper functions
## not shown

get_numeric_vars <- function(DF) {
  if(missing(DF))
    return(c(""))
  ProgGUIinR:::find_vars(DF, is.numeric)
}
get_two_level_factor <- function(DF) {
  if(missing(DF))
    return(c(""))
  nms <- names(DF)
  ind <- sapply(DF, function(i) length(levels(as.factor(i))) == 2)
  if(length(ind) > 0)
    nms[ind]
  else
    c("")
}
@ 



We will use a data store to hold the values to be passed to
\code{t.test}. For the data store, we  use an environment to hold \Tcl\/ variables.

<<dataModel>>=
e <- new.env()
e$x <- tclVar(""); e$f <- tclVar(""); e$data <- tclVar("")
e$mu <- tclVar(0); e$alternative <- tclVar("two.sided")
e$conf.level <- tclVar(95); e$var.equal <- tclVar(FALSE)
@ 

This allows us to write a function to evaluate a $t$-test easily
enough, although we don't illustrate that.

<<echo=FALSE>>=
## We don't show the function runTTest.
## It is a bit long, as care must be taken as it isn't clear if a formula should be used.  
runTTest <- function() {
  l <- lapply(e, tclvalue)
  
  ## ugly function to run t test
  if(l$data == "" || l$x == "")
    return()

  l$data <- get(l$data, envir = .GlobalEnv)

  if(l$f != "") {
    l$formula <- formula(paste(l$x,l$f, sep = "~"))
    l$x <- l$f <- NULL
    l$mu <- NULL
    l$var.equal <- as.logical(as.numeric(l$var.equal))

    TTest <- stats:::t.test.formula
  } else {
    l$x <- l$data[, l$x]
    l$f <- NULL
    l$mu = as.numeric(l$mu)
    l$var.equal <- NULL
    
    TTest <- stats:::t.test.default
  }
  l$conf.level <- as.numeric(l$conf.level)/100
  ret <- capture.output(do.call("TTest", l))
  cat(paste(ret, collapse = "\n"))
}
@ 



@ 

<<notShown, echo=FALSE>>=
### GUI Our standard setup
window <- tktoplevel()
tkwm.title(window, "t-test Dialog")
frame <- ttkframe(window, padding = c(3,3,12,12))
tkpack(frame, expand = TRUE, fill = "both")
@ 

Our layout is basic. Here we pack a label frame into the window to give the dialog a nicer look.
We will use the \code{tkgrid} geometry manager below.
<<layout>>=
label_frame <- ttklabelframe(frame, text = "t.test()", padding = 10)
tkpack(label_frame, expand = TRUE, fill = "both", padx = 5, pady = 5)
@ 

The grid will have four columns, with columns 0 and 2 being for labels.
We don't want the labels to expand the same way we want the widget columns to do, so we
assign different weights:
<<>>=
tkgrid.columnconfigure(label_frame, 0, weight = 1)
tkgrid.columnconfigure(label_frame, 1, weight = 10)
tkgrid.columnconfigure(label_frame, 2, weight = 1)
tkgrid.columnconfigure(label_frame, 1, weight = 10)
@ 


This helper function simplifies the task of adding a label.
<<tkgridHelper>>=
put_label <- function(parent, text, row, column) {
  label <- ttklabel(parent, text = text)
  tkgrid(label, row = row, column = column, sticky = "e")
}
@ 
%

Our first widget will be one to select a data frame. For this, a
combo box is used, although if a large number of data frames are a
possibility, a different widget may be better suited. Also not shown are two
similar calls to create combo boxes \code{x\_combo} and \code{factor\_combo}
which allow the user to specify parts of a formula.

<<>>=
put_label(label_frame, "data:",0,0)
data_combo <- ttkcombobox(label_frame, state = "readonly", 
                         values = ProgGUIinR:::avail_dfs(), 
                         textvariable = e$data)
tkgrid(data_combo, row = 0, column = 1, sticky = "ew", padx = 2)
tkfocus(data_combo)                      # give focus
@ 

<<notShown, echo=FALSE>>=
## not shown
put_label(label_frame, "x:",1,0)
x_combo <-  ttkcombobox(label_frame, 
                       values = get_numeric_vars(), textvariable = e$x)
tkgrid(x_combo, row = 1, column = 1, sticky = "ew", padx = 2)
@ 

<<notShown, echo=FALSE>>=
## not shown
put_label(label_frame, "~ f:",1,2)
factor_combo <-  ttkcombobox(label_frame, values = get_two_level_factor(), textvariable = e$f)
tkgrid(factor_combo, row = 1, column = 3, sticky = "ew", padx = 2)
@ 

We use a \constructor{ttkentry} widget for the user to specify
a mean. For this purpose, the use is straightforward.
<<mu>>=
put_label(label_frame, "mu:", 2, 0)
mu_combo <-  ttkentry(label_frame,  textvariable = e$mu)
tkgrid(mu_combo, row = 2, column = 1, sticky = "ew", padx = 2)
@ 

The selection of an alternative hypothesis is a natural choice for a
combo box or a radio button group, we use the latter.
<<echo=FALSE>>=
ttkscale <- function(parent, ...) tkwidget(parent, "ttk::scale", ...)
tkspinbox <- function(parent, ...) tkwidget(parent, "tk::spinbox", ...)
@ 
<<results=hide>>=
put_label(label_frame, "alternative:", 3, 0)
rb_frame <- ttkframe(label_frame)
sapply(c("two.sided","less","greater"), function(i) {
  radio_button <- ttkradiobutton(rb_frame, variable = e$alternative, 
                       text = i, value = i)
  tkpack(radio_button, side = "left")
})
tkgrid(rb_frame, row = 3, column = 1, sticky = "ew", padx = 2)
@ 

Here we use a range widget to specify the confidence level. The slider
is quicker to use, but less precise than the spinbox. By sharing a
text variable, the widgets are automatically synchronized.
<<>>=
put_label(label_frame, "conf.level:", 3, 2)
conf_level_frame <- ttkframe(label_frame)
tkgrid(conf_level_frame, row = 3, column = 3, columnspan = 2, 
       sticky = "ew", padx = 2)
##
conf_level_scale <- ttkscale(conf_level_frame, from = 75, to = 100, 
                     variable = e$conf.level)
conf_level_spin <- tkspinbox(conf_level_frame, from = 75, to = 100, increment = 1, 
                     textvariable = e$conf.level, width = 5)
##
tkpack(conf_level_scale, expand = TRUE, fill = "y", side = "left")
tkpack(conf_level_spin, side = "left")
@ 

A checkbox is used to collect the logical value for \code{var.equal}:
<<>>=
put_label(label_frame, "var.equal:", 4, 0)
var_equal_check <- ttkcheckbutton(label_frame, variable = e$var.equal)
tkgrid(var_equal_check, row = 4, column = 1, stick = "w", padx = 2)
@ 


The dialog has standard "cancel" and "ok" buttons.
<<results=hide>>=
button_frame <- ttkframe(frame)
cancel_button <- ttkbutton(button_frame, text = "cancel")
ok_button <- ttkbutton(button_frame, text = "ok")
#
tkpack(button_frame, fill = "x", padx = 5, pady = 5)
tkpack(ttklabel(button_frame, text = " "), expand = TRUE, fill = "y", 
       side = "left")                     # add a spring
sapply(list(cancel_button, ok_button), tkpack, side = "left", padx = 6)
@ 
%

For the \code{ok\_button} button we want to gather the values and run the
function. The \code{runTTest} function does this.  We configure both
buttons, then add to the default button bindings to invoke either of the button's commands
when they have the focus and \kbd{return} is pressed.
<<>>=
tkconfigure(ok_button, command = runTTest)
tkconfigure(cancel_button, command = function() tkdestroy(window))
tkbind("TButton", "<Return>", function(W) tcl(W, "invoke"))
@ 

At this point, our GUI is complete, but we would like to have it
reflect any changes to the underlying \R\/ environment that effect its
display. A such, we define a function, \code{update\_ui}, which does two
basic things: it searches for new data frames and it adjusts the
controls depending on the current state. The work is cumbersome, as
three different means are needed to disable theh widgets.
<<results=hide>>=
update_ui <- function() {
  dfName <- tclvalue(e$data)
  curDfs <- ProgGUIinR:::avail_dfs()
  tkconfigure(data_combo, values = curDfs)
  if(!dfName %in% curDfs) {
    dfName <- ""
    tclvalue(e$data) <- ""
  }

  if(dfName == "") {
    ## 3 ways to disable needed!!
    x <- list(x_combo, factor_combo, mu_combo,  conf_level_scale, var_equal_check, ok_button)
    sapply(x, function(W) tcl(W, "state", "disabled"))
    sapply(as.character(tkwinfo("children", rb_frame)), 
           function(W) tcl(W, "state", "disabled"))
    tkconfigure(conf_level_spin, state = "disabled")
  } else {
    ## enable univariate, ok
    sapply(list(x_combo,  mu_combo, conf_level_scale, ok_button),
           function(W) tcl(W, "state", "!disabled"))
    sapply(as.character(tkwinfo("children", rb_frame)), 
           function(W) tcl(W, "state", "!disabled"))
    tkconfigure(conf_level_spin, state = "normal")
    
    DF <- get(dfName, envir = .GlobalEnv)
    numVars <- get_numeric_vars(DF)
    tkconfigure(x_combo, values = numVars)
    if(! tclvalue(e$x) %in% numVars)
      tclvalue(e$x) <- ""

    ## bivariate
    avail_factors <- get_two_level_factor(DF)
    sapply(list(factor_combo, var_equal_check),
           function(W) {
             val <- if(length(avail_factors)) "!" else ""
             tcl(W, "state", sprintf("%sdisabled", val))
           })
    tkconfigure(factor_combo, values = avail_factors)
    if(!tclvalue(e$f) %in% avail_factors)
      tclvalue(e$f) <- ""
      
         }
}
update_ui()
tkbind(data_combo, "<<ComboboxSelected>>", update_ui)
@ 

This function could be bound to a ``refresh'' button or we could
arrange to have it called in the background. Using the \code{after}
command we could periodically check for new data frames, using a
\iprogram{task callback}task callback we can call this every time a
new command is issued.  As the call could potentially be costly, we
only call if the available data frames have been changed. Here is one
way to arrange that:
<<>>=
require(digest)
create_function <- function() {
  .DFs <- digest(ProgGUIinR:::avail_dfs())
  f <- function(...) {
    if((val <- digest(ProgGUIinR:::avail_dfs())) != .DFs) {
      .DFs <<- val
      update_ui()
    }
    return(TRUE)
  }
}
@ 
Then to create a task callback we have
<<>>=
id <- addTaskCallback(create_function())
@ 

% <<>>=
% update_ui()                              # run once
% tkbind("TCombobox","<<ComboboxSelected>>", update_ui) ## misses update on new data
% @ 
