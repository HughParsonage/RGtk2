This example shows how a text buffer can be used to display the output
of \R\/ commands, using an approach modified from \pkg{Sweave}.  We
envision this as a piece of a larger GUI which generates the commands
to evaluate. For this example though, we make a simple GUI
(Figure~\ref{fig:tcltk-text-buffer-commands}).

\begin{figure}
  \centering
  \includegraphics[width=.8\textwidth]{fig-tcltk-text-buffer-commands.png}
  \caption{A text widget used to show formatted \R{} commands and their output}
  \label{fig:tcltk-text-buffer-commands}
\end{figure}

<<makeGUI>>=
w <- tktoplevel(); tkwm.title(w, "Text buffer example")
f <- ttkframe(w, padding = c(3,3,12,12))
tkpack(f, expand = TRUE, fill = "both")
txt <- tktext(f, width = 80, height = 24)   # default size
addScrollbars(f, txt)
@ 
 
To distinguish between commands and their output we define the
following tags:
<<>>=
tktag.configure(txt, "commandTag", foreground = "blue", 
                font = "courier 12 italic")
tktag.configure(txt, "outputTag", font = "courier 12")
tktag.configure(txt, "errorTag", foreground = "red", 
                font = "courier 12 bold")
@ 

The following function does the work of evaluating a command chunk
then inserting the values into the text buffer, using the different
markup tags specified above to indicate commands from output.

<<>>=
evalCmdChunk <- function(txt, cmds) {
  
  cmdChunks <- try(parse(text = cmds), silent = TRUE)
  if(inherits(cmdChunks,"try-error")) {
    tkinsert(t, "end", "Error", "errorTag") # add markup tag
  }

  for(cmd in cmdChunks) {
    cutoff <- 0.75 * getOption("width")
    dcmd <- deparse(cmd, width.cutoff = cutoff)
    command <- 
      paste(getOption("prompt"),
            paste(dcmd, collapse = paste("\n", 
                          getOption("continue"), sep = "")),
            sep = "", collapse = "")
    tkinsert(txt, "end", command, "commandTag")
    tkinsert(txt, "end","\n")
    ## output, should check for errors in eval!
    output <- capture.output(eval(cmd, envir = .GlobalEnv))
    output <- paste(output, collapse = "\n")
    tkinsert(txt, "end", output, "outputTag")
    tkinsert(txt, "end","\n")
  }
}
@ 

<<echo=FALSE>>=
## function to add scrollbars to a widget
addScrollbars <- function(parent, widget) {
  xscr <- ttkscrollbar(parent, orient = "horizontal",
                       command = function(...) tkxview(widget, ...))
  yscr <- ttkscrollbar(parent, orient = "vertical",
                       command = function(...) tkyview(widget, ...))

  tkconfigure(widget,
              xscrollcommand = function(...) tkset(xscr,...),
              yscrollcommand = function(...) tkset(yscr,...))

  tkgrid(widget, row = 0, column = 0, sticky = "news")
  tkgrid(yscr,row = 0,column = 1, sticky = "ns")
  tkgrid(xscr, row = 1, column = 0, sticky = "ew")
  tkgrid.columnconfigure(parent, 0, weight = 1)
  tkgrid.rowconfigure(parent, 0, weight = 1)
}
@


This is how it can be used.
<<TryIt>>=    
evalCmdChunk(txt, "2 + 2; lm(mpg ~ wt, data = mtcars)")
@ 
