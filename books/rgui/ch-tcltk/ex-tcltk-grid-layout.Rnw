This example shows how to create a simple calendar using a grid
layout. (No such widget is standard with \pkg{tcltk}.) We use some
data functions for the \pkg{ProgGUIinR} package. The actual use of
\function{tkgrid} is straightforward once the approporiate row and
column is figured out.

<<echo=FALSE>>=
library(tcltk)
##' from chron with slight change to arguments
day.of.week <- function (year, month, day) {
    ix <- year + trunc((month - 14)/12)
    jx <- (trunc((13 * (month + 10 - (month + 10)%/%13 * 12) - 
        1)/5) + day + 77 + (5 * (ix - (ix%/%100) * 100))%/%4 + 
        ix%/%400 - (ix%/%100) * 2)
    jx%%7
}


## is this a valid date
validDate <- function(year, month, day) 
  !is.na(as.Date(sprintf("%s-%s-%s", year, month, day), format = "%Y-%m-%d"))

## how many days in a month
days.in.month <- function(year, month) {
  for(i in c(31, 30, 29, 28)) {
    if(validDate(year, month, i))
      return(i)
  }
}
## 0-based week of month
week.of.month <- function(year, month, day) {
  first.day <- day.of.week(year, month, 1)
  (first.day + day - 1) %/% 7
}
@ 



\begin{figure}
  \centering
  \includegraphics[width=.35\textwidth]{fig-tcltk-grid-calendar}
  \caption{A monthly calendar illustrating various layouts.}
  \label{fig:qt-gridlayout-calendar}
\end{figure}


<<>>=
make_month <- function(parent, year, month) {
  ## add headers
  days <- c("S","M","T","W","Th","F","S")
  sapply(1:7, function(i) {
    label <- ttklabel(parent, text = days[i])       
    tkgrid(label, row = 0, column = i-1, sticky = "")
  })
  ## add days
  sapply(seq_len(ProgGUIinR:::days.in.month(year, month)), 
         function(day) {
           label <- ttklabel(parent, text = day)
           row <- ProgGUIinR:::week.of.month(year, month, day)
           col <- ProgGUIinR:::day.of.week(year, month, day)
           tkgrid(label, row = 1 + row, column = col, sticky = "e")
         })
}
@ 

Next, we would like to incorporate the calendar widget into an interface
that allows the user to scroll through month-by-month beginning with:
<<>>=
year <- 2000; month <- 1
@ 

Our basic layout will use a box layout with a nested layout
for the step-through controls and another holding the calendar widget.
<<>>=
window <- tktoplevel()
frame <- ttkframe(window, padding = c(3,3,12,12))
tkpack(frame, expand = TRUE, fill = "both", side = "top")
c_frame <- ttkframe(frame)
cal_frame <- ttkframe(frame)
tkpack(c_frame, fill = "x", side = "top")
tkpack(cal_frame, expand = TRUE, anchor = "n")
@ 

Our step through controls are packed in through a horizontal
layout. We use anchoring and \code{expand=TRUE} to keep the arrows on the edge and the
label with the current month centered, should the container be resized.
<<>>=
previous_button <- ttklabel(c_frame, text = "<")
next_button <- ttklabel(c_frame, text = ">")
current_month <- ttklabel(c_frame)
#
tkpack(previous_button, side = "left", anchor = "w")
tkpack(current_month, side = "left", anchor = "center", expand = TRUE)
tkpack(next_button, side = "left", anchor = "e")
@ 

The \code{set\_month} function first removes the previous calendar
container and then
redefines one to hold the monthly calendar. Then it adds in a new
monthly calendar to match the year and month. The call to
\code{make\_month} creates the calendar. Packing in the frame after
adding its child components makes the GUI seem much more responsive.
<<stackedWidget>>=
set_month <- function() {
  tkpack("forget", cal_frame)
  cal_frame <<- ttkframe(frame)
  make_month(cal_frame, year, month)
  tkconfigure(current_month,              # month label
              text = sprintf("%s %s", month.abb[month], year))
  tkpack(cal_frame)
}
set_month()                              # initial calendar
@ 

The arrow labels are used to scroll, so we connect to the
\event{Button-1} event the corresponding commands. This shows the
binding to decrement the month and year using the global variables
\code{month} and \code{year}.
<<connectSignal>>=
tkbind(previous_button, "<Button-1>", function() {
  if(month > 1) {
    month <<- month - 1
  } else {
    month <<- 12; year <<- year - 1
  }
  set_month()
})
@ 

<<echo=FALSE>>= 
tkbind(next_button, "<Button-1>", function() {
 if(month < 12) {
    month <<- month + 1
  } else {
    month <<- 1; year <<- year + 1
  }
  set_month()
})
@ 

Our calendar is static, but if we wanted to add interactivity to a
mouse click, we could make a binding as follows:
  
<<>>=
tkbind("TLabel", "<Button-1>", function(W) {
  day <- as.numeric(tkcget(W, "-text"))
  if(!is.na(day))
    print(sprintf("You selected: %s/%s/%s", month, day, year))
})
@   


