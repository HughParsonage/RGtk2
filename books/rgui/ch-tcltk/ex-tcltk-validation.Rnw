\iprogram{validation}
As previously mentioned, there is no native calendar widget in
\pkg{tcltk}. This example shows how one can use the validation
framework for entry widgets to check that user-entered dates conform
to an expected format.
<<echo=FALSE>>=
## Example of using validation to adjust the date
## in case a user doesn't use desired format

## Docs on validation
## VALIDATION
## The -validate, -validatecommand, and -invalidcommand options are used to enable entry widget validation.
## VALIDATION MODES
## There are two main validation modes: prevalidation, in which the -validatecommand is evaluated prior to each edit and the return value is used to determine whether to accept or reject the change; and revalidation, in which the -validatecommand is evaluated to determine whether the current value is valid.

## The -validate option determines when validation occurs; it may be set to any of the following values:

## none
##     Default. This means validation will only occur when specifically requested by the validate widget command.

## key
##     The entry will be prevalidated prior to each edit (specifically, whenever the insert or delete widget commands are called). If prevalidation fails, the edit is rejected.

## focus
##     The entry is revalidated when the entry receives or loses focus.

## focusin
##     The entry is revalidated when the entry receives focus.

## focusout
##     The entry is revalidated when the entry loses focus.

## all
##     Validation is performed for all above conditions.

## The -invalidcommand is evaluated whenever the -validatecommand returns a false value.

## The -validatecommand and -invalidcommand may modify the entry widget's value via the widget insert or delete commands, or by setting the linked -textvariable. If either does so during prevalidation, then the edit is rejected regardless of the value returned by the -validatecommand.

## If -validatecommand is empty (the default), validation always succeeds.
@ 
%%%
%
<<echo=FALSE>>=
## test of validation command
## tricky bit is that validation commands must return TRUE or FALSE
## we can do this with tcl("eval","FALSE") or .Tcl("expr false")

library(tcltk)
@ 
%

%% The entry widget man page has many details.
Validation happens in a few steps.  A validation command is assigned
to some event. This call can come in two forms. Prevalidation is when
a change is validated prior to being committed, for example when each key
is pressed.  Revalidation is when the value is checked
after it is sent to be committed, say when the entry widget loses
focus or the enter key is pressed.

When a validation command is called it should check
whether the current state of the entry widget is valid or not. If
valid, it returns a value of \code{TRUE}, \code{FALSE}
otherwise. These need to be \TCL\/ Boolean values, so in the following,
the command \code{tcl("eval","TRUE")} (or \code{tcl("eval", "FALSE")}) is used. If
the validation command returns \code{FALSE}, then a subsequent call to
the specified invalidation command is made.

%% Put these into a table???
For each callback, a number of substitution values are possible, in
addition to the standard ones such as \code{W} to refer to the
widget. These are: \code{d} for the type of validation being done: 1
for insert prevalidation, 0 for delete prevalidation, or -1 for
revalidation; \code{i} for the index of the string to be inserted or
deleted or -1; \code{P} for the new value if the edit is accepted (in
prevalidation) or the current value in revalidation; \code{s} for the
value prior to editing; \code{S} for the string being inserted or
deleted, \code{v} for the current value of \code{validate} and
\code{V} for the condition that triggered the callback.

In the following callback definition we use \code{W} so that we can change the entry text color to black and format the data in a standard manner and \code{P} to get the entry widget's value just prior to validation.


To begin,  we define some patterns for acceptable date formats.
<<>>=
datePatterns <- c()
for(i in list(c("%m","%d","%Y"),        # U.S. style
              c("%m","%d","%y"))) {
  for(j in c("/","-"," ") )
    datePatterns[length(datePatterns)+1] <- 
      paste(i,sep="", collapse=j)
}
@ 

Our callbacks set the color to black or red, depending on whether we
have a valid date. First our validation command.
<<setValidDateCallback>>=
isValidDate <- function(W, P) { # P is the current value
  for(i in datePatterns) {
    date <- try( as.Date(P, format=i), silent=TRUE)
    if(!inherits(date, "try-error") && !is.na(date)) {
      tkconfigure(W, foreground="black")  # or use style
      tkdelete(W, 0,"end")
      tkinsert(W, 0, format(date, format="%m/%d/%y"))
      return(tcl("expr","TRUE"))        
    } 
  }
  return(tcl("expr","FALSE"))
}
@ 

This is our invalid command.
<<setInvalidCallback>>=
indicateInvalidDate <- function(W) {
  tkconfigure(W,foreground="red")
  tcl("expr","TRUE")
}
@

<<notShown, echo=FALSE>>=
## A simple GUI to show the entry widget.
w <- tktoplevel(); tkwm.title(w,"Validation of date example")
f <- ttkframe(w, padding=c(3,3,12,12)); tkpack(f, expand=TRUE, fill="both")
tkpack(ttklabel(f, text="Enter a date (mm/dd/yy):"), side="left", padx=2)
@ 

The \argument{validate}{ttkentry} argument is used to specify when the
validation command should be called. This can be a value of
\qcode{none} for validation when called through the \code{validation}
command; \qcode{key} for each key press; \qcode{focusin} for when the
widget receives the focus; \qcode{focusout} for when it loses focus;
\qcode{focus} for both of the previous; and \qcode{all} for any of the
previous. We use \qcode{focusout} below, so also give a button widget
so that the focus can be set elsewhere. 
<<entryWidgetWithValidation, results=hide>>=
e <- ttkentry(f, validate="focusout", # f some parent
              validatecommand=isValidDate,
              invalidcommand=indicateInvalidDate)
b <- ttkbutton(f,text="click")        # something to focus on
sapply(list(e, b), tkpack, side="left", padx=2)
@ 
              
