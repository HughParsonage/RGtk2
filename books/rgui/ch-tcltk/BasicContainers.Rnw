%% parent windows, frames etc.
%% Example


\section{Top-level windows}
\label{sec:tcltk:top-level-windows}
%%\XXX{Window Styles}

%% constructor
Top level windows are created through the \function{tktoplevel}
constructor. Basic options include the ability to specify the
preferred width and height and to specify a menubar through
the \argument{menu}{tktoplevel} argument. (Menus will be covered in
Section~\ref{sec:tcltk:menus}.)


Other properties can be queried and set through the \TK\/ command
\function{wm}. This command has several subcommands, leading to
\pkg{tcltk} functions with names such as \function{tkwm.title}, the
function used to set the window title. As with all such functions,
either the top-level window object, or its ID must be the first
argument. In this case, the new title is the second.

\paragraph{Suppressing the initial drawing}
When a top-level window is constructed there is no option for it not
to be shown.  However, one can use the \function{tclServiceMode}
function to suspend/resume drawing of any widget through \TK. This
function takes a logical value indicating the updating of widgets
should be suspended. One can set the value to \code{FALSE}, initiate
the widgets, then set to \code{TRUE} to display the widgets. To
iconify an already drawn window can be done through the
\function{tkwm.withdraw} function and reversed with the
\function{tkwm.deiconify} function. Either of these can be useful in
the construction of complicated GUIs, as the drawing of the widgets
can seem slow. (The same can be done through the \function{tkwm.state}
function with an option of \qcode{withdraw} or \qcode{normal}.)
 


\paragraph{Window sizing}

The preferred size of a top-level window can be configured through the
\code{width} and \code{height} arguments of the constructor.  Negative
values means the window will not request any size. The absolute size
and position of a top-level window in pixels can be queried or
specified through the \function{tkwm.geometry} function. The geometry
is specified as a string, as was described for \function{tkwinfo} in
Section~\ref{sec:tcltk:overview:widget-properties}. If this string is
empty, then the window will resize to accomodate its child components.

The \function{tkwm.resizable} function can be used to prohibit the
resizing of a top-level window. The syntax allows either the width or
height to be constrained. The following command would  prevent
resizing of both the width and height of the toplevel window \code{w}. 

\begin{Schunk}
  \begin{Sinput}
tkwm.resizable(w, FALSE, FALSE)    # width first
  \end{Sinput}
\end{Schunk}
%
When a window is resized, you can constrain the minimum and maximum
sizes with \function{tkwm.minsize} and \function{tkwm.maxsize}. The
aspect ratio (width/height) can be set through \function{tkwm.aspect}.


%% sizegrip
For resizable windows, the \constructor{ttksizegrip} widget can be
used to add a visual area (usually the lower right corner) for the
user to grab on to with their mouse for resizing the window. On some
OSes (e.g., Mac OS X) these are added by the window manager
automatically.


%% transient
\paragraph{Dialog windows}
For dialogs, a top-level window can be related to
a different top-level window. The function \function{tkwm.transient}
allows one to specify the master window as its second
argument (cf. Example~\ref{ex-tcltk-window}). The
new window will mirror the state of the master window, including if
the master is withdrawn.

%% overridedirect
For some dialogs it may be desirable to not have the
window manager decorate the window with a title bar etc. The command
\subcommanda{wm overrideredirect}{tktoplevel}{logical} takes a logical
value indicating if the window should be decorated. Though, not all
window managers respect this.



%% binginds
\paragraph{Bindings}
Bindings for top-level windows are propagated down to all of their
child widgets. If a common binding is desired for all the children,
then it need only be specified once for the top-level window
(cf. Section~\ref{sec:tcltk:events} where keyboard accelerators are
defined this way).


%% wm protocol
The \function{tkwm.protocol} function (not \function{tkbind}) is used
to assign commands to window manager events, most commonly, the delete
event when the user clicks the close button on the windows
decorations. A top-level window can be removed through the
\function{tkdestroy} function, or through the user clicking on the
correct window decorations. When the window decoration is clicked, the
window manager issues a \qcode{WM\_DELETE\_WINDOW} event. To bind to
this, a command of this form
\code{tkwm.protocol(win, "WM\_DELETE\_WINDOW", callback)} is used.

To illustrate, if \code{w} is a top-level window, and \code{e} a text
entry widget (cf. \function{tktext} in
Section~\ref{sec:tcltk:multi-line-text}) then the following snippet of
code would check to see if the text widget has been modified before
closing the window. This uses a modal message box described in
Section~\ref{sec:tcltk:dialogs}.

<<echo=FALSE>>=
## set up window etc. for example
library(tcltk)
w <- tktoplevel()
tkwm.title(w, "Simple text entry example")
e <- tktext(w)
tkpack(e)
@


<<example-wm-delete-window>>=
tkwm.protocol(w,"WM_DELETE_WINDOW", function() {
  modified <- tcl(e, "edit", "modified")
  if(as.logical(modified)) {
    response <- 
      tkmessageBox(icon="question",
                   message="Really close?",
                   detail="Changes need to be saved",
                   type="yesno",
                   parent=w)
    if(as.character(response) == "no")
      return()
  }
  tkdestroy(w)                          # otherwise close
})
@ 

%% Isn't working?
% %% stack of windows
% A window can be made to always be the topmost window through the
% \code{attributes} subcommand of the \code{wm} command. However, there
% is no direct \pkg{tcltk} function, so if \code{w} was to be on top, one would use the \function{tcl}
% function as follows: 
% \begin{Schunk}
% \begin{Sinput}
% tcl("wm", "attributes", w, topmost=TRUE)  
% \end{Sinput}
% \end{Schunk}

% When more than top-level window is in use, there is a stacking order
% describing how they are displayed. This stacking order is returned
% through the IDs of the windows through the \code{stackorder}
% subcommand of the \code{wm} command. There is no \pkg{tcltk} function
% for this, but the command \code{tcl("wm","stackorder", win)}, where
% \code{win} is the top-level window object will return the list.

% Stackign order of others; topmost
\begin{example}{A window constructor}{ex-tcltk-window}
  This example shows a possible constructor for top-level windows
  allowing some useful options to be passed in. We use the upcoming
  \function{ttkframe} constructor and \function{tkpack} command.
<<newWindow>>=
newWindow <- function(title, command, parent,
                      width, height) {
  w <- tktoplevel()

  if(!missing(title)) tkwm.title(w, title)

  if(!missing(command)) 
    tkwm.protocol(w, "WM_DELETE_WINDOW", function() {
      if(command())            # command returns logical
        tkdestroy(w)
    })

  if(!missing(parent)) {
    parentWin <- tkwinfo("toplevel", parent)
    if(as.logical(tkwinfo("viewable", parentWin))) {
      tkwm.transient(w, parent)
    }
  }
  
  if(!missing(width)) tkconfigure(w, width=width)
  if(!missing(height)) tkconfigure(w, height=height)

  windowSystem <- tclvalue(tcl("tk", "windowingsystem"))
  if(windowSystem == "aqua") {
    f <- ttkframe(w, padding=c(3,3,12,12))
  } else {
    f1 <- ttkframe(w, padding=0)
    tkpack(f1, expand=TRUE, fill="both")
    f <- ttkframe(f1, padding=c(3,3,12,0))
    sg <- ttksizegrip(f1)
    tkpack(sg, side="bottom", anchor="se")
  }
  tkpack(f, expand=TRUE, fill="both", side="top")

  return(f)
}
@ 
\end{example}

\section{Frames}
\label{sec:tcltk:frames}

The \function{ttkframe} constructor produces a themeable container
that can be used to organize visible components within a GUI. It is
often the first thing packed within a top-level window. 

The options include \option{width}{ttkframe} and
\option{height}{ttkframe} to set the requested size,
The \option{padding}{ttkframe}
option can be used to to put space within the border between the
border and subsequent children. Frames can be decorated. Use the
option \option{borderwidth}{ttkframe} to specify a border around the frame of
a given width, and \option{relief}{ttkframe} to set the border
style. The value of \code{relief} is chosen from (the default)
\qcode{flat}, \qcode{groove}, \qcode{raised}, \qcode{ridge},
\qcode{solid}, or \qcode{sunken}.  

\subsection{Label Frames}
\label{sec:tcltk:label-frames}

The \constructor{ttklabelframe} constructor produces a frame with an
optional label that can be used to set off and organize components of
a GUI. The label is set through the option
\option{text}{ttklabelframe}. Its position is determined by the option
\option{labelanchor}{ttklabelframe} taking values labeled by compass
headings (combinations of \code{n}, \code{e}, \code{w}, \code{s}. The
default is theme dependent, although typically \qcode{nw} (upper
left).

\paragraph{Separators}
As an alternative to a border, the \constructor{ttkseparator} widget can be used
to place a single line to separate off areas in a GUI. The lone
widget-specific option is \option{orient}{ttkseparator} which takes
values of \qcode{horizontal} (the default) or \qcode{vertical}. This
widget must be told to stretch when added to a container, as described
in the next section.

\section{Geometry Managers}
\label{sec:tcltk:geometry-managers}

\TCL\/ uses \secdfn{geometry managers}{tcltk} to place child
components within their parent windows. There are three such managers,
but we describe only two, leaving the lower-level \code{place} command
for the official documentation. The use of geometry managers, allows
\TK\/ to quickly reallocate space to a GUI's components when a window
is resized.  The \function{tkpack} function will place children into
their parent in a box-like manner. We have seen several examples in
the text that use nested boxes to construct quite flexible layouts.
Example~\ref{ex-tcltk-non-modal-dialog} will illustrate that once
again. When simultaneous horizontal and vertical alignment of child
components is desired, the \function{tkgrid} function can be used to
manage the components. ~\footnote{An excellent online reference,
  albeit for Perl/Tk, is \textit{Learning Perl/Tk: Graphical User
    Interfaces with Perl} By Nancy Walsh. See
  \url{http://www.rigacci.org/docs/biblio/online/lperltk/ch02.html}
  for information about this topic.}
\\

%% warn against mixing XXX how to format warning?
A GUI may use a mix of \code{pack} and \code{grid} to mangage the child components,
but all immediate siblings in the widget hierarchy must be managed the same
way. Mixing the two will typically result in a lockup of the \R\/
session.


\subsection{Pack}
\label{sec:tcltk:pack}

%%\XXX{Is there a method to redraw the GUI?}
%%\XXX{Comment that pack can pack into other parent?}

%% side
We have illustrated how \constructor{tkpack} can be used to manage how
child components are viewed within their parent. The basic usage
\code{tkpack(child)} will pack in the child components from top to
bottom. The \option{side}{tkpack} option can take a value of
\qcode{left}, \qcode{right}, \qcode{top} (default), or \qcode{bottom}
to adjust where the children are placed.  Unlike \GTK{} or \Qt,
where boxes are packed in just one direction, these can be mixed and
matched, but sticking to just one direction is typical, with nested
frames to give additional flexibility.

\paragraph{after, before}
The \option{after}{tkpack} and \option{before}{tkpack} options can be
used to place the child before or after another component. These are
used as with \code{tkpack(child1, after=child2)}. The object
\code{child2} can be an \R\/ object or its ID. 


\paragraph{forget}
Child components can be forgotten by the window manager, unmapping
them but not destroying them, with the \subcommand{forget}{tkpack}
subcommand, or the convenience function \function{tkpack.forget}.
Example~\ref{ex-tcltk-subset-dialog} shows a usage.  After a child
component is removed this way, it can be re-placed in the GUI using a
geometry manager.

\paragraph{Introspection}
The subcommand \subcommand{slaves}{tkpack} will return a list of the
child components packed into a frame. Coercing these return values to
character via \code{as.character} will produce the IDs of the child
components. The subcommand \subcommand{info}{tkpack} will provide the
packing info for a child.
\\

These commands are illustrated below, where we show how one might
implement a ticker tape effect, where words scroll to the left.
<<rotateLabels, results=hide>>=
w <- tktoplevel()
f <- ttkframe(w, padding=c(3,3,12,12))
tkpack(f, expand=TRUE, fill="both")
#
x <- strsplit("Lorem ipsum dolor sit amet ...", "\\s")[[1]]
labels <- lapply(x, function(i) ttklabel(f, text=i))
sapply(labels, function(i) tkpack(i, side="left"))
#
rotateLabel <- function() {
  children <- as.character(tkpack("slaves", f))
  tkpack.forget(children[1])
  tkpack(children[1], after=children[length(children)], 
         side="left")
}
@

One could use the \code{after} command to do this in the background,
but here we just rotate the values in a blocking loop:
<<eval=FALSE>>=
for(i in 1:20) {rotateLabel(); Sys.sleep(1)}
@ 


\paragraph{Specifying space around the children}

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-tcltk-padding-pady-ipady}
  \caption{Various ways to put padding between widgets using
    \function{tkpack}. The \code{padding} option for the box container
    puts padding around the cavity for all the widgets. The
    \code{pady} option for \function{tkpack} puts padding around the
    top and bottom on the border of each widget. The \code{ipady}
    option for \function{tkpack} puts padding within the top and
    bottom of the border for each child (breaking the theme under Mac
    OS X).}
  \label{fig:fig-pack-example}
\end{figure}

<<padding-pady-ipady, echo=FALSE>>=
## Code to make padding/pady/ipady figure
## padding
w <- tktoplevel();
tkwm.title(w, "Padding/pady/ipady")
f1 <- ttkframe(w, padding=c(3,3,12,12))  # Some breathing room
tkpack(f1, expand=TRUE, fill="both")     # For window expansion


f <- ttkframe(f1,padding=20, border=1);
tkpack(f, side="left", expand=TRUE, fill="x")
tkpack(ttkbutton(f, text="padding"))
tkpack(ttkbutton(f, text="padding"))

tkpack(ttkseparator(f1, orient="vertical"), expand=TRUE, fill="y", side="left")

##  pady outside border
f <- ttkframe(f1, border=1)
tkpack(f, side="left", expand=TRUE, fill="both")
tkpack(ttkbutton(f, text="pady"), pady=10)
tkpack(ttkbutton(f, text="pady"), pady=10)

tkpack(ttkseparator(f1, orient="vertical"), expand=TRUE, fill="y", side="left")
## ipady within border
f <- ttkframe(f1, border=1)
tkpack(f, side="left", expand=TRUE, fill="both")
tkpack(ttkbutton(f, text="ipady"), ipady=10)
tkpack(ttkbutton(f, text="ipady"), ipady=10)
@ 

In addition to the \code{padding} option for a frame container, the
\option{ipadx}{tkpack}, \option{ipady}{tkpack}, \option{padx}{tkpack},
and \option{pady}{tkpack} options can be used to add space around the
child components. Figure~\ref{fig:fig-pack-example} has an
example. In the above options, the \code{x} and \code{y} indicate left-right space or
top-bottom space. The \code{i} stands for internal padding that is
left on the sides or top and bottom of the child within the border,
for \code{padx} the external padding added around the border of the
child component. The value can be a single number or pair of numbers
for asymmetric padding.

<<echo=FALSE>>=
## not shown
## sets up window with some child components to illustrate
## tkpack("configure", ...)
w <- tktoplevel()
tkwm.title(w,"tkpack configure example")
f <- ttkframe(w, padding=5)
tkpack(f, expand=TRUE, fill="both")
l <- list()
for(i in 1:5) {
  l[[i]] <- ttklabel(f, text=i)
  tkpack(l[[i]], side="left")
}
@ 

This sample code shows how one can easily add padding around all the
children of the frame \code{f} using the
\subcommand{"configure"}{tkpack} subcommand.

<<echo=TRUE, results=hide>>=
allChildren <- as.character(tkwinfo("children", f))
sapply(allChildren, tkpack.configure,  padx=10, pady=5)

@ 


\paragraph{Cavity model}
The packing algorithm, as described in the \Tk\/ documentation, is based
on arranging where to place a slave into the rectangular unallocated
space called a ``cavity.'' We use the nicer terms ``child component'' and ``box''
to describe these. When a child is placed inside the box, say on the
top, the space allocated to the child is the rectangular space with
width given by the width of the box, and height the sum of the
requested height of the child plus twice the \code{ipady} amount (or
the sum if specified with two numbers). The packer then chooses the
dimension of the child component, again from the requested size plus
the \code{ipad} values for \code{x} and \code{y}. These two spaces
may, of course, have different dimensions.



By default, the child  will be placed centered along the edge of
the box within the allocated space and blank space, if any, on both
sides. 


%% has a thorough explanation: http://www.rigacci.org/docs/biblio/online/lperltk/ch02.html
\paragraph{The anchor, expand, fill arguments}
When there is more space in the box than requested by the child
component, there are other options. The \option{anchor}{tkpack} option
can be used to anchor the child to a place in the box by specifying
one of the valid compass points (eg. \code{"n"} or \code{"se"})
leaving blank space around the child (Figure~\ref{fig:fig-tcltk-anchor-compass}.)

\begin{figure}
  \centering
  \includegraphics[width=.5\textwidth]{fig-tcltk-anchor-compass.png}
  \caption{The \code{anchor} argument is specified through compass directions}
  \label{fig:fig-tcltk-anchor-compass}
\end{figure}
<<anchorPoints, echo=FALSE, results=hide>>=
## Example of anchor arguments
## not shown in text
w <- tktoplevel()
tkwm.title(w, "anchor arguments")
f <- ttkframe(w, padding=c(3,3,12,12)); tkpack(f, expand=TRUE, fill="both")
tr <- ttkframe(f); mr <- ttkframe(f); br <- ttkframe(f)
sapply(list(tr, mr, br), tkpack, expand=TRUE, fill="both")
tkpack(ttklabel(tr, text="nw"), anchor="nw", expand=TRUE, side="left")
tkpack(ttklabel(tr, text="n"),  anchor="n",  expand=TRUE, side="left")
tkpack(ttklabel(tr, text="ne"), anchor="ne", expand=TRUE, side="left")
##
tkpack(ttklabel(mr, text="w"),       anchor="w",       expand=TRUE, side="left")
tkpack(ttklabel(mr, text="center"),  anchor="center",  expand=TRUE, side="left")
tkpack(ttklabel(mr, text="e"),       anchor="e",       expand=TRUE, side="left")
##
tkpack(ttklabel(br, text="sw"), anchor="sw", expand=TRUE,  side="left")
tkpack(ttklabel(br, text="s"),  anchor="s",  expand=TRUE,  side="left")
tkpack(ttklabel(br, text="se"), anchor="se", expand=TRUE,  side="left")
@   


An alternative is to have one or more of the widgets expand to fill
the available space. Each child packed in with the 
option \option{expand}{tkpack} set to \code{TRUE} will have
the extra space allocated  to it in an even manner. The
\option{fill}{tkpack} option is used to base the size of the child on
the available cavity in the box -- not on the requested size of the
child. The \code{fill} option can be \qcode{x}, \qcode{y} or
\qcode{both}. The first two expanding the child's size in just one
direction, the latter in both.

\begin{example}{Expand/fill options for \function{tkpack}}{eg-tcltk-tkpack-options}
%
\begin{figure}
  \centering
\includegraphics[width=.4\textwidth]{fig-tcltk-expand-fill-both.png}
\includegraphics[width=.4\textwidth]{fig-tcltk-expand-fill-none.png}\\
\includegraphics[width=.4\textwidth]{fig-tcltk-expand-fill-x.png}
\includegraphics[width=.4\textwidth]{fig-tcltk-expand-fill-y.png}
 \caption{Similar layout with \code{expand=TRUE} but different values
   of \code{fill}. The space allocated to the  top and bottom buttons
   through expansion fills the vertical area, as these were added with
   \code{side="top"} and \code{side="bottom"}; whereas the left and
   right buttons expand in the horizontal direction, as they were
   added with sides \code{left} and \code{right}. The different
   \code{fill} values direct the buttons to take up this allocated
   space in different manners.}
 \label{fig:tcltk-expand-fill-arguments}
\end{figure}


Figure~\ref{fig:tcltk-expand-fill-arguments} shows examples of
different values for \qcode{fill} when \code{expand=TRUE} is
specified. We used the following code to create the
images:~\footnote{This example follows one of \citep{Walsh}}
<<expandFill>>=
w <- tktoplevel()
tkwm.title(w, "Expand/Fill arguments")
f <- ttkframe(w, padding=c(3,3,12,12))
tkpack(f, expand=TRUE, fill="both")
##
packButton <- function(txt, ...) 
  tkpack(b <- ttkbutton(f, text=txt))
##
packButton("Top",    side="top",    expand=TRUE, fill="both") 
packButton("Bottom", side="bottom", expand=TRUE, fill="both") 
packButton("Left",   side="left",   expand=TRUE, fill="both") 
packButton("Right",  side="right",  expand=TRUE, fill="both") 
@ 
%

Modifying the fill styles was easy, for example
<<results=hide>>=
children <- as.character(tkwinfo("children", f))
sapply(children, tkpack.configure, fill="none")
@ 
\end{example}



\paragraph{Not enough space}
When the toplevel window does not have sufficient space to satisfy the
combined size requests of its child components either some
widgets will be covered or one can resize the toplevel window.
When components are covered, the ones that are packed in first are given
highest priority in the size request.

To force a recompuation of of the size of the toplevel window, one can
call the \subcommand{geometry}{wm} subcommand with an empty string:
<<eval=FALSE>>=
tkwm.geometry(tt, "")
@ 
%
The toplevel window, \code{tt} above, can be recovered from a child
component, say \code{b}, through
<<eval=FALSE>>=
tkwinfo("toplevel", b)
@ 


<<NotEnoughSpace, echo=FALSE>>=
## example of last in first covered
## Create this GUI, then shrink window with the mouse
w <- tktoplevel()
f <- ttkframe(w); tkpack(f, expand=TRUE, fill="both")

g1 <- ttkframe(f); tkpack(g1, expand=TRUE, fill="both")
g2 <- ttkframe(f); tkpack(g2, expand=TRUE, fill="both")

b11 <- ttkbutton(g1, text="first")
b12 <- ttkbutton(g1, text="second")
b21 <- ttkbutton(g2, text="first")
b22 <- ttkbutton(g2, text="second")

tkpack(b11, side="left"); tkpack(b12, side="left")
tkpack(b21, side="right"); tkpack(b22, side="right")
## Now shrink window

@ 
%


\paragraph{propagate}
In Example~\ref{ex-tcltk-populate-treeview} we define a convenience
function for creating a table widget. There we have a call to the
subcommand \subcommand{propagate}{pack}.  This prevents the querying
of the child widgets to compute the size request. In the example, this
is useful as the scrollbars used should depend on the size requested
by the parent, and not the underlying table widget.


\begin{example}{Packing dialog buttons}{ex-tcltk-pack}
  \SweaveInput{ex-tcltk-pack.Rnw}
\end{example}

\begin{example}{A non-modal dialog}{ex-tcltk-non-modal-dialog}
  \SweaveInput{ex-tcltk-simple-dialog.Rnw}
\end{example}


\subsection{Grid}
\label{sec:tcltk:grid}
The \function{tkgrid} geometry manager is used to align child widgets
in rows and columns.  In its simplest usage, a command like
\begin{Schunk}
  \begin{Sinput}
tkgrid(child1, child2,..., childn)    
  \end{Sinput}
\end{Schunk}
will place the $n$ children in a new row, in columns $1$ through
$n$. If desired, the specific row and column can be specified through the
\option{row}{tkgrid} and \option{column}{tkgrid} options, counting of
rows and columns starts with $0$.  Spanning of multiple rows and columns
can be specified with integers $2$ or greater by the
\option{rowspan}{tkgrid} and \option{colspan}{tkgrid} options. These
options, and others, can be adjusted through the
\function{tkgrid.configure} function.


\paragraph{The tkgrid.rowconfigure, tkgrid.columnconfigure commands}
When the managed container is resized, the grid manager consults
weights that are assigned to each row and column to see how to
allocate the extra space. Allocation is based on proportions, not
specified sizes. The weights are configured with the
\function{tkgrid.rowconfigure} and \function{tkgrid.columnconfigure}
functions through the option \option{weight}{tkgrid.columnconfigure}.
The weight is a value between $0$ and $1$. If there are just two rows, and
the first row has weight $1/2$ and the second weight $1$, then the extra
space is allocated twice as much for the second row. The specific row
or column must also be specified. Again. rows and columns are referenced
starting with $0$ not the usual \R-like $1$. To specify a weight of $1$
to the first row would be done with a command like:

<<echo=FALSE>>=
w <- tktoplevel()
tkwm.title(w, "tkgrid.rowconfigure example")
parent <- ttkframe(w); tkpack(parent)
child <- ttklabel(parent, text="test")
tkgrid(child)
@ 
%
<<>>=
tkgrid.rowconfigure(parent, 0, weight=1)
@ 
%
\paragraph{The sticky option}
The \function{tkpack} command had options \code{anchor} and
\code{expand} and \code{fill} to control what happens when more space
is available then requested by a child component. The
\option{sticky}{tkgrid} option for \function{tkgrid} combines
these. The value is a combination of the compass points
\qcode{n},\qcode{e},\qcode{w}, and \qcode{s}. A specification
\qcode{ns} will make the child component ``stick'' to the top and
bottom of the cavity that is provided, similar to the \code{fill="y"}
option for \function{tkpack}. A value of \qcode{news} will make the
child component expand in all the direction like \code{expand=TRUE, fill="both"}.

\paragraph{Padding}
As with \function{tkpack}, \function{tkgrid} has options
\option{ipadx}{tkgrid}, \option{ipady}{tkgrid}, \option{padx}{tkgrid},
and \option{padx}{tkgrid} to give internal and external space around a
child.

\paragraph{Size}
The function \function{tkgrid.size} will return the number of columns
and rows of the specified parent container that is managed by a
grid. This can be useful when trying to position child components
through the options \code{row} and \code{column}.

\paragraph{Forget}
To remove a child from the parent, the \function{tkgrid.forget}
function can be used with the child object as its argument.


% \begin{example}{Using \function{tkgrid} and \function{tkpack} to draw some world flags}{ex-tcltk-flags}
%   \SweaveInput{ex-tcltk-flags.Rnw}
% \end{example}


\begin{example}{Using \function{tkgrid} to create a toolbar}{ex-tcltk-toolbar}
  \SweaveInput{ex-tcltk-toolbar.Rnw}
\end{example}

\begin{example}{Using \function{tkgrid} to layout a calendar}{ex-tkgrid-calendar}
  \SweaveInput{ex-tcltk-grid-layout}
\end{example}

\section{Other containers}
\label{sec:tcltk:other-containers}
\TK\/ provides just a few other basic containers, here we describe paned windows and notebooks.

\subsection{Paned Windows}
\label{sec:tcltk:paned-windows}

A paned window, with sashes to control the individual pane sizes, is constructed by the function
\constructor{ttkpanedwindow}. The primary option, outside of setting
the requested width or height with \option{width}{ttkpanedwindow} and
\option{height}{ttkpanedwindow}, is \option{orient}{ttkpanedwindow},
which takes a value of \qcode{vertical} (the default) or
\qcode{horizontal}. This specifies how the children are stacked, and
is opposite of how the sash is drawn.

%% adding
The returned object can be used as a parent container, although one
does not use the geometry managers to manage them. Instead, the
\method{add}{ttkpanedwindow} command is used to add a child component. For example:
<<panedWindowExample>>=
w <- tktoplevel(); tkwm.title(w, "Paned window example")
pw <- ttkpanedwindow(w, orient="horizontal")
tkpack(pw, expand=TRUE, fill="both")
left <- ttklabel(pw, text="left")
right <- ttklabel(pw, text="right")
#
tkadd(pw, left, weight=1)
tkadd(pw, right, weight=2)
@ 
%
When resizing which child gets the space is determined by the
associated \code{weight}, specified as an integer. The default uses
even weights.  Unlike \GTK\/ more than two children are allowed.

\paragraph{Forget}
The subcommand \subcommand{forget}{ttkpanedwindow} can be used to
unmanage a child component. For the paned window, we have no
convenience function, so we call as follows:
<<>>=
tcl(pw, "forget", right)
tkadd(pw, right, weight=2) ## how to add back
@ 
%
\paragraph{Sash position}
The sash between two children can be adjusted through the subcommand
\subcommand{sashpos}{ttkpanedwindow}. The index of the sash needs
specifying, as there can be more than one. Counting starts at 0. The
value for \code{sashpos} is in terms of pixel width (or height) of the
paned window. The width can be returned and used as follows:
<<>>=
width <- as.integer(tkwinfo("width", pw))  # or "height"
tcl(pw, "sashpos", 0, floor(0.75*width))
@ 
%

\subsection{Notebooks}
\label{sec:tcltk:notebooks}

%% constructor

<<echo=FALSE>>=
## ttknotebook example
w <- tktoplevel(); tkwm.title(w, "Notebook example")
nb <- ttknotebook(w); tkpack(nb, expand=TRUE, fill="both")
@ 
%
\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-tcltk-notebook}
 \caption{A basic notebook under \OSX{}}
  \label{fig:fig-notebook-example}
\end{figure}

Tabbed notebook containers are produced by the
\constructor{ttknotebook} constructor.  Notebook pages can be added
through the \subcommand{add}{ttknotebook} subcommand or inserted after
a page through the \subcommand{insert}{ttknotebook} subcommand. The
latter requires a tab ID to be specified, as described below.
Typically, the child components would be containers to hold more
complicated layouts. The tab label is configured similarly to
\function{ttklabel} through the options \option{text}{ttknotebook} and
(the optional) \option{image}{ttknotebook}, which if given has its
placement determined by \option{compound}{ttknotebook}.  The placement
of the child component within the notebook page is manipulated
similarly as \function{tkgrid} through the
\option{sticky}{ttknotebook} option with values specified through
compass points. Extra padding around the child can be added with the
\option{padding}{ttknotebook} option.

\paragraph{Tab identifiers} %%integer (0-based), object (ID), "current", "end"
Many of the commands for a notebook require a specification of a
desired tab. This can be given by index, starting at 0; by the values
\code{"current"} or \code{"end"}; by the child object added to the
tab, either as an \R\/ object or an ID; or in terms of $x$-$y$
coordinates in the form \code{"@x,y"} (likely found through a
binding).

%% illustrate add, inser
To illustrate, if \code{nb} is a \code{ttknotebook} object, then these
commands would add pages (cf. Figure~\ref{fig:fig-notebook-example}):
<<notebookExample, results=hide>>=
iconFile <- system.file("images",paste("help","gif",sep="."),
                        package="gWidgets")
iconName <- "::tcl::helpIcon"
tkimage.create("photo", iconName, file = iconFile)
#
l2 <- ttklabel(nb, text="Page 2")
tkadd(nb, l2, sticky="nswe", text="label 2", 
    image=iconName, compound="right")
## put l1 first (a tabID of 0); use tkinsert
l1 <- ttklabel(nb, text="Page 1")
tkinsert(nb, 0, l1, sticky="nswe", text="label 1")
@ 
%
There are several useful subcommands to extract information from the
notebook object.  For instance, \code{index} to return the page index
(0-based), \code{tabs} to return the page IDs, \code{select} to select
the displayed page, and \code{forget} to remove a page from the
notebook. (There is no means to place close icons on the tabs.)
Except for \code{tabs}, these require a specification of a tab ID.
<<>>=
tcl(nb, "index", "current")           # current page for tabID
length(as.character(tcl(nb,"tabs")))  # number of pages
tcl(nb, "select", 0)        # select viewable page by index
tcl(nb, "forget", l1)       # "forget" removes a page
tcl(nb, "add", l1)          # can be managed again.
@
%

%% keyboard
The notebook state can be manipulated through the keyboard, provided traversal is enabled. This can be done through
<<notebookTraversal, results=hide>>=
tcl("ttk::notebook::enableTraversal", nb)
@ 

If enabled, the shortcuts such as \kbd{control-tab} to move to the
next tab are implemented. If new pages are added or inserted with the
option \option{underline}{ttknotebook}, which takes an integer value
(0-based) specifying which character in the label is underlined, then
a keyboard accelerator is added for that letter.

\paragraph{Bindings}
%% virtualevent
Beyond the usual events, the notebook widget also generates a
\code{\VirtualEvent{NotebookTabChanged}} virtual event after a new tab is
selected.

%% limitations: no easy way to get close buttons (to me anyways); no
%% graceful way to handle too man tabs.
The notebook container in \TK\/ has a few limitations. For instance,
there is no graceful management of too many tabs, as there is with
\GTK, as well there is no easy way to implement close buttons as an
icon, as in \Qt.

