\subsection{Modal dialogs}
\label{sec:modal-dialogs}

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-tcltk-confirm-dialog.png}
  \caption{A basic modal dialog constructed by \code{tkmessageBox}.}
  \label{fig:fig-tcltk-confirm-dialog}
\end{figure}

%% messageBox
The \constructor{tkmessageBox} constructor can be used to create
simple modal dialogs allowing a user to confirm an action, using the
native toolkit if possible. This constructor replaces the older
\code{tkdialog} dialogs. The arguments \argument{title}{tkmessageBox},
\argument{message}{tkmessageBox} and \argument{detail}{tkmessageBox}
are used to set the text for the dialog. The \code{title} may not
appear for all operating systems. A messageBox dialog has an
\argument{icon}{tkmessageBox} argument. The default icon is
\qcode{info} but could also be one of \qcode{error}, \qcode{question},
or \qcode{warning}. The buttons used are specified through the
\argument{type}{tkmessageBox} argument with values of \qcode{ok},
\qcode{okcancel}, \qcode{retrycancel}, \qcode{yesno}, or
\qcode{yesnocancel}. When a button is clicked the dialog is destroyed
and the button label returned as a value. The argument
\argument{parent}{tkmessageBox} can be given to specify which window
the dialog belongs to. Depending on the operating system this may be
used when drawing the dialog.

A sample usage is:
<<eval=FALSE>>=
tkmessageBox(title="Confirm", message="Really exit?", 
             detail="Changes need saving.", 
             icon="question", type="okcancel")
@ 
%% 

\paragraph{The tkwait function}
If the default modal dialog is not enough -- for instance there is no
means to gather user input -- then a toplevel window can be made
modal. The \function{tkwait} function will cause a top-level window to
be modal and \function{tkgrab.release} will return the interactivity
for the window. We illustrate a simple use by example, beginning by
adding a label to a window:

<<>>=
message <- "We care ..."
dlg <- tktoplevel(); tkwm.withdraw(dlg)
tkwm.overrideredirect(dlg, TRUE)   # no decoration
f <- ttkframe(dlg, padding=5)
tkpack(f, expand=TRUE, fill="both")
tkpack(ttklabel(f, text=message), pady=5)
@ 

We will use \function{tkwait.variable} which waits for a change to
variable, in this case \code{flag} defined next. In the button's command
we release the window then change this value, ending the wait.
<<>>=
flag <- tclVar("")
tkpack(ttkbutton(f, text="dismiss", command=function() {
  tkgrab.release(dlg)
  tclvalue(flag) <- "Destroy"
}))
@ 
Now we show the window and wait on the \code{flag} variable to change.
<<>>=
tkwm.deiconify(dlg)
tkwait.variable(flag)
@ 

When the flag is changed, the flow returns to the program. Here we
print a message then destroy the dialog.
<<>>=
print("Thanks")
tkdestroy(dlg)
@ 


\subsection{File and directory selection}
\label{sec:file-direct-select}

\Tk\/ provides constructors for selecting a file, for selecting a
directory or for specifying a filename when saving. These are
implemented by \constructor{tkgetOpenFile},
\constructor{tkchooseDirectory}, and \constructor{tkgetSaveFile}
respectively. Each of these can be called with no argument, and
each returns a \code{tclObj} object. The value is empty when there is no selection made.

The dialog will appear in a relationship with a toplevel window if the argument
\argument{parent}{tkgetOpenFile} is specified The
\argument{initialdir}{tkgetOpenFile} and
\argument{initialfile}{tkgetOpenFile} can be used to specify the
initial values in the dialog.  The
\argument{defaultextension}{tkgetSaveFile} argument can be used to
specify a default extension for the file.

When browsing for files, it can be convenient to filter the available
file types that can be selected. The \argument{filetypes}{tkgetOpenFile} argument is used for this task. However,
the file types are specified using \TCL\/ brace-notation, not \R\/ code. For example,
to filter out various image types, one could have 
<<eval=FALSE>>=
tkgetOpenFile(filetypes = paste(
                "{{jpeg files} {.jpg .jpeg} }",
                "{{png files} {.png}}",
                "{{All files} {*}}", sep=" ")) # needs space
@ 
Extending this is hopefully clear from the pattern above.

\begin{example}{A ``File'' menu}{ex-tcltk-file-menu}
  To illustrate, a simple example for a file menu could be:
<<>>=  
w <- tktoplevel(); tkwm.title(w, "File menu example")
mb <- tkmenu(w); tkconfigure(w, menu=mb)
fileMenu <- tkmenu(mb)
tkadd(mb, "cascade", label="File", menu=fileMenu)

tkadd(fileMenu,"command",label="Source file...",
      command= function() {
        fName <- tkgetOpenFile(filetypes=
                        "{{R files} {.R}} {{All files} *}")
        if(file.exists(fName <- as.character(fName)))
           source(tclvalue(fName))
      })
tkadd(fileMenu, "command", label="Save workspace as...",
      command=function() {
        fName <- tkgetSaveFile(defaultextension="Rsave")
        if(nchar(fname <- as.character(fName)))
          save.image(file=fName)
      })
tkadd(fileMenu, "command", label="Set working directory...",
      command=function() {
        dName <- tkchooseDirectory()
        if(nchar(dName <- as.character(dName)))
          setwd(dName)
      })
@   
\end{example}

\subsection{Choosing a color}
\Tk\/ provides the command \code{tk\_chooseColor} to construct a dialog for selection of a color by RGB value. There are three optional arguments \argument{initialcolor}{tk\_chooseColor} to specify an inital color such as \qcode{\#efefef}, \argument{parent}{tk\_chooseColor} to make the dialog a child of a specified window and \argument{title}{tk\_chooseColor} to specify a title for the dialog. The return value is in hex-coded RGB quantitles. 
There is no constructor in \pkg{tcltk}, but one can use the dialog as follows:
<<ColorSelection>>=
w <- tktoplevel(); tkwm.title(w, "Select a color")
f <- ttkframe(w, padding=c(3,3,3,12))
tkpack(f, expand=TRUE, fill="both")
colorWell <- tkcanvas(f, width=40, height=16, 
                      background="#ee11aa",
                      highlightbackground="#ababab") 
tkpack(colorWell)
tkpack(ttklabel(f, text="Click color to change"))
#
tkbind(colorWell,"<Button-1>", function(W) {
  color <- tcl("tk_chooseColor", parent=W, 
               title="Set box color")
  color <- tclvalue(color)
  print(color)
  if(nchar(color))
    tkconfigure(W, background = color)
})
@ 
