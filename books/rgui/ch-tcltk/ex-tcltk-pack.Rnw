<<echo=FALSE>>=
library(tcltk)
## pack examples
## how to pack in buttons
@ 
%%
<<echo=FALSE>>=
window <- tktoplevel()
tkwm.title(window, "Examples using pack as a geometry manager")
frame <- ttkframe(window, padding = c(3,3,12,12))
tkpack(frame, expand = TRUE, fill = "both")
@ 
%%
This example shows how one can pack in action buttons, such as when a
dialog is created.

\begin{figure}
  \centering
  \includegraphics[width=.5\textwidth]{fig-tcltk-pack-buttons.png}
  \caption{Demonstration of using \code{tkpack} options showing
    effects of using the \code{side}
    and \code{padx} options to create
    dialog buttons.}
  \label{fig:tcltk-pack-buttons}
\end{figure}


The first example just uses \code{tkpack} without any arguments except
the side to indicate the buttons are packed in left to right, not top
to bottom.
<<results=hide>>=
frame_1 <- ttklabelframe(frame, text="plain vanilla")
tkpack(frame_1, expand = TRUE, fill = "x")
l <- function(f) 
  list(ttkbutton(f, text = "cancel"), ttkbutton(f, text = "ok"))
sapply(l(frame_1), tkpack, side = "left")
@ 

Typically the buttons are right justified. One way to do this is to
pack in using \code{side} with a value of \qcode{right}. This shows
how to use a blank expanding label to take up the space on the left.\ilayout{spring}
<<moveRight, results=hide>>=
frame_2 <- ttklabelframe(frame, text = "push to right")
tkpack(frame_2, expand = TRUE, fill = "x")
tkpack(ttklabel(frame_2, text = " "), 
       expand = TRUE, fill = "x", side = "left")
sapply(l(frame_2), tkpack, side = "left")
@ 

Finally, we add in some padding to conform to Apple's design specification that such
buttons should have a 12 pixel separation.
<<appleSays, results=hide>>=
frame_3 <- ttklabelframe(frame, text = "push to right with space")
tkpack(frame_3, expand = TRUE, fill = "x")
tkpack(ttklabel(frame_3, text = " "), expand = TRUE, fill = "x", 
       side = "left")
sapply(l(frame_3), tkpack, side = "left", padx = 6)
@ 
