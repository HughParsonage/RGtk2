This example shows how to use  a window, frames,  labels, buttons,
icons, packing and bindings to create a non-modal dialog. 

\begin{figure}
  \centering
  \includegraphics[width=.4\textwidth]{fig-tcltk-simple-dialog.png}
  \caption{Example of a simple dialog}
  \label{fig:fig-tcltk-simple-dialog}
\end{figure}

<<echo=FALSE>>=
## example of  simple non-modal dialog
## much taken from msgbox.tcl in tk source

library(tcltk)
@
Although not written as a function, we set aside the values that would
be passed in were it.
<<results=hide>>=
title <- "message dialog"
message <- "Do you like tcltk so far?"
parent <- NULL
tkimage.create("photo", "::img::tclLogo", 
               file = system.file("images","tclp.gif",
                 package = "ProgGUIinR"))
@ 

The main top-level window is given a title, then withdrawn while
the GUI is created. 
<<>>=
window <- tktoplevel()
tkwm.title(window, title)
tkwm.state(window, "withdrawn")
frame <- ttkframe(window,  padding = c(3, 3, 12, 12))
tkpack(frame, expand = TRUE, fill = "both")
@ 
As usual, we added a frame so that any themes are respected.

If the parent is non-null and is viewable, then the dialog is made
transient to a parent, The parent need not be a top-level window, so
\function{tkwinfo} if used to find the parent's top-level window. For
Mac OS X, we use the \code{notify} attribute to bounce the dock icon
until the mouse enters the window area.

<<>>=
if(!is.null(parent)) {
  parent_window <- tkwinfo("toplevel", parent)
  if(as.logical(tkwinfo("viewable", parent_window))) {
    tkwm.transient(window, parent)
    if(as.character(tcl("tk", "windowingsystem")) == "aqua") {
      tcl("wm","attributes", parent_window, notify = TRUE) # bounce
      tkbind(parent_window, "<Enter>", function()        # stop
             tcl("wm","attributes", parent_window, notify = FALSE)) 
    }
  }
}
@ 

We will use a standard layout for our dialog with an icon on the left,
a message and buttons on the right. We pack the icon into the left side of the frame,
<<>>=
label <- ttklabel(frame, image = "::img::tclLogo", padding = 5) # recycle
tkpack(label, side = "left")
@ 

A nested frame will be used to layout the message area and button area. Since the \function{tkpack} default is to pack in top to bottom, no \code{side} specification is made.
<<>>=
frame_1 <- ttkframe(frame)
tkpack(frame_1, expand = TRUE, fill = "both")
#
m <- ttklabel(frame_1, text = message)
tkpack(m, expand = TRUE, fill = "both")
@ 

The buttons have their own frame, as they are layed out horizontally. 
<<>>=
frame_2 <- ttkframe(frame_1)
tkpack(frame_2)
@ 
%
The callback function for the OK button prints a message then destroys the window.
<<>>=
ok_callback <- function() {
  print("That's great")
  tkdestroy(w)
}
ok_button <- ttkbutton(frame_2, text = "OK", command = ok_callback)
cancel_button <- ttkbutton(frame_2, text = "Cancel", 
                          command = function() tkdestroy(window))
#
tkpack(ok_button, side = "left", padx = 12)  # give some space
tkpack(cancel_button)
@ 
%

As our interactive behavior is consistent for both buttons, we make a
binding to the \code{TButton} class, not individually. The first will
invoke the button command when the \kbd{return} key is pressed, the
latter two will highlight a button when the focus is on it.
<<>>=
tkbind("TButton", "<Return>", function(W) tcl(W, "invoke"))
tkbind("TButton", "<FocusIn>", function(W) 
       tcl(W, "state", "active"))
tkbind("TButton", "<FocusOut>", function(W) 
       tcl(W, "state", "!active"))
@ 
%
Now we bring the dialog back from its withdrawn state, fix the size
and set the initial focus on the OK button.
<<>>=
tkwm.state(window, "normal")
tkwm.resizable(window, FALSE, FALSE)
tkfocus(ok_button)
@ 
