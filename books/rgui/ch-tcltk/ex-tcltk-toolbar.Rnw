<<echo=FALSE>>=
## Toolbar example in Tk
## tbFrame and Frame are key containers
library(tcltk)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.4\textwidth]{fig-tcltk-toolbar.png}
  \caption{Illustration of using \code{tkpack} to make a toolbar. }
  \label{fig:fig-tcltk-toolbar}
\end{figure}




\TK\/ does not have a toolbar widget. Here we use \function{tkgrid} to
show how we can add one to a top-level window in a manner that is not
affected by resizing. We begin by packing a frame into a
top-level window.
<<>>=
w <- tktoplevel(); tkwm.title(w, "Toolbar example")
f <- ttkframe(w, padding=c(3,3,12,12))
tkpack(f, expand=TRUE, fill="both")
@ 
Our example has two main containers: one to hold the toolbar buttons
and one to hold the main content.
<<>>=
tbFrame <- ttkframe(f, padding=0)
contentFrame <- ttkframe(f, padding=4)
@ 
The \function{tkgrid} geometry manager is used to place the toolbar at
the top, and the content frame below. The choice of sticky and the weights ensure that
the toolbar does not resize if the window does.
<<>>=
tkgrid(tbFrame, row=0, column=0, sticky="we")
tkgrid(contentFrame, row=1, column=0, sticky = "news")
tkgrid.rowconfigure(f, 0, weight=0)
tkgrid.rowconfigure(f, 1, weight=1)
tkgrid.columnconfigure(f, 0, weight=1)
## some example to pack into the content area
tkpack(ttklabel(contentFrame, text="Lorem ipsum dolor sit amet..."))
@ 

Now to add some buttons to the toolbar. We first show how to create a
new style for a button, slightly modifiying the themed button to set
the font and padding, and eliminate the border if the operating system allows. 
<<>>=
tcl("ttk::style", "configure", "Toolbar.TButton", 
    font="helvetica 12", padding=0, borderwidth=0)
@ 
This
\code{makeIcon} function finds stock icons from the \pkg{gWidgets}
package and adds them to a button.
<<>>=
makeIcon <- function(parent, stockName, command=NULL) {
  iconFile <- system.file("images", 
                          paste(stockName,"gif",sep="."), 
                          package="gWidgets")
  if(nchar(iconFile) == 0) {
    b <- ttkbutton(parent, text=stockName, width=6)
  } else {
    iconName <- paste("::img::",stockName, sep="")
    tkimage.create("photo", iconName, file = iconFile)
    b <- ttkbutton(parent, image=iconName, 
                   style="Toolbar.TButton", text=stockName, 
                   compound="top", width=6)
    if(!is.null(command))
      tkconfigure(b, command=command)
  }
  return(b)
}
@ 

To illustrate, we pack in some icons. Here we use \function{tkpack}.  
One does not use \function{tkpack} and \function{tkgrid} to manage
children of the same parent, but these are children of \code{tbFrame},
not \code{f}.
<<>>=
tkpack(makeIcon(tbFrame, "ok"), side="left")
tkpack(makeIcon(tbFrame, "quit"), side="left")
tkpack(makeIcon(tbFrame, "cancel"), side="left")
@ 

These two bindings show how to slightly highlight the icon when the
mouse is over that button, so that the user has some extra feedback.
<<>>=
changeGamma <- function(W, gamma=1.0) {
  if(as.character(tkwinfo("class",W)) == "TButton") {
    img <- tkcget(W,"image"=NULL)
    tkconfigure(img, gamma=gamma)
  }
}
tkbind(w,"<Enter>", function(W) changeGamma(W, gamma=0.5))
tkbind(w,"<Leave>", function(W) changeGamma(W, gamma=1.0))
@ 

