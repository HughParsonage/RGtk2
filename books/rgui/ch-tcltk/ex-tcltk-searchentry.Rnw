<<echo=FALSE>>=
## Search box example
## uses image to give curve: from http://wiki.tcl.tk/18188
## demonstrates style for entry widget
## uses default value for text that is in gray
library(tcltk)
@ 

This example follows one found at \url{http://wiki.tcl.tk/18188} where
a entry widget has its style set so that it resembles a search box for
Mac OS X. This involves setting a background to a gif image to curve
the borders of the entry widget and adding a magnifying class icon. We
show the commands, but do not offer much description. Much more on
using styles is available online in Mark Roseman's \Tk\/ tutorial at
\url{http://www.tkdocs.com/tutorial/}.


\begin{figure}
  \centering
  \includegraphics[width=.4\textwidth]{fig-tcltk-searchentry.png}
  \caption{Illustration of using Tk styles to configure an entry widget to look like a Mac OS X search entry box.}
  \label{fig:fig-tcltk-searchentry}
\end{figure}

<<setUpStyle, echo=FALSE>>=
## Data here is a uuencode gif file
.imageData <- paste("R0lGODlhKgAaAOfnAFdZVllbWFpcWVtdWlxeW11fXF9hXmBiX2ZnZWhpZ2lraGxua25wbXJ0",
               "cXR2c3V3dHZ4dXh6d3x+e31/fH6AfYSGg4eJhoiKh4qMiYuNio2PjHmUqnqVq3yXrZGTkJKU",
               "kX+asJSWk32cuJWXlIGcs5aYlX6euZeZloOetZial4SftpqbmIWgt4GhvYahuIKivpudmYei",
               "uYOjv5yem4ijuoSkwIWlwYmlu56gnYamwp+hnoenw4unvaCin4ioxJCnuZykrImpxZmlsoaq",
               "zI2pv6KkoZGouoqqxpqms4erzaOloo6qwYurx5Kqu5untIiszqSmo5CrwoysyJeqtpOrvJyo",
               "tZGsw42typSsvaaopZKtxJWtvp6qt4+uy6epppOuxZCvzKiqp5quuZSvxoyx06mrqJWwx42y",
               "1JKxzpmwwaqsqZaxyI6z1ZqxwqutqpOzz4+01qyuq56yvpizypS00Jm0y5W10Zq1zJa20rCy",
               "rpu3zqizwbGzr6C3yZy4z7K0saG4yp250LO1sqK5y5660Z+70qO7zKy4xaC806S8zba4taG9",
               "1KW9zq66x6+7yLi6t6S/1rC8yrm7uLO8xLG9y7q8ubS9xabB2anB07K+zLW+xrO/za7CzrTA",
               "zrjAyLXBz77BvbbC0K/G2LjD0bnE0rLK28TGw8bIxcLL07vP28HN28rMycvOyr/T38DU4cnR",
               "2s/RztHT0NLU0cTY5MrW5MvX5dHX2c3Z59bY1dPb5Nbb3dLe7Nvd2t3f3NXh797g3d3j5dnl",
               "9OPl4eTm4+Ln6tzo9uXn5Obo5eDp8efp5uHq8uXq7ejq5+nr6OPs9Ovu6unu8O3v6+vw8+7w",
               "7ezx9O/x7vDy7/Hz8O/19/P18vT38/L3+fb49Pf59vX6/fj69/b7/vn7+Pr8+ff9//v9+vz/",
               "+/7//P//////////////////////////////////////////////////////////////////",
               "/////////////////////////////////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJZAD/ACwC",
               "AAIAKAAWAAAI/gD/CRz4bwUGCg8eQFjIsGHDBw4iTLAQgqBFgisuePCiyJOpUyBDihRpypMi",
               "Lx8qaLhIMIyGFZ5sAUsmjZrNmzhzWpO2DJgtTysqfGDpxoMbW8ekeQsXzty4p1CjRjUXrps3",
               "asJsuclQ4uKKSbamMR3n1JzZs2jRkh1HzuxVXX8y4CDYAwqua+DInVrRwMGJU2kDp31KThy1",
               "XGWGDlxhi1rTPAUICBBAoEAesoIzn6Vm68MKgVAUHftmzhOCBCtQwQKSoABgzZnJdSMmyIPA",
               "FbCotdUQAIhNa9B6DPCAGbZac+SowVIMRVe4pwkA4GpqDlwuAAmMZx4nTtfnf1mO5JEDNy46",
               "MHJkxQEDgKC49rPjwC0bqGaZuOoZAKjBPE4NgAzUvYcWOc0QZF91imAnCDHJ5JFAAJN0I2Ba",
               "4iRDUC/gOEVNDwIUcEABCAgAAATUTIgWOMBYRFp80ghiAQIIVAAEAwJIYI2JZnUji0XSYAYO",
               "NcsQA8wy0hCTwAASXGOiONFcxAtpTokTHznfiLMNMAkcAMuE43jDC0vLeGOWe2R5o4sn1LgH",
               "GzkWsvTPMgEOaA433Ag4TjjMuDkQMNi0tZ12sqWoJ0HATMPNffAZZ6U0wLAyqJ62RGoLLrhI",
               "aqmlpzwaEAAh+QQJZAD/ACwAAAAAKgAaAAAI/gD/CRw40JEhQoEC+fGjcOHCMRAjRkxDsKLF",
               "f5YcAcID582ZjyBDJhmZZIjJIUySEDHiBMhFghrtdNnRAgSHmzhz6sTZQcSLITx+CHn5bxSk",
               "Nz5MCMGy55CjTVCjbuJEtSrVQ3uwqDBRQwrFi476SHHxow8qXcemVbPGtm21t3CnTaP27Jgu",
               "VHtuiIjBsuImQkRiiEEFTNo2cOTMKV7MuLE5cN68QUOGSgwKG1EqJqJDY8+rZt8UjxtNunTj",
               "cY3DgZOWS46KIFgGjiI0ZIsqaqNNjWjgYMUpx8Adc3v2aosNMAI1DbqyI9WycOb4IAggQEAB",
               "A3lQBxet/TG4cMpI/tHwYeSfIzxM0uTKNs7UgAQrYL1akaDA7+3bueVqY4NJlUhIcQLNYx8E",
               "AIQ01mwjTQ8DeNAdfouNA8440GBCQxJY3MEGD6p4Y844CQCAizcSgpMLAAlAuJ03qOyQRBR3",
               "nEHEK+BMGKIui4kDDAAIPKiiYuSYSMQQRCDCxhiziPMYBgDkEaEaAGQA3Y+MjUPOLFoMoUUh",
               "cKxRC4ngeILiH8Qkk0cCAUzSDZWpzbLEE1EwggcYqWCj2DNADFDAAQUgIAAAEFDDJmPYqNJF",
               "F1s4cscTmCDjDTjdSPOHBQggUAEQDAgggTWDPoYMJkFoUdRmddyyjWLeULMMMcAsIw0x4wkM",
               "IME1g25zyxpHxFYUHmyIggw4H4ojITnfiLMNMAkcAAub4BQjihRdDGTJHmvc4Qo1wD6Imje6",
               "eILbj+BQ4wqu5Q3ECSJ0FOKKMtv4mBg33Pw4zjbKuBIIE1xYpIkhdQQiyi7OtAucj6dt48wu",
               "otQhBRa6VvSJIRwhIkotvgRTzMUYZ6xxMcj4QkspeKDxxRhEmUfIHWjAgQcijEDissuXvCyz",
               "zH7Q8YQURxDhUsn/bCInR3AELfTQZBRt9BBJkCGFFVhMwTNBlnBCSCGEIJQQIAklZMXWRBAR",
               "RRRWENHwRQEBADs=}",
               sep="\n")
@ 

The use of uuencoded gif images allows one to store image data as
text. The variable \code{.imageData} contains this for the background
image of our entry widget. The following commands create two images,
the latter to display when the widget has the focus.
<<results=hide>>=
tkimage.create("photo","::image::search1", 
               data=.imageData, format="gif -index 0")
tkimage.create("photo","::image::search2", 
               data=.imageData, format="gif -index 1")
@ 

The following command creates a new style, \code{Search.field}, which has an image specified for when it is drawn, another for when it has the focus, a border set so that the magnifying glass icon isn't written over with text, and a value of \code{sticky} so that it stretches from left to right -- but not top to bottom -- when resized.
<<searchFieldElement>>=
.Tcl(paste("ttk::style element create Search.field ",
           "image {::image::search1 focus ::image::search2} ",
           "-border {22 7 14} -sticky ew",
           sep=""))
@ 

The following lays out the entry style. The search field above is given. It has children of padding and textarea which are simply told to stretch in all directions when resized.
<<>>=
.Tcl(paste("ttk::style layout Search.entry {",
           "Search.field -sticky nswe -border 1 -children {",
           "Entry.padding -sticky nswe -children {",
           "Entry.textarea -sticky nswe",
           "}}}",
           sep="\n"))
@ 
Finally, this command configures the background for the \code{Search.entry} style.
<<>>=
tcl("ttk::style", "configure", "Search.entry", 
    background="#b2b2b2")
@ 

At this point, we can set up a basic GUI to illustrate the use. First
a toplevel window and themed frame are defined.
<<>>=
w <- tktoplevel()
tkwm.title(w, "Search box example")
f <- ttkframe(w, padding=c(3,3,12,12))
tkpack(f, expand=TRUE, fill="both")
@ 
%%

The entry widget has the style set through its \argument{style}{ttkentry} argument, as follows.
<<>>=
eVar <- tclVar("")
e <- ttkentry(f, textvariable=eVar, style="Search.entry")
tkpack(e)
b <- ttkbutton(f, text="click me"); tkpack(b)
@ 
%%

At this point, we define two bindings to insert some initial text into
the widget to give direction to the user. The first handler is called
on the expose event, when the widget is first drawn, and simply sets
the initial text in gray.
<<>>=
initialText <- "Search"
tkbind(e,"<Expose>", function(W) {
  cur <- as.character(tcl(W,"get"))
  if(length(cur) == 0 || cur == "") {    # first time
    tclvalue(eVar) <- initialText
    tkconfigure(W, foreground="gray50")
  } else {
    tkconfigure(W, foreground="black")
  }
})
@ 
%%

The second binding is to catch the first edit of the entry widget to
replace the initial text with the value input by the user.
<<>>=
tkbind(e,"<FocusIn>", function(W) {
  cur <- as.character(tcl(W, "get"))
  if(cur == initialText) {              # searching for initial text?
    tclvalue(eVar) <- ""
    tkconfigure(W, foreground="black")
  }
})
@ 
