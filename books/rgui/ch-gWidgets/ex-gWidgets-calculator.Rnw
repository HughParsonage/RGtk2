%% A calculator layout example
<<echo=FALSE>>=
## A calculator layout with gWidgets
library(gWidgets)
@ 
The following example shows how one might use the widgets just
discussed to make a GUI that resembles a calculator. Which may offer
familiarity to new \R\/ users, although certainly is no replacement
for a command line.

The \constructor{glayout} container is used to neatly arrange the
widgets. This example illustrates how a child widget can span a block
of multiple cells by using the appropriate indexing. Furthermore, the
\args{spacing} argument is used to tighten up the appearance. The
example also illustrates a useful strategy of storing the widgets
using a list for subsequent manipulations.

The following sets up the layout of the display and buttons.
<<>>=
buttons <- rbind(c(7:9, "(", ")"),
                 c(4:6, "*", "/"),
                 c(1:3, "+", "-"))
bList <- list()
w <- gwindow("glayout for a calculator")
g <- ggroup(cont=w, expand=TRUE, horizontal=FALSE)
tbl <- glayout(cont=g, spacing=2)
                                        
tbl[1, 1:5, anchor=c(-1,0)] <-          # span 5 columns
  (eqnArea <- gedit("", cont=tbl))
tbl[2, 1:5, anchor=c(1,0)] <- 
  (outputArea <- glabel("", cont=tbl))
for(i in 3:5) {
  for(j in 1:5) {
    val <- buttons[i-2, j]
    tbl[i,j] <- (bList[[val]] <- gbutton(val, cont=tbl))
  }
}
tbl[6,2] <- (bList[["0"]] <- gbutton("0", cont=tbl))
tbl[6,3] <- (bList[["."]] <- gbutton(".", cont=tbl))
tbl[6,4:5] <- (eqButton <- gbutton("=", cont=tbl))

outputArea <- gtext("", cont = g)
@

This code defines the handler for each button except the equals button
and then assigns the handler to each button. This is done efficiently,
using the generic \meth{addHandlerChanged}. The handler simply pastes
the text for each button into the equation area.

<<>>=
addButton <- function(h, ...) {
  curExpr <- svalue(eqnArea)
  newChar <- svalue(h$obj)              # the button's value
  svalue(eqnArea) <- paste(curExpr, newChar, sep="")
  svalue(outputLabel) <- ""             # clear label 
}
out <- sapply(bList, function(i) 
              addHandlerChanged(i, handler=addButton))

@ 

When the equals sign is clicked, the expression is evaluated and if
there are no errors, the output is displayed in the label.
<<>>=
addHandlerClicked(eqButton, handler = function(h,...) {
  curExpr <- svalue(eqnArea)
  out <- try(capture.output(eval(parse(text=curExpr))))
  if(inherits(out,"try-error")) {
    gmessage("There is an error")
    return()
  }
  svalue(outputArea) <- out
  svalue(eqnArea) <- ""            # restart
})
                  
@

