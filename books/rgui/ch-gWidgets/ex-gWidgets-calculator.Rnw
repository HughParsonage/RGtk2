%% A calculator layout example
<<echo=FALSE>>=
## A calculator layout with gWidgets
library(gWidgets)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-gWidgets-calculuator.png}
  \caption{Dumbing down \R{} with \pkg{gWidgets} to make a calculator interface}
  \label{fig:gwidgets-calculator}
\end{figure}

This example shows how one might use the widgets just discussed to
make a GUI (Figure~\ref{fig:gwidgets-calculator}) that resembles a
calculator. Such a GUI may offer familiarity to new \R\/ users,
although certainly it is no replacement for a command line.

The \constructor{glayout} container is used to neatly arrange the
widgets. This example illustrates how a child widget can span a block
of multiple cells by using the appropriate indexing. Furthermore, the
\args{spacing} argument is used to tighten up the appearance. The
example also illustrates a useful strategy of storing the widgets
using a list for subsequent manipulations.\iprogram{iteration}

The following sets up the layout of the display and buttons.
<<>>=
buttons <- rbind(c(7:9, "(", ")"),
                 c(4:6, "*", "/"),
                 c(1:3, "+", "-"))
#
w <- gwindow("glayout for a calculator", visible=FALSE)
g <- ggroup(cont=w, expand=TRUE, horizontal=FALSE)
tbl <- glayout(cont=g, spacing=2)
                                        
tbl[1, 1:5, anchor=c(-1,0)] <-          # span 5 columns
  (eqnArea <- gedit("", cont=tbl))
tbl[2, 1:5, anchor=c(1,0)] <- 
  (outputArea <- glabel("", cont=tbl))
#
bList <- list()
for(i in 3:5) {
  for(j in 1:5) {
    val <- buttons[i-2, j]
    tbl[i,j] <- (bList[[val]] <- gbutton(val, cont=tbl))
  }
}
tbl[6,2] <- (bList[["0"]] <- gbutton("0", cont=tbl))
tbl[6,3] <- (bList[["."]] <- gbutton(".", cont=tbl))
tbl[6,4:5] <- (eqButton <- gbutton("=", cont=tbl))
#
visible(w) <- TRUE
@

This code defines the handler for each button except the equals button
and then assigns the handler to each button. This is done efficiently,
using the generic \meth{addHandlerChanged}. The handler simply pastes
the text for each button into the equation area.

<<results=hide>>=
addButton <- function(h, ...) {
  curExpr <- svalue(eqnArea)
  newChar <- svalue(h$obj)              # the button's value
  svalue(eqnArea) <- paste(curExpr, newChar, sep="")
  svalue(outputArea) <- ""              # clear label 
}
sapply(bList, addHandlerChanged, handler=addButton)
@ 

When the equals sign is clicked, the expression is evaluated and if
there are no errors, the output is displayed in the
label.\iprogram{evaluating strings}
<<>>=
require(evaluate)
addHandlerClicked(eqButton, handler = function(h,...) {
  curExpr <- svalue(eqnArea)
  out <- try(evaluate:::evaluate(curExpr), silent=TRUE)
  if(inherits(out, "try-error")) {
    galert("Parse error", parent=eqButton)
  } else if(is(out[[2]], "error")) {
    msg <- sprintf("Error: %s", out[[2]]$message)
    galert(msg, parent=eqButton)
  } else {
    svalue(outputArea) <- out[[2]]
    svalue(eqnArea) <- ""            # restart
  }
})
                  
@

