This example shows how to use drag and drop to create a simple
interface to plot a number value. The implementation of drag and drop
is unfortunately a bit toolkit dependent. In this use, for
\pkg{gWidgetstctlk} one must first select the value by clicking before
dragging. For \pkg{gWidgetsRGtk2}, the \code{addDropTarget} for
\code{gedit} instances does not work, rather the drop value is just
added at the insertion point.

<<>>=
window <- gwindow("Example of compound widgets")
paned <- gpanedgroup(cont = window)
gvarbrowser(cont = paned)

lyt <- glayout(cont = paned, expand = TRUE)
lyt[1,1, anchor = c(1,0)] <- "x"
lyt[1,2] <- (entry <- gedit("", cont = lyt))
lyt[2,2, anchor = c(-1,1)] <- "(drop value above)"
lyt[3,1] <- (button <- gbutton("plot", cont = lyt))
@
The \code{gvarbrowser} object already has its drop source
specified. For other drag and drop examples, a call to
\code{addDropSource} is needed. Here we show the \code{addDropTarget}
usage where the \code{dropdata} component contains the selected
text. For \code{gvarbrowser}, this uses \code{\$} to indicate
components of lists.
<<>>=
## add drop source already part of gvarbrowser
addDropTarget(entry, handler = function(h,...) svalue(e) <- h$dropdata)
@
\XXX{The svalue svalue use described here}
<<>>=
addHandlerChanged(button, handler = function(h,...) plot(x = svalue(svalue(e)),xlab = svalue(e)))

@
