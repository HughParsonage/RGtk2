%% Overview of gWidgets

% ML: do we really want to discuss the unsupported rJava backend?
% I am also confused about gWidgetsWWW - is it an implementation or
% something that just resembles the gWidgets API?

% JV, I will drop rJava, put in gWidgetsQt, and make brief mention of gWidgetsWWW

The \pkg{gWidgets} package provides a toolkit-independent interface
for the \R\/ user to program graphical user interfaces from within
R. Although the package provides much less functionality than using a
native toolkit interface, \pkg{gWidgets} can be used to create
moderately complex GUIs quickly and easily using a programming
interface that is familiar to the \R\/ user.

The \pkg{gWidgets} package started as a port to \pkg{RGtk2} of the
\pkg{iWidgets} package of Simon Urbanek written fro 
for Swing through \pkg{rJava}~\citep{iWidgets}. Along the way,
\pkg{gWidgets} was extended and abstracted to work with different GUI
toolkit backends available for \R. A separate package provides the
interface. As of writing there are interfaces for \pkg{RGtk2},
\pkg{qtbase}, and \pkg{tcltk}. The \pkg{gWidgetsWWW} package provides a
similar interface for web programming, but does not use \pkg{gWidgets}
itself.

Figure~\ref{fig:gWidgets-three-oses} demonstrates the portability of
\pkg{gWidgets} commands, as it shows realizations on different
operating systems and with different graphical toolkits.

<<eval=FALSE, echo=FALSE>>=
## show (linux, mac, windows) x (RGtk2, tcltk, rJava)
## also test-33.html in rpad dddirectory for gWidgetrs
f <- function(os,toolkit,parent=NULL) {
  w <- gwindow(paste(os,toolkit,sep=":"), width=200, parent=parent)
  g <- ggroup(horiz=FALSE, cont = w)
  
  lst <- list(type="fieldset",
  label = "argument",
  children=list(
  list(type="gcombobox",
  label = "combo",
  items=letters),
  list(type = "gslider",
  label="slider"),
  list(type = "gedit",
  label = "edit",
  text = "edit this")
  )
  )

  gformlayout(lst, cont = g)
  
  bg <- ggroup(cont = g)
  addSpring(bg)
  gbutton("ok", cont = bg)
}

library(gWidgets)
os <- "Linux"
for(j in c("RGtk2","tcltk","Qt")) {
  options(guiToolkit=j)
  f(os,j)
}

@ 
\begin{figure}
  \centering
  \begin{tabular}{ll}
    \includegraphics[width=0.45\textwidth]{ex-33-macosx-rgtk2} &
    \includegraphics[width=0.45\textwidth]{fig-gWidgets-ex-33-tlctk}\\
    \includegraphics[width=0.45\textwidth]{ex-33-linux-qt} &
    \includegraphics[width=0.45\textwidth]{ex-33-gWidgetsWWW}
  \end{tabular}
  \caption{The \pkg{gWidgets} package works with different operating
    systems and different GUI toolkits. This shows, the same code using the
    \pkg{RGtk2}, \pkg{tcltk}, \pkg{qtbase} packages for a toolkit. Additionally,
    the \pkg{gWidgetsWWW} package is used in the lower right figure.}
  \label{fig:gWidgets-three-oses}
\end{figure}

% %% Make figure -- work on layout here
% \XXX{Do mac, windows}
% \begin{figure}
%   \centering
%   \begin{tabular}{lccc}
%     & \pkg{RGtk2} & \pkg{tcltk} & \pkg{rJava} 
%     \\
%     L &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-rgtk2.png} &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-tcltk} &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-rJava} 
%     \\
%     W &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-rgtk2} &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-tcltk} &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-rJava} 
%     \\
%     Mac &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-rgtk2} &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-tcltk} &
%     \includegraphics[width=0.3\textwidth]{ex-33-linux-rJava}
%   \end{tabular}
%   \caption{The \pkg{gWidgets} package works with different operating systems and different GUI toolkits. This shows the combination of \code{linux}, \code{Mac OS X (10.5)} and \code{Windows XP} and the packages \pkg{RGtk2}, \pkg{tcltk}, and \pkg{rJava}}
%   \label{fig:three-oses-three-toolkits}
% \end{figure}


% \begin{figure}
%   \centering
%   \includegraphics[width=.45\textwidth]{ex-33-gWidgetsWWW}
%   \caption{A GUI shown using \pkg{gWidgetsWWW}.}
%   \label{fig:gWidgetsWWW-same-gui}
% \end{figure}





\section{Constructors}
\label{sec:constructors}

We jump right in with an example leaving comments about installation
to the end of the chapter. The following shows some sample
\pkg{gWidgets} commands that set up a basic interface allowing a user
to input some text. The first line loads the package, the others will
be described later.

<<>>=
require(gWidgets)
options(guiToolkit="RGtk2")

w <- gwindow("Text input example", visible=FALSE)
g <- ggroup(container=w)
l <- glabel("Your name:", cont=g)
e <- gedit("", cont=g)
b <- gbutton("Click", cont=g, handler=function(h,...) {
  msg <- sprintf("Hello %s", svalue(e))
  cat(msg, "\n")
})
#
visible(w) <- TRUE
@ 


This example defines five different widgets, a window, a box
container, a label, a single-line text edit area and a button, all
produced by some constructor.


In the \pkg{gWidgets} API most constructors have the following form: 
<<eval=FALSE>>=
gname(arguments, handler = NULL, action = NULL, 
      container = NULL,...,toolkit=guiToolkit())
@ 
where the \code{arguments} vary depending on the object being made. 

In the above, we see that the \code{gwindow} constructor, for a
top-level window, has two arguments passed in, an unnamed one for a
window title and a value for the \code{visible} property. Whereas the
\code{ggroup} constructor takes all the default arguments except for
the parent container.

%% container
A top-level window does not have a parent container, but other GUI
components do. In \pkg{gWidgets}, for the sake of portability, the
parent container is passed to the widget constructor through the
\args{container} argument, as it done in all the other constructors.
This argument name can always be abbreviated \args{cont}. This defines
the GUI layout, a topic taken up in
Chapter~\ref{sec:gWidgets-Containers}.

%% toolkit
The \args{toolkit} argument is usually not specified. It is there to
allow the user to mix toolkits within the same \R\/ session, but in
practice this can cause problems due to competing event loops. The default
for the \args{toolkit} argument is a call to \function{guiToolkit}. 
In our example we have the call
<<eval=FALSE>>=
options(guiToolkit="RGtk2")
@ 
to explicitly set the toolkit. In that case, the call will return this
choice. If there is more than one possibility, and one has not be
selected, then the \function{guiToolkit} will query the user to choose one.

%% return value
The constructors produce one of three general types of objects: containers,
such as the top level window \code{w} and the box container \code{g}
(Table~\ref{tab:gWidgets-container-constructors}); components, such as
a label \code{l}, the edit area \code{e}, or the button \code{b}.
(Tables~\ref{tab:gWidgets-control-widgets}
and~\ref{tab:gWidgets-compound-widgets}); and dialogs (Table~\ref{tab:gWidgets-basic-dialogs}).



%% container argument
% ML: this has already been well explained in preceeding chapters
% A GUI consists of a hierarchical nesting of containers. Each container
% may contain contain controls or additional containers. In a GUI,
% except for top-level windows (including dialogs), every component and
% container is the child of some parent container. 

% ML: This sounds to me that it is a detail of specific toolkit implementations
% The package does not implement layout managers. Rather, in
% the construction of a widget in \pkg{gWidgets}, the
% \meth{add} method for the parent container is called with the new
% object as an argument and the values passed through the \args{...}
% argument as arguments.  


% We remark that not all the toolkits (e.g., \pkg{RGtk2}, \pkg{qtbase})
% require one to combine the construction of an object with the
% specification of the parent container. We don't illustrate this, as
% the resulting code is not cross-toolkit.

% % toolkit argument
% The \code{toolkit} can be specified at time of construction allowing
% toolkits, in theory, to be mixed. Otherwise, the \code{guiToolkit}
% function returns the currently selected toolkit, or queries for one if
% none is selected.  Constructors dispatch on the \code{toolkit} value
% to call the appropriate constructor in the toolkit implementation. The
% return value from the toolkit's constructor is kept in the
% \code{widget} component.

\section{Methods}


In addition to creating a GUI object, except for modal dialog
constructors a constructor also returns a useful \R\/ object. This is
an S4 object of a certain class containing two components:
\code{toolkit} and \code{widget}. (Modal dialogs do not return an
object, as the dialog will be destroyed before the constructor
returns. Instead, their constructors return values reflecting the user
response to the dialog.)


GUI objects have a state determined by one or more of their
properties. In \pkg{gWidgets} many properties are set at the time of
construction. However, there are also several generic methods defined
for \pkg{gWidgets} objects.~\footnote{
  We are a bit imprecise about the term ``method'' here. The \pkg{gWidgets}
  methods call further methods in the underlying toolkit interface
  which we think of a single method call. The actual S4 object has a
  slot for the toolkit and the widget created by the
  toolkit interface to dispatch on. 
}

%% s3 generics
Depending on the class of the object, the \pkg{gWidgets} package provides methods
for the familiar S3 generics \generic{[}, \generic{[$<$-},
\generic{dim}, \generic{length}, \generic{names}, \generic{names$<$-},
\generic{dimnames}, \generic{dimnames$<$-} and \generic{update}.


%% svalue
In our example, we see two cases of the use of generic methods defined by
\pkg{gWidgets}. The call
<<eval=FALSE>>=
svalue(e)
@ 
%
demonstrates the new generic \defn{\meth{svalue}} that is used to get
or set the main property of the widget. For the object \code{e}, the
main property is the text, for the button and label widgets this
property is the label. The \meth{svalue\ASSIGN} assignment method is
used to adjust this property programatically.  For the selection
widgets, there is a natural mapping between vectors or data frames,
and the data to be selected. In this case, the user may want the value
selected or the index of the selected value. The \args{index=TRUE}
argument of \meth{svalue} may be given to refer to values by their
index. For these selection widgets the familiar \meth{[} and
\meth{[\ASSIGN} methods refer to the underlying data to be selected
from.



The call
<<eval=FALSE>>=
visible(w) <- TRUE
@ 
%
sets the visibility property of the top-level window. In this example,
the \code{gwindow} constructor is passed \code{visible=FALSE} to
suppress an initial drawing of the window, making this call to \meth{visible\ASSIGN} necessary to show
the GUI.

Some other methods to adjust the widget's underlying properties are \meth{font\ASSIGN},
to adjust the font of an object; \meth{size} and \meth{size\ASSIGN} to
query and set the size of a widget; and \meth{enabled\ASSIGN}, to adjust
if a widget is sensitive to user input. 

%% tag and tag<- need not be advertised here. They are too hacky.
% %% tag; tag<-
% The methods \meth{tag} and
% \meth{tag\ASSIGN} are similar to the base \function{attr}
% function. However, the attributes persist across copies of the
% object. These are implemented to bypass the pass-by-copy issues that
% can make GUI programming awkward at times.

%% insufficiency of API
The \pkg{gWidgets} API provides just a handful of generic functions
for manipulating an object's properties compared to the number of
methods typically provided by a GUI toolkit for a similar
object. Although this simplicity makes \pkg{gWidgets} easier to work
with, one may wish to get access to the underlying toolkit object to
take advantage of a richer API. The \generic{getToolkitWidget} will provide that
object. We don't illustrate this, as we try to stay toolkit agnostic
in our examples.


%% table of new methods
<<methods, echo=FALSE, results=tex>>=
df <- rbind(
            c("\\meth{svalue, svalue\\ASSIGN}", "Get or set widget's main property"),
            c("\\meth{size\\ASSIGN}","Set preferred size request of widget in pixels"),
            c("\\meth{show}", "Show widget if not visible"),
            c("\\meth{dispose}","Destroy widget or its parent"),
            c("\\meth{enabled, enabled\\ASSIGN}","Adjust sensitivity to user input"),
            c("\\meth{visible, visible\\ASSIGN}","Show or hide object or part of object."),
            c("\\meth{focus\\ASSIGN}","Sets focus to widget"),
            c("\\meth{insert}","Insert text into a multi-line text widget"),
            c("\\meth{font\\ASSIGN}","Set a widget's font"),
            c("\\meth{update}","Update widget values"),
            c("\\meth{isExtant}","Does \\R\\/ object refer to GUI object that still exists"),
            c("",""),
            c("\\meth{[, [\\ASSIGN}","Refers to values in data store"),
            c("\\meth{length}", "\\meth{length} of data store"),
            c("\\meth{dim}","\\meth{dim} of data store"),
            c("\\meth{names}","\\meth{names} of data store "),
            c("\\meth{dimnames}","\\meth{dimnames} of data store"),
            c("",""),
            c("\\meth{tag, tag\\ASSIGN}","Sets an attribute for a widget that persists through copies"),
##            c("\\meth{defaultWidget\\ASSIGN}","Set widget to have initial focus in a dialog"),
            c("\\meth{getToolkitWidget}","Returns underlying toolkit widget for low-level use")
            )
dimnames(df) <- list(NULL,c("Method", "Description"))
cat(booktabs(df, colTypes=c("l","p{0.6\\textwidth}"),
             caption="Generic functions provided or used in the \\pkg{gWidgets} API.",
             label="tab:gWidgets-methods"))
@ 
% \begin{table}
%   \centering
%   \begin{tabular}{l@{\quad}p{.75\textwidth}}
% %    \toprule
%     \meth{svalue, svalue\ASSIGN} & Get or set value for widget\\
%     \meth{[, [\ASSIGN} & If widget has a data store, refers to these values \\
%     \meth{length} & \meth{length} of data store\\
%     \meth{dim} & \meth{dim} of data store\\
%     \meth{names} & \meth{names} of data store \\
%     \meth{dimnames} & \meth{dimnames} of data store\\
%     \meth{update} & update widget values\\
%     \meth{size\ASSIGN}& set size of widget in pixels\\
%     \meth{show}& show widget if not visible\\
%     \meth{dispose} & destroy widget or its parent\\
%     \meth{isExtant} & Does \R\/ object refer to GUI object that still exists\\
%     \meth{enabled, enabled\ASSIGN} & An enabled widget can receive input from the user\\
%     \meth{visible, visible\ASSIGN} & Is widget visible.\\
%     \meth{focus\ASSIGN} & Sets focus to widget\\
%     \meth{defaultWidget, defaultWidget\ASSIGN} & Makes widget have initial
%     focus in a dialog\\
%     \meth{insert} & Used to insert text into a multi-line text widget\\
%     \meth{font\ASSIGN} & Set the font for a widget\\
%     \meth{tag, tag\ASSIGN} & Sets an attribute for a widget that persists
%     through copies\\
%     \meth{id, id\ASSIGN} & A unique ID for a widget\\
%     \meth{getToolkitWidget} & Returns underlying toolkit widget for
%     low-level use\\
%     \bottomrule
%   \end{tabular}
%   \caption{Table of generic functions with methods specified by the \pkg{gWidgets} API.}
%   \label{tab:gWidgets-methods}
% \end{table}

\section{Callbacks}
\label{sec:callbacks}

%% callbacks 

% For all the toolkits, when the user initiates some event with the
% mouse or keyboard, the underlying toolkit will emit some signal. The
% toolkits allow functions, referred to as callbacks, to be called when
% these signals are emitted, allowing the GUI to be made interactive.


In our example, the lines
<<eval=FALSE>>=
b <- gbutton("Click", cont=g, handler=function(h,...) {
  msg <- sprintf("Hello %s", svalue(e))
  cat(msg, "\n")
})
@ 
%
create the button object. The constructor's argument \args{handler} is
used to bind a callback to the click event of the button. Callbacks in
\pkg{gWidgets} have a common signature \code{(h,...)} where \code{h}
is a list with components \code{obj}, to pass in the receiver of the
event (the button in this case), and \code{action} to pass along any
value specified by the \args{action} argument (allowing one to
parameterize the callback).

For example, a typical idiom within a callback is
<<eval=FALSE>>=
prop <- svalue(h$obj)
@ 
%
which assigns the object's main property to \code{prop}.  Some
toolkits pass additional arguments through the callback's \args{...}
argument, so for portability this part of the signature is not optional. For some
handler calls, extra information is passed along through \code{h}. For instance, in the drop
target callback the component \code{h\$dropdata} 
holds the drag-and-drop value.


While one can specify a callback to the constructor, it is often a
better practice to keep separate the construction of an object and the
definition of its callback.  The package provides a number of methods
to add callbacks for different events. The main method is
\meth{addHandlerChanged}, which is used to assign a callback for the
typical event for the widget, such as the clicking of a button. (The
\args{handler} argument, when specified, uses this method call.)  In
addition, there are many ``\meth{addHandlerXXX}'' methods to assign
callbacks to other events, where the \code{XXX} describes the
event. These are useful in the case where more than one event is of
interest. For example, for single-line text widgets, like \code{e} in
our example, the \meth{addHandlerChanged} method sets a callback to
respond when the user finishes editing, whereas a handler set by
\meth{addHandlerKeystroke} is called each time a key is pressed.
Table~\ref{tab:gWidgets-callback-methods} shows a list of the these
other methods.

As an example, we could have specified the button as
<<eval=FALSE>>=
b <- gbutton("Click", cont=g)
ID <- addHandlerClicked(b, handler=function(h, ...) {
  msg <- sprintf("Hello %s", svalue(h$action))
  cat(msg, "\n")
}, action=e)
@ 
We passed in the object \code{e} through the action argument as an
illustration. This is useful, as one need not worry finding \code{e}
throug \R's scoping rules in the
call to \code{svalue}.

The \meth{addHandlerXXX} methods return an ID.  This ID can be used
with the method \meth{removeHandler} to remove the callback, or with
the methods \meth{blockHandler} and \meth{unblockHandler} to
temporarily block a handler from being called.

If these few methods are insufficient and toolkit-portability is not
of interest, then the \meth{addHandler} generic can be used to specify
a toolkit-specific signal and a callback.


<<addHandlerXXX, echo=FALSE, results=tex>>=
df <- rbind(
            c("\\meth{addHandlerChanged}", paste("Primary handler call for when a widget's value is \"changed.\" The interpretation of \"change\" depends on the widget.",sep="")),
            c("\\meth{addHandlerClicked}", paste("Sets handler for when widget is clicked with (left)",
                                                 c("mouse button. May return position of click through components"),
                                                 c("\\code{x} and \\code{y} of the \\code{h}-list. "),sep=" ")),
            c("\\meth{addHandlerDoubleclick}","Sets handler for when widget is double clicked"),
            c("\\meth{addHandlerRightclick}","Sets handler for when widget is right clicked"),
            c("\\meth{addHandlerKeystroke}", paste("Sets handler for when key is",
                                                   c("pressed. The \\code{key} component is set to this value,"),
                                                   c("if possible."),sep=" ")),
            c("\\meth{addHandlerFocus}","Sets handler for when widget gets focus"),
            c("\\meth{addHandlerBlur}","Sets handler for when widget loses focus"),
            c("\\meth{addHandlerExpose}","Sets handler for when widget is first drawn"),
            c("\\meth{addHandlerUnrealize}","Sets handler for when widget is undrawn on screen"),
            c("\\meth{addHandlerDestroy}","Sets handler for when widget is destroyed"),
            c("\\meth{addHandlerMouseMotion}","Sets handler for when widget has mouse go over it"),
            c("\\meth{addDropSource}","Specify a widget as a drop source"),
            c("\\meth{addDropMotion}","Sets handler to be called when drag event mouses over the widget"),
            c("\\meth{addDropTarget}","Sets handler to be called on a drop event. Adds the component \\code{dropdata}."),
            c("\\meth{addHandler}","(Not cross-toolkit) Allows one to specify an underlying signal from the graphical toolkit and handler"), 
            c("",""),
            c("\\meth{removeHandler}","Remove a handler from a widget"),
            c("\\meth{blockHandler}","Temporarily block a handler from being called"),
            c("\\meth{unblockHandler}","Restore handler that has been blocked"),
            c("\\meth{addHandlerIdle}","Call a handler during idle time"),
            c("",""),
            c("\\meth{addPopupmenu}","Bind popup menu to widget"),
            c("\\meth{add3rdMousePopupmenu}","Bind popup menu to right mouse click")
            )
dimnames(df) <- list(NULL,c("Method","Description"))
cat(booktabs(df, colTypes=c("l","p{0.6\\textwidth}"),
             caption="Generic functions to add callbacks in \\pkg{gWidgets} API.",
             label="tab:gWidgets-callback-methods"))
@ 



\section{Dialogs}
\label{sec:gWidgets-modal-dialogs}

The \pkg{gWidgets} package provides a few constructors to quickly make
some basic dialogs for showing messages or gathering
information. Mostly these are modal dialogs that take control of the
event loop, not allowing any other part of the GUI to be active for
programmatic interaction. As such, in \pkg{gWidgets}, constructors of
modal dialogs do not return an object to manipulate through its
methods, but rather return the user response to the dialog. For example, the
\code{gfile} dialog, described later, is a modal dialog that pops up a
means to select a file returning the selected file path or
\code{NA}. It is used along the lines of:
<<gfile, eval=FALSE>>=
if(!is.na(f <- gfile())) source(f)
@ 


<<dialogs, echo=FALSE, results=tex>>=
df <- rbind(
            c("\\constructor{gmessage}", "Dialog to show a message"),
            c("\\constructor{galert}", "Unobtrusive (non-modal) dialog to show a message"),
            c("\\constructor{gconfirm}", "Confirmation dialog"),
            c("\\constructor{ginput}", "Dialog allowing user input"),
            c("\\constructor{gbasicdialog}", "Flexible modal dialog"),
            c("\\constructor{gfile}","File and directory selection dialog")
            )
colnames(df) <- c("Constructor","Description")
cat(booktabs(df,
             colTypes=c("l","p{0.7\\textwidth}"),
             caption="Table of constructors for basic dialogs in \\pkg{gWidgets}",
             label="tab:gWidgets-basic-dialogs"))

@ 
% \begin{table}
%   \centering
%  \begin{tabular}{l@{\quad}p{.75\textwidth}}
% %   \toprule
%     \constructor{gfile} & File and directory selection dialog\\
%     \constructor{gmessage} & Dialog to show a message\\
%     \constructor{galert} & Unobtrusive (non-modal) dialog to show a message\\
%     \constructor{gconfirm} & Confirmation dialog\\
%     \constructor{ginput} & Dialog allowing user input\\
%     \constructor{gbasicdialog} & Flexible modal dialog \\
%     \bottomrule
%   \end{tabular}
%   \caption{Table of basic dialogs in \pkg{gWidgets}}
%   \label{tab:gWidgets-modal-dialogs}
% \end{table}

Here we describe the dialogs that can be used to display a message or
gather a simple amount of test. The \constructor{gfile} dialog is
described in Section~\ref{sec:gWidgets-selecting-from-file} and the \constructor{gbasicdialog}, which
is implemented like a container, is described in Section~\ref{sec:modal-window}.


The information dialogs are simple one-liners. For example, this
command will cause a confirmation dialog to popup allowing the user to
select a value which will be returned as \code{TRUE} or \code{FALSE}:
<<gconfirm, eval=FALSE>>=
gconfirm("Yes or no? Click one.")
@ 


The information dialogs have arguments \argument{message}{gmessage}
for a message; \argument{title}{gmessage} for the window title; and
\argument{icon}{gmessage} to specify an icon, whose value is one of
\qcode{info}, \qcode{warning}, \qcode{error}, or
\qcode{question}. Buttons will appear at the bottom of the dialog, and
are determined by choice of the constructor. The
\argument{parent}{gmessage} argument is used to position the dialog
near the \pkg{gWidgets} instance specified. Otherwise, placement will
be controlled by the window manager.

The dialogs, except for \code{galert}, have the standard
\code{handler} and \code{action} arguments, for calling a handler, but
typically it is easier to use the return value when programming.

\paragraph{A message dialog}
The simplest dialog is produced by \code{gmessage}, which
displays a message. The user has a cancel button to dismiss the dialog.


For example,
<<gmessage,eval=FALSE>>=
gmessage("Message goes here", title="example dialog")
@ 


\paragraph{An alert dialog}
The \code{galert} dialog is similar to \code{gmessage} only it is
meant to be less obtrusive, so it is non-modal. It does not take the
focus and vanishes after a time delay.

\paragraph{A confirmation dialog}
The constructor \constructor{gconfirm} produces a dialog that allows
the user to confirm the message. This dialog returns \code{TRUE} or
\code{FALSE} depending on the user's selection.


Here we use the question icon for a confirmation dialog, as the message is a question.
<<eval=FALSE>>=
ret <- gconfirm("Really delete file?", icon="question")
@ 


\paragraph{An input dialog}
The \constructor{ginput} constructor produces a dialog which allows
the user to input a single line of text. If the user confirms the
dialog, the value of the string is returned, otherwise if the user
cancels the dialog through the button a value of \code{NA} is returned.


This illustrates how to use the return value.
<<ginput,eval=FALSE>>=
ret <- ginput("Enter your name", icon="info")
if(!is.na(ret)) 
  cat("Hello",ret,"\n")
@ 


% \begin{example}{Modal dialogs}{ex-gWidgets-modal-dialogs}
%   \SweaveInput{ex-gWidgets-modal-dialogs}
% \end{example}





\section{Installation}
\label{sec:installation}



The \pkg{gWidgets} package interfaces with an underlying \R\/ package
through an intermediate package. For example,
Figure~\ref{fig:gWidgets-yuml} shows the sequence of calls to produce
a button. First the \pkg{gWidgets} package dispatches to a toolkit
package (\pkg{gWidgetsRGtk2}), which in turn calls functions in the
underlying \R\/ package (\pkg{RGtk2}) which in turn calls into the
graphical toolkit. As such, to use \pkg{gWidgets} with the \GTK\/
toolkit one must have installed on their computer the GTK\/ libraries,
the \pkg{RGtk2} package and the two \pkg{gWidgets} packages.


\begin{figure}
  \centering
  \includegraphics[width=.95\textwidth]{fig-gWidgets-yuml}
  \caption{The construction of a button in \pkg{gWidgets}}
  \label{fig:gWidgets-yuml}
\end{figure}
%% From
%%http://yuml.me/diagram/class/[gWidgets%7Cgbutton]-.%3E[gWidgetsRGtk2%7C.gbutton],%20[gWidgetsRGtk2%7C.gbutton]-.%3E[RGtk2%7CgtkButtonNew],%20[RGtk2%7CgtkButtonNew]-.%3E[GTK%7CS_gtk_button_new]


The difficulty for the end user is the installation of the graphic
toolkit, as all other packages are installed through CRAN, or are
recommended packages with an \R\/ installation
(\pkg{tcltk}). Table~\ref{tab:gWidgets-installation} describes the installation process for
different operating systems and toolkits.

%% JV Perhaps this belongs somewhere else in the text...
<<installation, echo=FALSE, results=tex>>=
df <- rbind(
           Windows=c("Windows", "Download exe file",
             "Install libraries, binary",
             "In binary install of R"
             ),
            Linux=c("Linux","Standard","Standard","Standard"),
            Mac=c("OS X", "Download binary .pkg",
              "Install from vendor",
              "In binary install of R")
            )
dimnames(df) <- list(NULL,c("","Gtk+", "Qt", "Tk"))
cat(booktabs(df, colTypes=c("l", rep("p{0.3\\textwidth}",3)),
             caption="Installation notes for GUI toolkits.",
             label="tab:gWidgets-installation"))

@ 

Not all features of the API are supported by a particular toolkit. In
particular, the easiest to install (\pkg{gWidgetstcltk}) might have the
fewest features.  The help pages in the \pkg{gWidgets} package
describe the API, with the help pages in the toolkit packages
indicating differences or omissions from the API (e.g. \code{?gWidgetsRGtk2-package}). For the most part,
omissions are gracefully handled by simply providing less
functionality.

% %% starting package
% The \pkg{gWidgets} package is loaded as other \R\/ packages:
% <<>>=
% require(gWidgets)
% @ 

% A toolkit package is loaded when the first command is issued. If a
% user does not have a toolkit installed, a message instructs the user
% to install one.

% %% Choice of toolkit
% If a user has exactly one toolkit package installed, then that will be
% used. But it is possible for more than one to be installed, in which
% case the user is prompted to choose one through an interactive menu. This
% choice can be avoided by setting the option \args{guiToolkit} to the
% \code{XXX} in a \pkg{gWidgestXXX} package name, e.g.,
% <<>>=
% options("guiToolkit"="RGtk2")
% @ 

% Although in theory the different toolkits can be used
% together, in practice the different event loops created by each often
% lead to issues that can lockup the \R\/ process.

