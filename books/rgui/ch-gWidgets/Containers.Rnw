%% Basic Containers
<<echo=FALSE>>=
library(gWidgets)
options("guiToolkit"="RGtk2") ## for examples
@ 


% \begin{table}
%   \centering
%   \begin{tabular}{l@{\quad}p{.75\textwidth}}
% %    \toprule
%     \constructor{gwindow} & Creates a top-level window\\
%     \constructor{ggroup} & Creates a box-like container\\
%     \constructor{gframe} & Creates a container with a text label \\
%     \constructor{gexpandgroup} & Creates a container with a label and
%     expand/collapse trigger\\ 
%     \constructor{gpanedgroup} & Creates a container for two child widgets
%     with a handle to assign allocation of space\\
%     \constructor{glayout} & A grid container\\
%     \constructor{gnotebook} & A tabbed notebook container for holding a
%     collection of child widgets\\
%     \bottomrule
%   \end{tabular}
%   \caption{Table of container constructors in \pkg{gWidgets}}
%   \label{tab:gWidgets-container-constructors}
% \end{table}

The \pkg{gWidgets} package provides a few useful containers: top-level
windows, box containers, grid-like containers and notebook containers.

\section{Top-level windows}
\label{sec:gWidgets-top-level-windows}

The \constructor{gwindow} constructor creates top-level windows. The
title of the window can be set during construction via the
\argument{title}{gwindow} argument or later through the
\meth{svalue\ASSIGN} method. As well, the initial size can be set
through the \argument{width}{gwindow} and \argument{height}{gwindow}
arguments. This initial size is the default size, but may be adjusted
later through the \method{size}{gwindow} method or through the window
manager. The \argument{visible}{gwindow} argument controls whether the
window is initially drawn. If not drawn initially, the
\method{visible\ASSIGN}{gwindow} method, taking a logical value, can be used draw the window
later in a program.  The default is to initially draw the window, but often it is good practice to suppress the initial drawing, especially for displaying GUIs with several controls as the
incremental  drawing of subsequent child components can make the
GUI seem sluggish.


Windows can be closed programatically with the
\method{dispose}{gwindow} method. Windows may also be closed through
the window manager, by clicking a close icon in the title bar.  The
\argument{handler}{gwindow} argument is called just before the window
is destroyed, but will not prevent that from happening.  The
\method{addHandlerUnrealize}{gwindow} method can be used to call a
handler between the initial click of the close icon and the subsequent
destroy event of the window. This handler must return a logical value:
if \code{TRUE} the window will not be destroyed, if \code{FALSE} the
window will be, as illustrated in the example.

The initial placement of a window will be decided by the window
manager, unlesss the \argument{parent}{gwindow} argument is
specified. If this is done with a vector of $x$ and $y$ pixel values,
the upper left corner will be placed there. If it is specified as a
\code{gwindow} instance, the new window will be positioned over the
specified window and be disposed of when the parent widget is. This is useful, say,
when a main window opens a dialog window to gather values.

In the document object model, the use of menubars, toolbars and
statusbars is often reserved for the main window, while dialogs are
not decorated so. In \pkg{gWidgets} it is suggested that these be
added only to a top-level window and required by some toolkits.

<<echo=FALSE, results=tex>>=
df <- rbind(
            c("\\constructor{gwindow}","Creates a top-level window"),
            c("\\constructor{ggroup}","Creates a box-like container"),
            c("\\constructor{gframe}","Creates a container with a text label"),
            c("\\constructor{gexpandgroup}",paste("Creates a container with a label and",
                                                  "trigger to expand/collapse",sep=" ")),
            c("\\constructor{gpanedgroup}",
              paste("Creates a container for two child widgets",
                    "with a handle to assign allocation of space.",sep=" ")),
            c("\\constructor{glayout}","A grid container"),
            c("\\constructor{gnotebook}","A tabbed notebook container for holding a collection of child widgets")
            )
colnames(df) <- c("Constructor","Description")
cat(booktabs(df, 
             colTypes = c("l","p{0.6\\textwidth}"),
             caption="Constructors for container objects",
             label="tab:gWidgets-container-constructors"))
@ 


\begin{example}{An example of \constructor{gwindow}}{gWidgets-gwindow-ex}

  To illustrate, the following will open a new window. The initial
  drawing is postponed until after a button is placed in the window.
<<>>=
w1 <- gwindow("parent window", visible=FALSE)
b <- gbutton("a button", cont=w1)
visible(w1) <- TRUE
@ 
This shows how one might use the \argument{parent}{gwindow} argument
to specify where a sub-window will be placed.
<<>>=
w2 <- gwindow("child window", width=100, height=100, 
              parent=w1)               # center on w1
b <- gbutton("button on child", cont = w2)
dispose(w1)                           # closes w2 also
@ 


This shows how the \method{addHandlerUnrealize}{gwindow} method can be
used to intercept the closing of the window through the ``close'' icon
of the window manager. The \code{gconfirm} dialog returns \code{TRUE}
or \code{FALSE} depending on the button clicked, as will be explained
in \ref{sec:gWidgets-modal-dialogs}.
<<>>=
w <- gwindow("Close through the window manager")
id <- addHandlerUnrealize(w, handler=function(h,...) {
  !gconfirm("Really close", parent=h$obj)
})
@ 
% Grid:
% RGtk2, tcltk
% mac <- c(TRUE,TRUE)
% linux <- c(TRUE, TRUE)
% windows <- c(TRUE,)
\end{example}

<<echo=FALSE, results=tex>>=
## List methods for containers
df <- rbind(c("\\meth{add}",paste("Adds a child object to a parent container.",
                                  "Called when a parent container is specified to the \\args{container}",
                                  "argument, in which case, the \\args{...} arguments are passed to",
                                  "this method", sep=" ")),
            c("\\meth{delete}", "Remove a child object from a parent container"))
colnames(df) <- c("Method","Description")
cat(booktabs(df, 
             colTypes=c("l","p{0.6\\textwidth}"),
             caption="Container methods", 
             label="tab:gWidgets-container-methods"
             ))
@ 


\section{Box containers}
\label{sec:gWidgets-box-containers}

The container produced by \constructor{gwindow} is intended to contain
just a single child widget, not several. This section demonstrates the
box containers produced by \constructor{ggroup} that can be used to
hold multiple child components. Through nesting, fairly complicated
layouts can be produced.

\subsection{The \code{ggroup} container}
\label{sec:gWidgets-ggroup-container}
  
The \constructor{ggroup} box container provides an argument
\argument{horizontal}{ggroup} to specify whether the child widgets
are packed in horizontally left to right (the default) or vertically
from top to bottom. Unlike with the underlying graphical toolkits,
there is no means to specify other styles of packing such as from the
ends, or in the middle by some index.

\paragraph{add}
When packing in child widgets, the \method{add}{ggroup} method is
used. In our examples, this is called internally by the constructors
when the \args{container} argument is specified. The appropriate
\args{...}  values for a constructor are passed to the \meth{add}
method. For \constructor{ggroup} the important ones are \args{expand}
and \args{anchor}. When more space is allocated to a child, then is
needed by that child, the \args{expand=TRUE} argument will cause the
child to grow to fill the available space in both directions. (No
means is available in \pkg{gWidgets} to restrict to just one
direction.) If \args{expand=TRUE} is not specified, then the
\args{anchor} argument will instruct how to anchor the child into the
space allocated. The direction is specified by $x$-$y$ coordinates
with both values from either $-1$, 0 or $1$, where 1 indicates top and
right, whereas $-1$ is left and bottom. The example will demonstrate
their use.

\paragraph{delete}
The \method{delete}{ggroup} method can be used to remove a child component from a box container. In some toolkits, this child may be added back at a later time, but this isn't part of the API.

\paragraph{Spacing and sizing}
For spacing between the child components, the argument
\argument{spacing}{ggroup} may be used to specify, in pixels, the
amount of space between the child widgets. This can later be set
through the \method{svalue}{ggroup} method. The method
\method{addSpace}{ggroup} can add space between two widgets packed
next to each other, whereas the method \method{addSpring}{ggroup} will place
an invisible spring between two widgets, forcing them apart.  Both are
useful for laying out buttons.

The overall size of \code{ggroup} container is controlled through it
being a child of its parent container. However, a size can be assigned
through the \method{size\ASSIGN}{ggroup} method. This will be a
preferred size, but need not be the actual size, as the container may
need to be drawn larger to accomodate its children. The argument
\argument{use.scrollwindow}{ggroup} when specified as \code{TRUE} will
add scrollbars to the box container so that a fixed size can be
maintained. Although, it is generally considered a poor idea to use
scrollbars when there is a chance the key controls for a dialog will
be hidden.

%%\XXX{not inspiring}

\begin{example}{Example of \constructor{ggroup} usage}{gWidgets-ggroup-ex}
\SweaveInput{ex-gWidgets-ggroup}
\end{example}

The next example shows an alternative to the expand group widget.

\begin{example}{The \meth{delete} method of \code{ggroup}}{ex-gWidgets-ggroup-delete}
  \SweaveInput{ex-gWidgets-alert-box}
\end{example}


\subsection{The \code{gframe} and \code{gexpandgroup} containers}
\label{sec:gWidgets-decorated-cont}

Framed containers are used to set off elements and are provided by
\constructor{gframe}. Expandable containers are used to preserve
screen space unless requested and are provided by
\constructor{gexpandgroup}. Both of these containers can be used in
place of the \constructor{ggroup} container.

In addition to the \code{ggroup} arguments, the \constructor{gframe}
constructor has the arguments \argument{text}{gframe} to specify the
text marking the frame and \argument{pos}{gframe} to specify the
positioning of the text, using 0 for left and 1 for right. If the
toolkit supports markup, such as \pkg{RGtk2}, the
\argument{markup}{gframe} argument takes a logical indicating if
markup is being used in the specification of \args{text}.  The
\method{names}{gframe} method can be used to get and set the label
after construction of the widget.


The \constructor{gexpandgroup} constructor, like \code{gframe}, has
the \code{text} argument, but no \code{pos} argument for positioning
the text label. The widget has two states, which may be toggled either
by clicking the trigger or through the
\method{visible\ASSIGN}{gexpandgroup} method.  A value of \code{TRUE}
means the child is visible. The
\method{addHandlerChanged}{gexpandgroup} method is used to specify a
callback for when the widget is expanded.

\begin{example}{The \constructor{gframe} and \constructor{gexpandgroup} containers}{gWidgets-gframe-gexpandgroup-ex}
\SweaveInput{ex-gWidgets-gframe-gexpandgroup.Rnw}
\end{example}




\section{Paned containers: the \code{gpandedgroup} container}
\label{sec:gWidgets-gpanedgroup-container}

The \constructor{gpanedgroup} constructor produces a container which
has two children. The children are aligned side-by-side by default, or
top to bottom if the \argument{horizontal}{gpanedgroup} argument is given as \code{FALSE}. These two
children are separated by a visual gutter which can be adjusted using
the mouse to allocate the space between the two children. This can
also be done programatically using the \method{svalue\ASSIGN}{gpanedgroup}
method where  a value from 0 to 1 specifies the proportion of space allocated to the leftmost (topmost) child.

To add children, the container should be used as the parent container
for two constructors. These can be other container constructors which
is the typical usage for more complicated layouts.
(For toolkits which support the separation of widget
construction and layout, the \constructor{gpanedgroup} constructor can
have two children specified to the arguments
\argument{widget1}{gpanedgroup} and \argument{widget2}{gpanedgroup}.)

\begin{example}{Paned groups}{ex-gWidgets-panedgroups}
  This example shows how one could use this container.
<<keep.source=TRUE>>=
w <- gwindow("gpanedgroup example", visible=FALSE)
pg <- gpanedgroup(cont=w)
g <- ggroup(cont=pg)                  # left child
l <- glabel("left child", cont=g)
b <- gbutton("right child", cont=pg)
visible(w) <- TRUE
@ 
To adjust the sash position, one can do:
<<>>=
svalue(pg) <- .5
@ 
\end{example}


  
\section{Tabbed notebooks: the \code{gnotebook} container}
\label{sec:gWidgets-gnotebook}

The \constructor{gnotebook} constructor produces a tabbed notebook
container. The constructor has the argument \argument{tab.pos}{gnotebook}
to specify the location of the tabs. A value of 1 through 4 with 1
being botton, 2 left side, 3 top and 4 right side being used, with the
default being 3. (Not available for all toolkits.) The \argument{closebuttons}{gnotebook} argument takes a logical
indicating whether the tabs should have close buttons on them. In this
case, the argument \argument{dontCloseThese}{gnotebook} can be used to
specify which tabs, by index, should not be closable. (Some toolkits do
not implement these features though.)

The \method{add}{gnotebook} method for the notebook container uses the \argument{label}{add}
argument to specify the tab label. As this is called implicitly when a a widget is constructed, this argument is specified to the constructor.

\paragraph{Methods}
The \method{svalue}{gnotebook} method returns the index of the
currently raised tab, whereas \method{svalue\ASSIGN}{gnotebook} can be
used to switch the page to the specified tab. The currently shown tab can be
removed using the \method{dispose}{gnotebook} method. To remove a
different tab, use this method in combination with
\meth{svalue\ASSIGN}. When removing many tabs, you may want to start
from the end as otherwise the tab positions change, which can be
confusing when using a loop. The \method{names}{gnotebook} method can
be used to retrieve the tab names, and
\method{names\ASSIGN}{gnotebook} to set the names. The
\method{length}{gnotebook} method returns the number of pages held by
the notebook.


\begin{example}{Tabbed notebook example}{ex-gWidgets-gnotebook}
  A simple example follows. The \args{label} argument is passed along from the constructor
  to the \meth{add} method for the notebook instance.
<<>>=  
w <- gwindow("gnotebook example")
nb <- gnotebook(cont=w, tab.pos=3)
l <- glabel("first page", cont=nb, label="one")
b <- gbutton("second page", cont=nb, label="two")
@ 
To set the page to the first one:
<<>>=
svalue(nb) <- 1
@ 
To remove the first page (the current one)
<<>>=
dispose(nb)
@ 
\end{example}

\section{Grid layout: the \code{glayout} container}
\label{sec:gWidgets-glayout-container}

The layout of dialogs and forms is usually seen with some form of
alignment between the widgets. The \constructor{glayout} constructor
provides a grid container to do so, using matrix notation to specify location of the children.
The argument
\argument{homogeneous}{glayout} can be used to specify that each cell
take up the same size, the default is \code{FALSE}. Spacing between each cell may be specified through the \argument{spacing}{glayout} argument.

Children may be added to the grid at a specific row and column, and a
child may span more than one row or column. To specify this, \R's
matrix notation, \code{[\ASSIGN}, is used with the indices indicating
the row and column.  When a child is to span more than one row or
column, the corresponding index should be a vector of indices
indicating so.  There is no \code{[} method defined to return the
child components.  
To add a child, the \code{glayout} container should be specfied as the \code{container} and be on the left hand side of the \code{[\ASSIGN} call. For convenience, if the right hand side is a string, a label will be generated.
To align a widget within a cell, the
\argument{anchor}{add} argument of the \code{[\ASSIGN}{glayout} method
is used. The example illustrates how this can be used to achieve a center balance.


\begin{example}{Layout with \constructor{glayout}}{ex-gWidgets-glayout}
  This example shows how a simple form can be given an attractive
  layout using a grid container. It uses the \constructor{gedit}
  constructor to provide a single-line text entry widget. As the
  matrix notation does not have a means to return the child widget (a
  \code{[} method say), we store the values of the
  \constructor{gedit} widgets into variables.
<<>>=  
w <- gwindow("glayout example")
tbl <- glayout(cont=w)
right <- c(1,0); left <- c(-1,0)
tbl[1,1, anchor=right] <- "name"
tbl[1,2, anchor=left ] <- (name <- gedit("", cont=tbl))
tbl[2,1, anchor=right] <- "rank"
tbl[2,2, anchor=left ] <- (rank <- gedit("", cont=tbl))
tbl[3,1, anchor=right] <- "serial number"
tbl[3,2, anchor=left ] <- (snumber <- gedit("", cont=tbl))
@ 
\end{example}



