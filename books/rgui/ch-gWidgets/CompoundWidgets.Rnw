The \pkg{gWidgets} package provides some \R\/ specific widgets for
producing GUIs. Table~\ref{tab:gWidgets-compound-widgets} lists them.


<<echo=FALSE, results=tex>>=
df <- rbind(
            c("\\constructor{gvarbrowser}", "GUI for browsing variables in the workspace"),
            c("\\constructor{gcommandline}", "Command line widget"),
            c("\\constructor{gformlayout}", "Creates a GUI from a list specifying layout"),
            c("\\constructor{ggenericwidget}", "Creates a GUI for a function based on its formal arguments or a defining list")
            )
##             ,c("\\constructor{ghelp}", "GUI for a help page"),
##             c("\\constructor{ghelpbrowser}", "A help browser")
colnames(df) <- c("Constructor","Description")
cat(booktabs(df,
             colTypes=c("l","p{0.7\\textwidth}"),
             caption="Table of constructors for compound widgets in \\pkg{gWidgets}",
             label="tab:gWidgets-compound-widgets"))
@ 

% \begin{table}
%   \centering
%   \begin{tabular}{l@{\quad}p{.75\textwidth}}
% %    \toprule
%     \constructor{gcommandline} & Command line widget\\ 
%     \constructor{gvarbrowser} & GUI for browsing variables in the workspace\\
% %    \constructor{gdfnotebook} & A notebook of data frames\\
% %    \constructor{ggraphicsnotebook} & A notebook for graphics objects\\
%     \constructor{ghelp} & GUI for a help page\\
%     \constructor{ghelpbrowser} & A help browser\\
%     \constructor{gformlayout} & Uses list to specify layout of a GUI\\
%     \constructor{ggenericwidget} & Creates a GUI for a function based
%     on its formal arguments or a defining list\\
%     \bottomrule
%   \end{tabular}
%   \caption{Table of compound widgets provided by \pkg{gWidgets}}
%   \label{tab:gWidgets-compound-widgets}
% \end{table}


\subsection{Workspace browser}
\label{sec:gWidgets-workspace-browser}

A workspace browser is constructed by \code{gvarbrowser}, providing a
means to browse and select the objects in the current global environment. The
quality of the implementation varies depending on the toolkit. The
default \code{handler} object calls \code{do.call} on the object for
the function specified through the \argument{action}{gvarbrowser}
argument. The default is to print a \code{summary} of the object. This
handler is called on a double click. A single click is used for
selection. The name of the currently selected value is returned by the
\method{svalue}{gvarbrowser} method.

% \subsection{Help browser}
% \label{sec:gWidgets-help-browser}

% The \constructor{ghelp} constructor produces a widget for showing help
% pages using a notebook container. This widget does not use the html
% help pages or the chm help pages, so it may not work for all operating
% systems. (For Windows, the help browser of the GUI is much better
% anyways.) To add a help page, the \method{add}{ghelp} method is used,
% where the \code{value} argument describes the desired page. This can
% be a character string containing the topic, a character string of the
% form \code{package:::topic} to specify the package, or a list with
% named components \code{package} and \code{topic}.  The
% \method{dispose}{ghelp} method of notebooks can be used to remove the
% current tab.

% The \constructor{ghelpbrowser} constructor produces a stand-alone
% GUI for displaying help pages, running examples from the help pages or
% opening vignettes provided by the package. This GUI provides its own
% top-level window and does not return a value for which methods are defined.



\subsection{Command line widget}
\label{sec:gWidgets-command-line-widget}

A simple command line widget is created by the
\constructor{gcommandline} constructor. This is not meant as a
replacement for \R's typical commandlines, but is provided for
lightweight usage. A text box allows users to to type in \R\/
commands. The programmer may issue commands to be evaluated and
displayed through the \method{svalue\ASSIGN}{gcommandline} method. The
\code{value} assigned is a character string holding the commands. If
there is a names attribute, the results will be assigned to a variable
in the global workspace with that name. The \code{svalue} and \code{[}
methods return the command history.

\subsection{Simplifying creation of dialogs}
\label{sec:gWidgets-designing-forms}

The \pkg{gWidgets} package has two means to simpify the creation of
GUIs. The \code{gformlayout} constructor takes a list defining a
layout and produces a GUI, the \code{ggenericwidget} constructor can
take a function name and produce a GUI based on the formal arguments
of the function. This too uses a list, which can be modified by the
user before the GUI is constructed. 

\subsubsection{Laying out a form}
\label{sec:gWidgets-laying-out-form}

% ML: replaced 'component' with 'element' for components of list, to
% distuingish them from components of the GUI

% ML: this is another place where it would be good to see the example first

The \constructor{gformlayout} constructor takes a list defining a
layout and creates the specified widgets. The design borrows from the
\code{extjs} javascript libraries for web programming, where a similar
function can be used to specify the layout of web forms. Several
toolkits have a means to specify a layout using XML (eg. \GTK{}
Builder and \Qt{} Assistant); this implementation uses a list, under
the assumption that it is more familiar to the \R\/ user. By defining
the layout ahead of time, pieces of the layout can be recycled for
other layouts.


To define the layout, each component is specified using a list with
named elements. The \code{type} element indicates the component
to be created, as a string. This can be the name of a container
constructor, a widget constructor or the special value
\code{"fieldset"}. Field sets are used to group a set of common
controls. If the \code{name} element is specified, then the
component that is created will be stored in the list returned by the
\code{[} method.

The \code{label} element adds a descriptive label
to the layout. The \code{label.pos} element controls the
placement of the label. The value \code{"top"} places the label on top
of the widget, while \code{"side"}, the default, puts it on the
side. The \code{label.font} element specifies the
font properties of the label, as with the \meth{font\ASSIGN} method.

If the type is a container or fieldset, then the \code{children}
element is a list whose elements specify the children as
above. Except for fieldsets, these children can contain other
containers or controls. Fieldsets only allow controls as children.

The enabled state of a widget is controlled by \code{depends.on},
\code{depends.FUN}, and \code{depends.signal}. If the
\code{depends.on} element specifies the name of a previous component,
then the function \code{depends.FUN} will be consulted when the signal
specified by \code{depends.signal} is emitted. This uses the
\code{addHandlerXXX} names with a default value of
\code{addHandlerChanged}. The \code{depends.FUN} function should take a single
argument consisting of the value returned by \code{svalue} when called
on the widget specified through \code{depends.on}. This function
should return a logical indicating if the widget is enabled or not.

\paragraph{Methods}
The constructor returns an object with a few methods. The
\method{[}{gformlayout} method will return a list with
components being the widgets that were named in the defining list. The
\method{svalue}{gformlayout} method simply applies the \code{svalue}
method for each component of the list returned by the \code{[}
method. The \method{names}{gformlayout} method returns the names of the widgets in the list.


\begin{example}{The \code{gformlayout} constructor}{ex-gWidgets-gformlayou}
  \SweaveInput{ex-gWidgets-formlayout}
\end{example}

\subsubsection{Creating a GUI for a function}
\label{sec:gWidgets-autom-creat-gui}

The \constructor{ggenericwidget} constructor creates a GUI for
invoking a given function. The GUI is derived from the formal
arguments. The \pkg{fgui} package provides a similar function. While
it is limited to the \pkg{tcltk} toolkit, it has the advantage of
incorporating information from the help page for the function.

The implementation actually has two stages. The first creates a list
specifying the layout of the GUI and the second actually constructs
the GUI. This list is different from that used by \code{gformlayout}. It
does not provide as much flexibility and is described in the help page
for \code{ggenericwidget}. This list can be edited if desired and then
used directly. % ML: how does this work?

The formal arguments of an S3 method may be different from those of
its generic. For instance, those for the \code{t.test} generic are
much different (and less useful for this purpose) than the
\code{t.test.default} method for numeric values for \code{x}. Knowing
this, a useful GUI can be quickly created for the \code{t.test} with
the commands:
<<>>=
w <- gwindow("t.test through ggenericwidget")
f <- stats:::t.test.default; 
widget <- ggenericwidget("f", cont=w)
@ 

