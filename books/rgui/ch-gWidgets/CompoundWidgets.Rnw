The \pkg{gWidgets} package provides some \R\/ specific widgets for
producing GUIs. Table~\ref{tab:gWidgets-compound-widgets} lists them.


<<echo=FALSE, results=tex>>=
df <- rbind(
            c("\\constructor{gvarbrowser}", "GUI for browsing variables in the workspace"),
            c("\\constructor{gcommandline}", "Command line widget"),
            c("\\constructor{gformlayout}", "Uses list to specify layout of a GUI"),
            c("\\constructor{ggenericwidget}", "Creates a GUI for a function based on its formal arguments or a defining list")
            )
##             ,c("\\constructor{ghelp}", "GUI for a help page"),
##             c("\\constructor{ghelpbrowser}", "A help browser")
colnames(df) <- c("Constructor","Description")
cat(booktabs(df,
             colTypes=c("l","p{0.7\\textwidth}"),
             caption="Table of constructors for compound widgets in \\pkg{gWidgets}",
             label="tab:gWidgets-compound-widgets"))
@ 

% \begin{table}
%   \centering
%   \begin{tabular}{l@{\quad}p{.75\textwidth}}
% %    \toprule
%     \constructor{gcommandline} & Command line widget\\ 
%     \constructor{gvarbrowser} & GUI for browsing variables in the workspace\\
% %    \constructor{gdfnotebook} & A notebook of data frames\\
% %    \constructor{ggraphicsnotebook} & A notebook for graphics objects\\
%     \constructor{ghelp} & GUI for a help page\\
%     \constructor{ghelpbrowser} & A help browser\\
%     \constructor{gformlayout} & Uses list to specify layout of a GUI\\
%     \constructor{ggenericwidget} & Creates a GUI for a function based
%     on its formal arguments or a defining list\\
%     \bottomrule
%   \end{tabular}
%   \caption{Table of compound widgets provided by \pkg{gWidgets}}
%   \label{tab:gWidgets-compound-widgets}
% \end{table}


\subsection{Workspace browser}
\label{sec:gWidgets-workspace-browser}

A workspace browser is constructed by \code{gvarbrowser}, providing a
means to browse and select the objects in the current global environment. The
quality of the implementation varies depending on the toolkit. The
default \code{handler} object calls \code{do.call} on the object for
the function specified through the \argument{action}{gvarbrowser}
argument. The default is to print a \code{summary} of the object. This
handler is called on a double click. A single click is used for
selection. The name of the currently selected value is returned by the
\method{svalue}{gvarbrowser} method.

% \subsection{Help browser}
% \label{sec:gWidgets-help-browser}

% The \constructor{ghelp} constructor produces a widget for showing help
% pages using a notebook container. This widget does not use the html
% help pages or the chm help pages, so it may not work for all operating
% systems. (For Windows, the help browser of the GUI is much better
% anyways.) To add a help page, the \method{add}{ghelp} method is used,
% where the \code{value} argument describes the desired page. This can
% be a character string containing the topic, a character string of the
% form \code{package:::topic} to specify the package, or a list with
% named components \code{package} and \code{topic}.  The
% \method{dispose}{ghelp} method of notebooks can be used to remove the
% current tab.

% The \constructor{ghelpbrowser} constructor produces a stand-alone
% GUI for displaying help pages, running examples from the help pages or
% opening vignettes provided by the package. This GUI provides its own
% top-level window and does not return a value for which methods are defined.



\subsection{Command line widget}
\label{sec:gWidgets-command-line-widget}

A simple command line widget is created by the
\constructor{gcommandline} constructor. This is not meant as a
replacement for \R's typical commandlines, but is provided for
lightweight usage. A text box allows users to to type in \R\/
commands. The programmer may issue commands to be evaluated and
displayed through the \method{svalue\ASSIGN}{gcommandline} method. The
\code{value} assigned is a character string holding the commands. If
there is a names attribute, the results will be assigned to a variable
in the global workspace with that name. The \code{svalue} and \code{[}
methods return the command history.

\subsection{Simplifying creation of dialogs}
\label{sec:gWidgets-designing-forms}

The \pkg{gWidgets} package has two means to simpify the creation of
GUIs. The \code{gformlayout} constructor takes a list defining a
layout and produces a GUI, the \code{ggenericwidget} constructor can
take a function name and produce a GUI based on the formal arguments
of the function. This too uses a list, that can be modified by the
user before the GUI is constructed. 

\subsubsection{Laying out a form}
\label{sec:gWidgets-laying-out-form}

The \constructor{gformlayout} constructor takes a list defining a
layout and creates the specified widgets. The design borrows from the
\code{extjs} javascript libraries for web programming, where a similar
function can be used to specify the layout of web forms. Several
toolkits have a means to specify a layout using XML (eg. \GTK's
Builder and \Qt's assistant), this implementation uses a list,
assuming this is more familiar to the \R\/ user. By defining the
layout ahead of time, pieces of the layout can be recycled for other
layouts.


To define the layout, each component is specified using a list with
named components. The component \code{type} indicates what component
to be created, as a string. This can be a the name of a container
constructor, a widget constructor or the special value
\code{"fieldset"}. Field sets are used to group a set of common
controls. If the component \code{name} is specified, then the
component that is created will be stored in the list returned by the
\code{[} method.

The \code{label} component can be specified to
add a descriptive label to the layout. When used, the component
\code{label.pos} can be tale a value \code{"top"} to have the label
on top of the widget, or \code{"side"} to place the label on the side
(the default positioning). The \code{label.font} component can be used
to specify the label's font properties using a label's \meth{font\ASSIGN} method.

If the type is a container or fieldset, then the \code{children}
component is a list whose components specify the children as
above. Except for fieldsets, these children can contain other
containers or components. Fieldsets only allow components as children.

Whether a widget is enabled or not can be controlled by specifying
values for \code{depends.on}, \code{depends.FUN}, and
\code{depends.signal}. If the component \code{depends.on} specifies
the name of a previous component, then the function \code{depends.FUN}
will be consulted when the signal specified by \code{depends.signal}
is emitted. This uses the \code{addHandlerXXX} names with a default
value of \code{addHandlerChanged}. The \code{depends.FUN} function has
a single argument consisting of the value returned by \code{svalue}
when called on the widget specified through \code{depends.on}. This
function should return a logical indicating if the widget is enabled
or not.

\paragraph{Methods}
The constructor returns an object with a few methods. The
\method{[}{gformlayout} method will return a list with
components being the widgets that were named in the defining list. The
\method{svalue}{gformlayout} method simply applies the \code{svalue}
method for each component of the list returned by the \code{[}
method. The \method{names}{gformlayout} method returns the names of the widgets in the list.


\begin{example}{The \code{gformlayout} constructor}{ex-gWidgets-gformlayou}
  \SweaveInput{ex-gWidgets-formlayout}
\end{example}

\subsubsection{Automatically creating a GUI}
\label{sec:gWidgets-autom-creat-gui}

The \constructor{ggenericwidget} constructor can create a basic GUI
for a function using the function's formal arguments as a guide for
the proper widget to use to collect values for an argument of the
function. The \pkg{fgui} package provides a similar function using
just the \pkg{tcltk} package, only it improves \code{ggenericwidget} by
parsing the function's help page.

The implementation actually has two stages, the first creates a list
specifying the layout of the GUI and the second a call to layout the
GUI. This list is different from that used by \code{gformlayout}. It
does not provide as much flexibility and is described in the help page
for \code{ggenericwidget}. This list can be edited if desired and then
used directly.

The formal arguments of an S3 method may be different from those of
its generic. For instance, those for the \code{t.test} generic are
much different (and less useful for this purpose) than the
\code{t.test.default} method for numeric values for \code{x}. Knowing
this, a useful GUI can be quickly created for the \code{t.test} with
the commands:
<<>>=
w <- gwindow("t.test through ggenericwidget")
f <- stats:::t.test.default; 
widget <- ggenericwidget("f", cont=w)
@ 

