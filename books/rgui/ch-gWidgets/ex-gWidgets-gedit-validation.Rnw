GUIs for \R\/ may differ a bit from many GUIs one typically interacts
with, as \R\/ users expect to be able to use variables and expressions
where typically one uses just characters or numbers. As such, one
needs to evaluate expressions. This example shows how to implement a
validation framework on a single-line edit widget so that the user has
feedback if an expression will not evaluate properly.  If the value is
invalid, we set the text color to red. 

<<validationExample, echo=FALSE>>=
require(gWidgets)
@

We use a table to layout out example:
<<>>=
w <- gwindow("Validation example")
tbl <- glayout(cont=w)
tbl[1,1] <- "R expression:"
tbl[1,2] <- (e <- gedit("", cont = tbl))
@ 


We use the \pkg{evaluate} package to see if the expresssion is valid.
<<>>=
require(evaluate)
isValid <- function(e) {
  out <- try(evaluate:::evaluate(e), silent=TRUE)
  !(inherits(out, "try-error") || 
    is(out[[2]], "error"))
}
@ 
%

We validate our expression when the user commits the change, by
pressing the return key while the widget has focus. Alternatively, we
could have used
\code{addHandlerKeystroke}, to validate after each key press, or
\code{addHandlerBlu}, to validate when the widget loses focus.

<<validate, results=hide>>=
addHandlerChanged(e, handler = function(h,...) {
  curVal <- svalue(h$obj)
  if(isValid(curVal)) {
    font(h$obj) <- c(color="black")
  } else {
    font(h$obj) <- c(color="red")
    focus(h$obj) <- TRUE
  }
})
@ 

