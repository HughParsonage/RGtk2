GUIs for \R\/ may differ a bit from many GUIs users typically
interacts with, as \R\/ users expect to be able to use variables and
expressions where typically a GUI expects just characters or
numbers. As such, it is helpful to indicate to the user if their value
is a valid expression. This example shows how to implement a
validation framework on a single-line edit widget so that the user has
feedback when an expression will not evaluate properly.  When the
value is invalid we set the text color to red.

<<validationExample, echo=FALSE>>=
require(gWidgets)
@

<<>>=
w <- gwindow("Validation example")
tbl <- glayout(cont=w)
tbl[1,1] <- "R expression:"
tbl[1,2] <- (e <- gedit("", cont = tbl))
@ 


We use the \pkg{evaluate} package to see if the expression is valid.
<<>>=
require(evaluate)
isValid <- function(e) {
  out <- try(evaluate:::evaluate(e), silent=TRUE)
  !(inherits(out, "try-error") || 
    is(out[[2]], "error"))
}
@ 
%

We validate our expression when the user commits the change, by
pressing the return key while the widget has focus. Alternatively, we
could have used
\code{addHandlerKeystroke}, to validate after each key press, or
\code{addHandlerBlur}, to validate when the widget loses focus.

<<validate, results=hide>>=
addHandlerChanged(e, handler = function(h,...) {
  curVal <- svalue(h$obj)
  if(isValid(curVal)) {
    font(h$obj) <- c(color="black")
  } else {
    font(h$obj) <- c(color="red")
    focus(h$obj) <- TRUE
  }
})
@ 

