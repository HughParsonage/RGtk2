%% Example of hand-built filter using gtable

Even with moderate-sized data sets, the number of rows can be quite large, in which case it is
inconvenient to use a GUI for selection unless some means of searching or filtering the
data is used. This example uses the possible CRAN sites, to show how a
\code{gedit} instance can be used as a search box to filter the display of
data. The \code{addHandlerKeystroke} method is used so that the search
results are updated as the user types.

<<echo=FALSE>>=
library(gWidgets)
@ 

The \code{available.packages} function returns a data frame of all
available packages. If a CRAN site is not set, the user will be
queried to set one.
<<echo=FALSE>>=
options(repos="http://streaming.stat.iastate.edu/CRAN")
@ 
<<>>=
d <- available.packages()       # pick a cran site
@ 

This basic GUI is barebones, for example we skip adding text labels to guide the user. 
<<>>=
w <- gwindow("test of filter")
g <- ggroup(cont=w, horizontal=FALSE)
ed <- gedit("", cont=g)
tbl <- gtable(d, cont=g, filter.FUN="manual", expand=TRUE)
@ 
The \argument{filter.FUN}{gtable} provides a means to have a combobox
control the display of the table. For this example, we desire more
flexibility, so we specify the value of \qcode{manual}.

Different search criteria may be desired, so it makes sense to
separate out this code from the GUI code using a function. The one below
uses \code{grep} to match, so that regular expressions can be
used. Another reasonable choice would be to use the first letter of
the package. (That filtering could also be specified easily through the
\argument{filter.FUN}{gtable} argument.)

<<>>=
ourMatch <- function(curVal, vals) {
  ind <- grep(curVal, vals)             # indices
  vis <- rep(FALSE, length(vals))
  if(length(ind) > 0)
    vis[ind] <- TRUE
  return(vis)                           # logical
}
@ 

Finally, the \code{addHandlerKeystroke} method calls its handler
everytime a key is released while the focus is in the edit widget. In
this case, the handler finds the matching indices using the
\code{ourMatch} function, converts these into logical format, and then
updates the display using the \meth{visible\ASSIGN} method for
  \code{gtable}.
<<>>=
id <- addHandlerKeystroke(ed, handler=function(h, ...) {
  vals <- tbl[, 1, drop=TRUE]
  curVal <- svalue(h$obj)
  vis <- ourMatch(curVal, as.character(vals))
  visible(tbl) <- vis
})
@ 
