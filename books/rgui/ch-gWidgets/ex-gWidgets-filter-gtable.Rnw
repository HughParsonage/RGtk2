%% Example of hand-built filter using gtable

\begin{figure}
  \centering
  \includegraphics[width=.8\textwidth]{fig-gWidgets-filter-example}
  \caption{Example of using a filter to narrow the display of tabular data}
  \label{fig:gWidgets-filter-example}
\end{figure}

Even with moderate-sized data sets, the number of rows can be quite large, in which case it is
inconvenient to use a table for selection unless some means of searching or filtering the
data is used. This example uses the many possible CRAN packages, to show how a
\code{gedit} instance can be used as a search box to filter the display of
data (Figure~\ref{fig:gWidgets-filter-example}). The \code{addHandlerKeystroke} method is used so that the search
results are updated as the user types.

<<echo=FALSE>>=
library(gWidgets)
@ 

The \code{available.packages} function returns a data frame of all
available packages. If a CRAN site is not set, the user will be
queried to set one.
<<echo=FALSE>>=
options(repos="http://streaming.stat.iastate.edu/CRAN")
@ 
<<>>=
ap <- available.packages()       # pick a cran site
@ 

This basic GUI is barebones, for example we skip adding text labels to guide the user. 
<<>>=
w <- gwindow("test of filter")
g <- ggroup(cont=w, horizontal=FALSE)
ed <- gedit("", cont=g)
tbl <- gtable(ap, cont=g, filter.FUN="manual", expand=TRUE)
@ 
The \argument{filter.FUN}{gtable} value of \qcode{manual} allows us to
filter by specifying a logical vector.

Different search criteria may be desired, so it makes sense to
separate out this code from the GUI code using a function. The one below
uses \code{grep} to match, so that regular expressions can be
used. Another reasonable choice would be to use the first letter of
the package. (That filtering could also be specified easily through the
\argument{filter.FUN}{gtable} argument.)

<<>>=
ourMatch <- function(curVal, vals) {
  grepl(curVal, vals)
}
@ 

Finally, the \code{addHandlerKeystroke} method calls its handler
every time a key is released while the focus is in the edit widget. In
this case, the handler finds the matching indices using the
\code{ourMatch} function, converts these into logical format, and then
updates the display using the \meth{visible\ASSIGN} method for
  \code{gtable}.
<<>>=
id <- addHandlerKeystroke(ed, handler=function(h, ...) {
  vals <- tbl[, 1, drop=TRUE]
  curVal <- svalue(h$obj)
  vis <- ourMatch(curVal, vals)
  visible(tbl) <- vis
})
@ 
