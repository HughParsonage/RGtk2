<<>>=
## Example GUI for selecting ordered values from a list of possible values
## uses two-table ping pong set up with additional arrows for ordering the selected values

library(gWidgets)
options(guiToolkit = "RGtk2")
#options(guiToolkit = "tcltk")
#options(guiToolkit = "Qt")

nms <- state.name
options("stringsAsFactors" = FALSE)
@ 

<<Layout>>=
## Layout
window <- gwindow("Select an ordered list from a bigger list")

group <- ggroup(cont = window)
select_from <- gtable(data.frame(Values = nms), multiple = TRUE, cont = group, expand = TRUE)

lrbg <- ggroup(cont = group, horizontal = FALSE)

## use two springs to balance butons in middle
addSpring(lrbg)
left_button <- gbutton(">", cont = lrbg)
right_button <- gbutton("<", cont = lrbg)
addSpring(lrbg)

selected <- gtable(data.frame(Values = character(0)), cont = group, expand = TRUE)

udbg <- ggroup(cont = group, horizontal = FALSE)

addSpring(udbg)
up_button <- gbutton("up", cont = udbg)
down_button <- gbutton("down", cont = udbg)
addSpring(udbg)
@ 

<<>>=
##' update the UI
updateUI <- function() {
  enabled(left_button) <- length(svalue(select_from))
  enabled(right_button) <- length(svalue(selected))
  enabled(up_button) <- length(svalue(selected))
  enabled(down_button) <- length(svalue(selected)) 
}
@ 

<<>>=
## functions for movement of selected values
## move selected item from left to right
moveLeftToRight <- function() {
  sel <- svalue(select_from)
  if(length(sel)) {
    ## update selected
    selected[] <- c(selected[], sel)
    svalue(selected, index = TRUE) <- length(selected[drop = TRUE])
    ## update select_from
    select_from[] <- setdiff(select_from[], sel)
  }
  updateUI()
}

## move selected item from right to left
moveRightToLeft <- function() {
  sel <- svalue(selected)
  if(length(sel)) {
    selected[] <- setdiff(selected[], sel)
    select_from[] <- sort(c(select_from[], sel))
  }
}

## in selected table move any selected item up
moveUp <- function() {
  sel <- svalue(selected, index = TRUE)
  if(sel > 1) {
    poss <- selected[]
    poss[c(sel-1, sel)] <- poss[c(sel, sel-1)]
    selected[] <- poss
    svalue(selected, index = TRUE) <- sel-1
  }
}

## in selected table move any selected item down
moveDown <- function() {
   sel <- svalue(selected, index = TRUE)
   poss <- selected[]
   n <- length(poss)
   if(sel < n) {
     poss[c(sel, sel+1)] <- poss[c(sel+1, sel)]
     selected[] <- poss
     svalue(selected, index = TRUE) <- sel + 1
   }
}
@ 

<<>>=
## handlers assigning previous functions to button clicks

addHandlerClicked(select_from, handler = function(h,...) {
  updateUI()
})
addHandlerClicked(selected, handler = function(h,...) {
  updateUI()
})
addHandlerClicked(left_button, handler = function(h,...) {
  moveLeftToRight()
})
addHandlerClicked(right_button, handler = function(h,...) {
  moveRightToLeft()
})
addHandlerClicked(up_button, handler = function(h, ...) {
  moveUp()
})
addHandlerClicked(down_button, handler = function(h,...) {
  moveDown()
})
@ 
