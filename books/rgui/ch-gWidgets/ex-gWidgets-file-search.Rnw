%% REturn to file system search

\begin{figure}
  \centering
  \includegraphics[width=.8\textwidth]{fig-gWidgets-file-search-advanced.png}
  \caption{File search dialog showing advanced search features disclosed}
  \label{fig:file-search-advanced}
\end{figure}

We return to the File selection GUI used as an example in
Chapter~\ref{sec:overview}. Our goal here is to add in more features
to have advanced searching. Imagine we have a function \code{file\_search} which in
addition to arguments for  a pattern and directory has arguments
\code{modified} to pass a date string, \code{size} to pass a
descriptive \code{small}, \code{medium} or \code{large} and an
argument \code{visible} to indicate if all files (including dot files)
should be looked at. 

We want to update our GUI to collect values for these.
Since these are advanced options, we want the user to have access only
on request. We use \code{gexpandgroup} to provide this. Here we define
the additional code for the layout:

<<advSearch, echo=FALSE, results=hide>>=
## thanks to Richie Cotton for this example
w <- gwindow("File search", visible=FALSE)

g <- gpanedgroup(cont=w)

f <- ggroup(cont=g, horizontal=FALSE)
glabel("Search for (filename):", cont=f, anchor=c(-1,0))
txtPattern <- gedit("", initial.msg="Possibly wildcards", cont=f)

glabel("Search in:", cont=f, anchor=c(-1,0))
startDir <- gfilebrowse(text="Select a directory ...",
                        quote=FALSE,
                        type="selectdir", cont=f)
@ 

<<advSearch, results=hide>>=
advSearch <- gexpandgroup("Advanced search:", cont=f)
visible(advSearch) <- FALSE
tbl <- glayout(cont=advSearch)
tbl[1,1] <- "Recursive"
tbl[1,2] <- (advRec <- 
   gcheckbox("search directories", checked=TRUE, cont=tbl))
tbl[2,1] <- "Size"
tbl[2,2] <- (advSize <- 
   gcombobox(c("", "small", "medium", "large"),  cont=tbl))
tbl[3,1] <- "All files"
tbl[3,2] <- (advVisible <- 
   gradio(c(TRUE, FALSE), horizontal=TRUE, cont=tbl))
tbl[4,1] <- "Last modified"
tbl[4,2] <- (advModified <- 
             gcalendar("", format="%Y-%m-%d", cont=tbl))
@ 

As can be seen (Figure~\ref{fig:file-search-advanced}), we use a grid
layout and a mix of the controls offered by \pkg{gWidgets}.

<<echo=FALSE, results=hide>>=
searchBtn <- gbutton("Search", cont=f)
addSpring(f)

f1 <- gframe("Output:", cont=g, horizontal=FALSE)
searchResults <- gtext("", cont=f1, expand=TRUE, fill="both")
@ 


We need to modify our button handler so that it uses these values, if
specified. We only do so if this part of the GUI is disclosed, by
checking the output of \code{visible(advSearch)}.

<<>>=
addHandlerChanged(searchBtn, handler=function(h,...) {
  pattern <- glob2rx(svalue(txtPattern))
  start_dir <- svalue(startDir)
  subfolders <- TRUE
  modified <- NULL
  size <- NULL
  visible <- TRUE

  ## new
  if(visible(advSearch)) {
    subfolders <- svalue(advRec)
    if((tmp <- svalue(advSize)) != "") size <- tmp
    visible <- svalue(advVisible)
    if(!is.na(tmp <- svalue(advModified))) modified <- tmp
  }
  
  ## function call
  fnames <- file_search(pattern, start_dir, subfolders, 
                        modified=modified,
                        size=size, visible=visible)
  dispose(searchResults)                # clear
  if(length(fnames))
    svalue(searchResults) <- fnames
  else
    galert("No matching files found", parent=w)
})
@ 

<<results=hide, echo=FALSE>>=
visible(w) <- TRUE
@ 



<<file_search, results=hide, echo=FALSE>>=
#If you want to return to this example later, here's a function of mine that implements more advanced searching.  (This basically mimics the Windows XP search functionality.)
#I thought this might be good for showing off gexpandgroup (to show/hide the advanced options) and gcalendar.
file_search <- function(pattern, start_dir = getwd(), subfolders = TRUE,
                        modified,
                        modified_format = "%Y-%m-%d",
                        size,
                        visible = TRUE)
{
  fnames <- dir(
    start_dir, 
    pattern, 
    recursive = subfolders, 
    all.files = visible
  )
  filter_by_date <- !missing(modified) && !is.null(modified)
  filter_by_size <- !missing(size) && !is.null(size)
  if(filter_by_date || filter_by_size)
  {
    finfo <- file.info(fnames)     
  }
  if(filter_by_date)
  {
    now <- Sys.time()
    one_day <- 60 * 60 * 24
    time_range <- switch(modified,
      week  = c(now - 7 * one_day, now),
      month = c(now - 31 * one_day, now),
      year  = c(now - 365 * one_day, now),
      {
        modified <- strptime(modified, modified_format)
        if(length(modified) == 1L) c(modified, now) else modified
      }
    )
    fnames <- fnames[finfo$mtime > time_range[1] && finfo$mtime < time_range[2]]
  }
  if(filter_by_size)
  {
    size <- switch(size,
      small  = c(0, 100 * 1024),
      medium = c(100 * 1024, 1024 * 1024),
      large  = c(1024 * 1024, Inf),
      size
    )
    fnames <- fnames[finfo$size > size[1] && finfo$size < size[2]]  
  }
  fnames
}

@ 
