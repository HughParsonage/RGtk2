<<echo=FALSE>>=
require(gWidgets)
@ 

The \pkg{party} package implements a recursive partitioning algorithm
for tree-based regression and classification models. The package
provides an excellent \code{plot} method for the object, but in this
example we demonstrate how the \code{gtree} widget can be used to
display the hierarchical nature of the fitted object. As working
directly with the return object is not for the faint of heart, such a
GUI can be useful.

First, we fit a model from an
example appearing in the package's vignette.

<<party>>=
require(party)
data("GlaucomaM", package="ipred")      # load data
gt <- ctree(Class ~ ., data=GlaucomaM)  # fit model
@ 

The \pkg{party} object tracks the hierarchical nature through its
nodes. This object has a complex structure using lists to store data
about the nodes. We define an \code{offspring} function next that:
\begin{itemize}
\item tracks the node by number, as is done in the \pkg{party} object;
\item records whether a node has offspring through the \code{terminal}
  component (bypassing the \code{hasOffspring} function); and
\item computes a
  condition on the variable that creates the node.
\end{itemize}
For this example, the
trees are all binary trees with 0 or 2 offspring so this data frame
has only 0 or 2 rows.

<<offspring>>=
offspring <- function(key, offspring.data) {
  if(missing(key) || length(key) == 0)  # which party node?
    node <- 1
  else
    node <- as.numeric(key[length(key)]) # key is a vector

  if(nodes(gt, node)[[1]]$terminal)    # return if terminal
    return(data.frame(node=node, hasOffspring=FALSE,
                      description="terminal",
                      stringsAsFactors=FALSE))

  df <- data.frame(node=integer(2), hasOffspring=logical(2),
                   description=character(2), 
                   stringsAsFactors=FALSE)
  ## party internals
  children <-  c("left","right")
  ineq <- c(" <= "," >  ")
  varName <- nodes(gt, node)[[1]]$psplit$variableName
  splitPoint <- nodes(gt, node)[[1]]$psplit$splitpoint

  for(i in 1:2) {
    df[i,1] <- nodes(gt, node)[[1]][[children[i]]][[1]]
    df[i,2] <- !nodes(gt, df[i,1])[[1]]$terminal
    df[i,3] <- paste(varName, splitPoint, sep=ineq[i])
  }
  df                                    # returns a data frame
}
@ 

\begin{figure}
  \centering
  \includegraphics[width=.5\textwidth]{ex-gWidgets-gtree}
  \caption{GUI to explore return value of a model fit by the \code{party}  package.}
  \label{fig:ex-gWidgets-gtree-party}
\end{figure}


We make a simple GUI to show the widget (Figure~\ref{fig:ex-gWidgets-gtree-party})
<<makeGUI>>=
w <- gwindow("Example of gtree")
g <- ggroup(cont=w, horizontal=FALSE)
l <- glabel("Click on the tree to investigate the partition", 
            cont=g)
tr <- gtree(offspring, cont=g, expand=TRUE)
@ 

A single click is used to expand the tree, here we create a binding to
a double click event to create a basic graphic. The \pkg{party}
vignette shows how to make more complicated -- and meaningful --
graphics for this model fit.
<<eventHandler>>=
addHandlerDoubleclick(tr, handler=function(h,...) {
  node <- as.numeric(svalue(h$obj))
  if(nodes(gt, node)[[1]]$terminal) {   # if terminal plot
    weights <- as.logical(nodes(gt,node)[[1]]$weights)
    plot(response(gt)[weights, ])
  }})
@ 
