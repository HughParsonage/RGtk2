This example shows how to create a simple calendar using a grid layout
and the stacked widget. For a real calendar widget the
\class{QCalendarWidget} is a better alternative. We use the
\code{chron} package for its \function{day.of.week} function. This
returns a 0-based index for the day week, starting with Sunday. To
this we add functions \code{week.of.month}, \code{daysInMonth} and
\code{validDate}.
<<echo=FALSE>>=
## not shown.
require(qtbase)
require(chron)

## is this a valid date
validDate <- function(year, month, day) 
  !is.na(as.Date(sprintf("%s-%s-%s", year, month, day), format="%Y-%m-%d"))
## how many days in a month
daysInMonth <- function(year, month) {
  for(i in c(31, 30, 29, 28)) {
    if(validDate(year, month, i))
      return(i)
  }
}
## 0-based week of month
week.of.month <- function(year, month, day) {
  first.day <- day.of.week(month, 1, year)
  (first.day + day - 1) %/% 7
}
@ 

The monthly calendar will use a grid layout with the two helper
functions indicating where to put the cell for the day. Since no cell
spans rows or columns we use the simple form of the \meth{addWidget}
method, although we do adjust the alignment a bit. The
following function creates a widget to produce a monthly calendar. It
does three things: create a widget with a grid layout; put in day
headers; and finally add in the days one-by-one. The day headers use
HTML markup to distinguish them from the days.

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-gridlayout-calendar}
  \caption{A monthly calendar illustrating various nested layouts.}
  \label{fig:qt-gridlayout-calendar}
\end{figure}


<<>>=
makeMonth <- function(year, month) {
  w <- Qt$QWidget()
  lyt <- Qt$QGridLayout()
  w$setLayout(lyt)
  ## add headers
  days <- c("S","M","T","W","Th","F","S")
  days <- paste("<font color='gray'>", days, "</font>")
  sapply(1:7, function(i) {
    l <- Qt$QLabel(days[i])
    lyt$addWidget(l, 0, i-1, Qt$Qt$AlignHCenter)
  })
  ## add days
  sapply(1:daysInMonth(year, month),  function(day) {
    lab <- Qt$QLabel(day)
    lyt$addWidget(lab, row=1 + week.of.month(year, month, day),
                  column=day.of.week(month, day, year),
                  alignment=Qt$Qt$AlignRight)
  })
  return(w)
}
@ 


We use a stacked widget to incorporate the monthly calendar into a
simple widget that uses arrows to step through the months. We begin
with an intial date of January 2000.
<<>>=
year <- 2000; month <- 1
@ 

Our basic layout will use a vertical box layout with a nested layout
for the step-through controls and another holding the calendar widget.
<<>>=
w <- Qt$QWidget()
lyt <- Qt$QVBoxLayout()
w$setLayout(lyt)
@ 

Our step through controls are added through a horizontal box layout. We
could easily use a grid layout here, but this illustrates how to use a
stretch factor and alignment to keep the arrows on the edge and the
label with the current month centered.
<<>>=
prevb <- Qt$QPushButton("<")
nextb <- Qt$QPushButton(">")
curmo <- Qt$QLabel()

blyt <- Qt$QHBoxLayout()
blyt$addWidget(prevb, stretch=0, Qt$Qt$AlignRight)
blyt$addWidget(curmo, stretch=1, Qt$Qt$AlignHCenter)
blyt$addWidget(nextb, stretch=0, Qt$Qt$AlignLeft)
lyt$addLayout(blyt)
@ 

Our monthy calendar will be added to the widget through a stacked
widget. The \code{setMonth} function first checks to see if there is a
previous widget, removing it if there is. (This isn't really
necessary.) Then it adds in a new
monthly calendar to match the year and month.
<<stackedWidget>>=
stackedWidget <- Qt$QStackedWidget()
lyt$addWidget(stackedWidget)

setMonth <- function() {
  cur <- stackedWidget$currentWidget()
  if(!is.null(cur))
    stackedWidget$removeWidget(cur)
  stackedWidget$addWidget(makeMonth(year, month))
  curmo$setText(sprintf("%s %s", month.abb[month], year))
}
setMonth()                              # initial calendar
@ 

We connect to the \code{clicked} signals when the buttons are
pressed. This shows how to decrement the month and year using the
global variables \code{month} and \code{year}. 
<<connectSignal>>=
qconnect(prevb, "clicked", function() {
  if(month > 1) {
    month <<- month - 1
  } else {
    month <<- 12; year <<- year - 1
  }
  setMonth()
})
@ 

<<echo=FALSE>>=
qconnect(nextb, "clicked", function() {
  if(month < 12) {
    month <<- month + 1
  } else {
    month <<- 1; year <<- year + 1
  }
  setMonth()
})
@ 

Finally, we display the GUI (Figure~\ref{fig:qt-gridlayout-calendar}.)
<<>>=
w$show()
w$raise()
@ 
