<<echo=FALSE>>=
## layout example
library(qtbase)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.8\textwidth]{fig-qt-layouts}
  \caption{A mock GUI illustrating various layout managers provided by \Qt.}
  \label{fig:qt-gui-layout-ex}
\end{figure}

This example uses a combination of different layout managers to
organize a reasonably complex GUI. It serves as a synopsis of the
layout functionality in \Qt. A more gradual and detailed introduction
will follow this example. Figure~\ref{fig:qt-gui-layout-ex}
shows a screenshot of the finished layout.

First, we need a widget as the top-level container. We assign a grid
layout to the window for arranging the main components of the
application:
<<results=hide>>=
w <- Qt$QWidget()
w$setWindowTitle("Layout example")
gridLayout <- Qt$QGridLayout()
w$setLayout(gridLayout)
@ 
%

There are three objects managed by the grid layout: a table (we use a
label as a placeholder), a notebook, and a horizontal box layout for
some buttons. We construct them
<<mainComponents, results=hide>>=
tableWidget <- Qt$QLabel("Table widget") 
nbWidget <- Qt$QTabWidget()
buttonLayout <- Qt$QHBoxLayout()
@ 
%
and add them to the grid layout:
<<qt-layout-ex-add, results=hide>>=
gridLayout$addWidget(tableWidget, row=0, column=0, 
                     rowspan=1, colspan=1)
gridLayout$addWidget(nbWidget, 0, 1)
gridLayout$addLayout(buttonLayout, 1, 1)
@ 

%% resizing?

Next, we construct our buttons and add them to the box putting 12
pixels of space between the last two.
<<layoutButtons, results=hide>>=
b <- sapply(c("OK", "Cancel", "Help"), 
            function(i) Qt$QPushButton(i))
buttonLayout$setDirection(Qt$QBoxLayout$RightToLeft) 
buttonLayout$addStretch(1L)
buttonLayout$addWidget(b$OK)
buttonLayout$addWidget(b$Cancel)
buttonLayout$addSpacing(12L)
buttonLayout$addWidget(b$Help)
@ 
%
We added a stretch, which acts much like a spring, to pack our
buttons against the right side of the box. A fixed space of 12
pixels is inserted between the ``Cancel'' and ''help'' buttons.

The notebook widget is constructed next, with a single page:
<<nbLayout, results=hide>>=
nbPage <- Qt$QWidget()
nbWidget$addTab(nbPage, "Tab label")
nbWidget$setTabToolTip(0, "A notebook page with a form")
@ 

The form layout allows us to create standardized forms where each row
contains a label and a widget. Although this could be done with a grid layout,
using the form layout is more convenient, and allows \Qt{} to style the page
as appropriate for the underlying operating system. We place a form
layout in the notebook page and populate it:
<<nbFormLayout, results=hide>>=
formLayout <- Qt$QFormLayout()
nbPage$setLayout(formLayout)
l <- sapply(c("name", "rank", "snumber"),  Qt$QLineEdit)
formLayout$addRow("Name", l$name)
formLayout$addRow("Rank", l$rank)
formLayout$addRow("Serial number", l$snumber)
@ 
%
Each \method{addRow}{QFormLayout} call adds a label and an adjacent
input widget, in this case a text entry.

This includes our cursory demonstration of layout in \Qt. We have
constructed a mock-up of a typical application layout using the box,
grid and form layout managers.

<<echo=FALSE, results=hide>>=
w$setMinimumSize(width=500, height=400)
w$show()
@ 
