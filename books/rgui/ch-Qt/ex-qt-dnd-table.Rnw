<<echo=FALSE, results=hide>>=
library(qtbase)
#rm(list=ls())                           # clear out
@ 

\begin{figure}
  \centering
  \includegraphics[width=.8\textwidth]{fig-qt-table-dnd}
  \caption{A table widget to display contingency tables and a means to
    specify the variables through drag and drop.}
  \label{fig:eg:qt-table-widget-dnd}
\end{figure}

This example uses a table view to display the output from
\function{xtabs}. To specify the variables, the user drags variable
names from a list to one of two labels, representing terms in the formula.

\paragraph{A \class{VariableSelector} class}
First, we define the \class{VariableSelector} widget, which contains a
combo box for choosing a data frame and a list view for the variable
names. When a data frame is chosen in the combo box, its variables are
shown in the list:
<<qt-mvc-dnd-variable-selector, results=hide>>=
qsetClass("VariableSelector", Qt$QWidget, 
          function(parent = NULL) {
  super(parent)
  ## widgets
  this$df_combo_box <- Qt$QComboBox()
  this$variable_list <- Qt$QListView()
  this$variable_list$setModel(
       qdataFrameModel(data.frame(), this, 
                       useRoles = TRUE))
  this$variable_list$dragEnabled <- TRUE

  ## layout
  layout <- Qt$QVBoxLayout()
  layout$addWidget(df_combo_box)
  layout$addWidget(variable_list)
  variable_list$setSizePolicy(Qt$QSizePolicy$Expanding, 
                        Qt$QSizePolicy$Expanding)
  setLayout(layout)
  
  updateDataSets()
  qconnect(df_combo_box, "activated(int)", function(ind) {
    this$dataFrame <- df_combo_box$currentText
  })
})
@ 
%

This utility populates the combo box with a list of data frames,
keeping the selected data frame if still valid.
<<qt-mvc-dnd-update-datasets, results=hide>>=
qsetMethod("updateDataSets", VariableSelector, function() {
  current_text <- df_combo_box$currentText
  df_combo_box$clear()
  DFs <- ProgGUIinR:::avail_dfs(.GlobalEnv)
  if(length(DFs)) {
    this$df_combo_box$addItems(DFs)
    if(is.null(current_text) || !current_text %in% DFs) {
      this$df_combo_box$currentIndex <- -1
      this$dataFrame <- NULL
    } else {
      this$df_combo_box$currentIndex <- 
        which(current_text == DFs)
      this$dataFrame <- current_text
    }
  }
})
@ 

<<echo=FALSE>>=
## The \function{getIcon} helper function provides an icon from the class of a
## column:
require(grid)
getIcon <- function(x) {
  f <- tempfile()
  png(file=f, width=16, height=16)
  grid::grid.newpage()
  grid::grid.draw(ProgGUIinR:::make_icon(x))
  dev.off()
  Qt$QIcon(f)
}
@ 

The data frame is stored in the following call to
\function{qsetProperty}. We overwrite the underlying \meth{write}
method to also update our model for the variable list.
<<qt-mvc-dnd-dataset, results=hide>>=
qsetProperty("dataFrame", VariableSelector, 
             write = function(DF) {
               if (is.null(DF))
                 DF <- data.frame()
               else if (is.character(DF)) 
                 DF <- get(DF, .GlobalEnv)
               ##
               model <- variable_list$model()
               icons <- lapply(DF, getIcon)
               qdataFrame(model) <- 
                 data.frame(variable=names(DF),
                            variable.decoration=I(icons))
               this$.dataFrame <- DF
               dataFrameChanged()
             })
@ 
%
When the property is written the variable selector will emit this signal:
<<qt-mvc-dnd-datasetChanged, results=hide>>=
qsetSignal("dataFrameChanged", VariableSelector)
@ 

\paragraph{A \class{QLabel} subclass}
Next, a derivative of \class{QLabel} is defined that accepts drops
from the variable list and is capable of rotating text for displaying
the $y$-label component:
<<DropLabelRotation, results=hide>>=
qsetClass("VariableLabel", Qt$QLabel, function(parent=NULL) {
  super(parent)
  this$rotation <- 0L
  setAcceptDrops(TRUE)
  setAlignment(Qt$Qt$AlignHCenter | Qt$Qt$AlignVCenter)
})
@ 
%
We define two properties, one for the rotation and the other for the
variable name, which is not always the same as the label text:
<<qt-mvc-dnd-rotation, results=hide>>=
qsetProperty("rotation", VariableLabel)
qsetProperty("variableName", VariableLabel)
@ 
%
To enable client code to respond to a drop, we define a signal:
<<qt-mvc-dnd-drop, results=hide>>=
qsetSignal("variableNameDropped", VariableLabel)
@ 

This utility tries to extract a variable name from the MIME data,
which \class{DataFrameModel} should have serialized appropriately:
<<qt-mvc-dnd-get-variable-name>>=
variableNameFromMimeData <- function(mime_data) {
  name <- NULL
  RDA_MIME_TYPE <- "application/x-rlang-transport"
  if(mime_data$hasFormat(RDA_MIME_TYPE)) {
    name_list <- unserialize(mime_data$data(RDA_MIME_TYPE))
    if (length(name_list) && is.character(name_list[[1]]))
      name <- name_list[[1]]
  }
  name
}
@ 

To handle the drag events we override the methods
\event{dragEnterEvent}, \event{dragLeaveEvent}, and
\event{dropEvent}. The first two simply change the background of the
label to indicate a valid drop: 
<<results=hide>>=
qsetMethod("dragEnterEvent", VariableLabel, function(event) {
  mime_data <- event$mimeData()
  if(!is.null(variableNameFromMimeData(mime_data))) {
    setForegroundRole(Qt$QPalette$Dark)
    event$acceptProposedAction()
  }
})
qsetMethod("dragLeaveEvent", VariableLabel, function(event) {
  setForegroundRole(Qt$QPalette$WindowText)
  event$accept()
})
@ 

To respond to a drop event, we get the variable name, set the text of the
label and emit the \signal{variableNameDropped}{VariableLabel} signal:
<<dropEvent, results=hide>>=
qsetMethod("dropEvent", VariableLabel, function(event) {
  setForegroundRole(Qt$QPalette$WindowText)  
  mime_data <- event$mimeData()
  this$variable_name <- variableNameFromMimeData(mime_data)
  if(!is.null(variable_name)) {
    this$text <- variable_name
    variableNameDropped()
    setBackgroundRole(Qt$QPalette$Window)
    event$acceptProposedAction()
  }
})
@ 

To complete the \class{VariableLabel} class, we override the
\event{paintEvent} event to respect the
\prop{rotation} property. Drawing low-level graphics is
beyond our scope. In short, we translate the origin to the center
of the label rectangle, rotate the coordinate system by the angle,
then draw the text:
<<results=hide>>=
qsetMethod("paintEvent", VariableLabel, function(event) {
  painter <- Qt$QPainter()
  painter$begin(this)
  
  painter$save()
  painter$translate(width / 2, height / 2)
  painter$rotate(-(rotation))
  rect <- painter$boundingRect(0, 0, 0, 0, 
                               Qt$Qt$AlignCenter, text)
  painter$drawText(rect, Qt$Qt$AlignCenter, text)
  painter$restore()
  painter$end()
})
@ 

\paragraph{An \class{XTabsWidget} class}
Our main widget consists of three child widgets: two drop labels for the
formula and a table widget to show the output. This could be
extended to include a third variable for three-way tables, but we leave
that exercise for the interested reader. The constructor simply calls
two methods:
<<XtabsWidget, results=hide>>=
qsetClass("XtabsWidget", Qt$QWidget, function(parent = NULL) {
  super(parent)
  initWidgets()
  initLayout()
})
@ 
%

We do not list the \method{initLayout}{XtabsWidget} method, as it
simply adds the widgets to a grid layout. The
\method{initWidgets}{XtabsWidget} method initializes three widgets:
<<initWidgets, results=hide>>=
qsetMethod("initWidgets", XtabsWidget, function() {
  this$xlabel <- VariableLabel()
  qconnect(xlabel, "variableNameDropped", invokeXtabs)

  this$ylabel <- VariableLabel()
  pt <- ylabel$font$pointSize()
  ylabel$minimumWidth <- 2*pt; ylabel$maximumWidth <- 2*pt
  ylabel$rotation <- 90L
  qconnect(ylabel, "variableNameDropped", invokeXtabs)
  
  this$table_view <- Qt$QTableView()
  table_view$setModel(qdataFrameModel(data.frame(), this))
  str(table_view$model())
  clearLabels()
})
@ 
%
The \code{xlabel} is straight-forward: we construct it, then connect to the
drop signal. For the \code{ylabel} we also adjust the rotation and
constrain the width based on the font size (otherwise the label width
reflects the length of the dropped text). The \meth{clearLabels}
method (not shown) just initializes the labels.

<<echo=FALSE, results=hide>>=
## Not shown
qsetMethod("clearLabels", XtabsWidget, function() {
  point_size <- xlabel$font$pointSize()
  xlabel$text <- "Drop x factor here"
  xlabel$minimumHeight <- 2 * point_size
  
  ylabel$text <- "Drop y factor here"
  ylabel$minimumWidth <- 2 * point_size
})
@ 

<<echo=FALSE, results=hide>>=
## Not shown
qsetMethod("initLayout", XtabsWidget, function() {
  layout <- Qt$QGridLayout()
  setLayout(layout)
  layout$addWidget(xlabel, 0, 1, 1, 3)
  layout$addWidget(ylabel, 1, 0, 1, 1)
  layout$addWidget(table_view, 1, 1, 1, 3)
  
  layout$setColumnStretch(2, 1)
  layout$setRowStretch(1, 1)
})
@ 

This function builds the formula, invokes \function{xtabs} and updates
the table view, we hide the conditional call to \function{xtabs}.
<<echo=FALSE>>=
## Hide call to xtabs
## Return NULL if not okay, otherwise a table object
call_xtabs <- function(DF, x, y) {
  if(is.character(DF))
    DF <- get(DF)
  if(is.null(x)) {
    table <- NULL
  } else if(is.null(y)) {
    f <- formula(sprintf("~ %s", x))
    table <- xtabs(f, data = DF)
  } else { 
    f <- formula(sprintf("~ %s + %s", y, x))
    table <- xtabs(f, data = DF)
  } 
  table
}
@ 
<<makeTable, results=hide>>=
qsetMethod("invokeXtabs", XtabsWidget, function() {
  if (is.null(dataFrame))
    return()
  x <- xlabel$variable_name
  y <- ylabel$variable_name
  
  if(!is.null(table <- call_xtabs(dataFrame, x, y)))
     updateTableView(table)
})
@ 

We define a method to update the table view:
<<updateTableWidget, results=hide>>=
qsetMethod("updateTableView", XtabsWidget, function(table) {
  model <- table_view$model()
  if (length(dim(table)) == 1)
    qdataFrame(model) <- data.frame(count = unclass(table))
  else qdataFrame(model) <- data.frame(unclass(table))
})
@ 
%

Finally, we define a property for the data frame held in the
\class{XtabsWidget} class:
<<qt-mvc-dnd-dataframe-xtabs, results=hide>>=
qsetProperty("dataFrame", XtabsWidget, 
             write = function(dataFrame) { 
               clearLabels()
               this$.dataFrame <- dataFrame
             })
@ 

All that remains is to place the \class{VariableSelector} and
\class{XtabsWidget} together in a split pane and then connect a
handler that keeps the datasets synchronized:
<<echo=FALSE, results=hide>>=
## Not shown
require(MASS); data(Cars93); data(Aids2)
@ 
<<results=hide>>=
w <- Qt$QSplitter()
w$setWindowTitle("GUI for xtabs()")
w$addWidget(vs <- VariableSelector())
w$addWidget(tw <- XtabsWidget())
w$setStretchFactor(1, 1)
qconnect(vs, "dataFrameChanged", function() {
  tw$dataFrame <- vs$dataFrame
})
w$show()
@ 
%
Figure~\ref{fig:eg:qt-table-widget-dnd} shows the result, after the
user has dragged two variables onto the labels.
