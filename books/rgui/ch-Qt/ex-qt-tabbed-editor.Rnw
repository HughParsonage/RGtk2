<<echo=FALSE>>=
## a tabbed editor
## This has a notebook and sheets
## NOT WORKING
require(qtbase)
@ 

This example shows how to combine the text edit with a notebook widget
to create a widget for editing more than one file at a time.  We begin
with a sub-class of \class{QTextEdit} that specially represents a
editing component in a notebook of a text editor. The constructor
initializes some parameters and connects handlers to update the
application actions when the state of the editor changes:
<<results=hide>>=
qsetClass("TextEditSheet", Qt$QTextEdit, function(parent=NULL) {
  super(parent)
  this$lineWrapMode <- Qt$QTextEdit$NoWrap
  setFontFamily("Courier")
  
  actions <- window()$actions()
  qconnect(this, "redoAvailable", function(yes) {
    if(isCurrentSheet()) 
      actions$redo$setEnabled(yes)
  })
  qconnect(this, "undoAvailable", function(yes) {
    if(isCurrentSheet()) 
      actions$undo$setEnabled(yes)
  })
  qconnect(this, "selectionChanged", function() {
    hasSelection <- this$textCursor()$hasSelection()
    if(isCurrentSheet()) {
      actions$cut$setEnabled(hasSelection)
      actions$copy$setEnabled(hasSelection)
    }
  })
  qconnect(this, "textChanged", function() {
    if(isCurrentSheet()) {
      mod <- this$document()$isModified()
      actions$save$setEnabled(mod)
    }
  })
})
@ 

In this simple example, the \class{TextEditSheet} will keep track of
its file name. In a real design, the filename would probably be
associated with the underlying data. The file name is used for saving
the sheet and for labeling the notebook tab. The latter requires
special logic in the setter for the property:
<<results=hide>>=
qsetProperty("filename", TextEditSheet, write = function(fname) {
  this$.filename <- fname
  ## update tab label
  notebook <- this$window()$notebook() 
  ind <- notebook$indexOf(this)
  notebook$setTabText(ind, basename(fname))
})
@ 

Next, we define a few methods for the sheet. First, one to save the
file. We use the filename property as the default destination.
<<results=hide>>=
qsetMethod("saveSheet", TextEditSheet, function(fname = filename) {
  txt <- this$toPlainText()
  writeLines(strsplit(txt, "\n")[[1]], con=fname)
})
@ 

The next method returns whether this editing sheet is current one in
the application:
<<results=hide>>=
qsetMethod("isCurrentSheet", TextEditSheet, function() {
  notebook <- this$window()$notebook()
  notebook$currentIndex == notebook$indexOf(this)
})
@ 

Next, we construct the window that contains the notebook of documents.
We subclass \class{QMainWindow} (see Chapter~\ref{cha:qt:MVC}), so
that we can add a toolbar. Our constructor customizes the notebook,
sets up the actions and toolbar, then opens with a blank sheet:
<<results=hide>>=
qsetClass("TextEditWindow", Qt$QMainWindow, function(parent=NULL) {
  super(parent)
  
  notebook <- Qt$QTabWidget()
  notebook$tabsClosable <- TRUE
  notebook$usesScrollButtons <- TRUE
  notebook$documentMode <- TRUE
  qconnect(notebook, "tabCloseRequested", 
           function(ind) notebook$removeTab(ind))
  qconnect(notebook, "currentChanged(int)", function(ind) {
    if(ind > 0)
      updateActions()
  })
  setCentralWidget(notebook)
  
  initActions()
  makeToolbar()
  newSheet()
})
@ 

We have several actions possible in our GUI, such as the standard cut,
copy and paste. We define them for the entire application, but the
actions primarily work at the sheet level. The \meth{initActions}
constructs the actions and adds them to the window:
<<results=hide>>=
## initialize the actions
qsetMethod("initActions", TextEditWindow, function() {
  makeSheetAction <- function(name) {
    x <- Qt$QAction(name, this)
#    x$setShortcuts(Qt$QKeySequence[[name]])
    qconnect(x, "triggered", function() {
      get(tolower(x$text), currentSheet())()
    })
    addAction(x)
    x
  }
  
  sapply(c("Redo", "Undo", "Cut", "Copy", "Paste", "Save"), makeSheetAction)
  
  x <- Qt$QAction("open", this)
#  x$setShortcuts(Qt$QKeySequence$Open)
  qconnect(x, "triggered", function() {
    fname <- Qt$QFileDialog$getOpenFileName(this, "Select a file...", getwd())
    openSheet(fname)
  })
  addAction(x)

  x <- Qt$QAction("new", this)
#  x$setShortcuts(Qt$QKeySequence$New)
  qconnect(x, "triggered", newSheet)
  addAction(x)
})
@ 
%
The enclosed \function{makeSheetAction} function creates an action
that calls a method of the same name on the current sheet.

The \meth{makeToolbar} method adds the actions to a
toolbar:
<<results=hide>>=
## Not shown. A bit repetitive
## Could also provide a menubar as this gets *very* crowded.
qsetMethod("makeToolbar", TextEditWindow, function() {
  tb <- Qt$QToolBar()
  a <- actions()
  lapply(a, tb$addAction)
  tb$insertSeparator(a$cut)
  tb$insertSeparator(a$undo)
  this$addToolBar(tb)
})
@ 
%
Our GUI might also benefit from a menubar, an exercise left
for the reader.

This method opens a new sheet, with optional initial text:
<<results=hide>>=
qsetMethod("newSheet", TextEditWindow, 
function(title="*scratch*", str="") {
  a <- TextEditSheet()         # a new sheet
  nb <- this$notebook()

  nb$addTab(a, "")  # add to the notebook
  ind <- nb$indexOf(a)
  nb$setCurrentIndex(ind)
  a$setPlainText(str)        
  a$filename <- title         # also updates tab
})
@ 

The \method{openSheet}{TextEditWindow} method reads the text of a
given file and displays it in a new sheet:
<<results=hide>>=
qsetMethod("openSheet", TextEditWindow, function(fname) {
  txt <- paste(readLines(fname), collapse="\n")
  newSheet(fname, txt)
})
@ 

The \method{updateActions}{TextEditWindow} method is called whenever
the current sheet changes, so that the state of the actions reflect
that sheet:
<<results=hide>>=
qsetMethod("updateActions", TextEditWindow, function() {
  cur <- currentSheet()
  if(is.null(cur)) 
    return()
  a <- actions()
  a$redo$enabled <- FALSE
  a$undo$enabled <- FALSE
  a$cut$enabled <- cur$textCursor()$hasSelection()
  a$copy$enabled <- cur$textCursor()$hasSelection()
  a$paste$enabled <- cur$canPaste()
})
@ 

Finally, we define some accessors for getting the tabbed notebook, the
currently edited sheet and the list of application actions:
<<results=hide>>=
qsetMethod("notebook", TextEditWindow, function() {
  this$centralWidget()
})
qsetMethod("currentSheet", TextEditWindow, function() {
  this$notebook()$currentWidget()
})
qsetMethod("actions", TextEditWindow, function() {
  actions <- super("actions")
  names(actions) <- sapply(actions, `$`, "text")
  actions
})
@ 

<<demo>>=
widget <- TextEditWindow()
widget$show()
widget$raise()
@ 
