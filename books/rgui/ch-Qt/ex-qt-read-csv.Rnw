<<echo=FALSE, results=hide>>=
## An example dialog to gather arguments for read.csv
require(qtbase)
@ 
%%
%% What
We illustrate some of the widgets and dialogs discussed in this
chapter in the following example, which gathers arguments needed to
import a file into \R{} through \function{read.csv}. Figure~\ref{fig:qt-read-csv-dialog}
shows the finished GUI. We use a form layout to organize our controls,
but first we need to define them.

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-qt-read-csv-dialog}
  \caption{A dialog to collect argument for a call to \function{read.csv}}
  \label{fig:qt-read-csv-dialog}
\end{figure}

%% how
We use a named list below to store our controls:
<<results=hide>>=
controls <- list()
controls$file <- Qt$QPushButton("click to select...")
##
controls$header <- Qt$QCheckBox()                 # no name
controls$header$setChecked(TRUE)
##
controls$sep <- Qt$QComboBox()
controls$sep$addItems(sprintf('%s', c(",", ";","","\t")))
controls$sep$setEditable(TRUE)
##               
controls$quote <- Qt$QLineEdit("\"'")
##
controls$fill <- Qt$QCheckBox()
controls$fill$setChecked(TRUE)
@ 
%
The names of the list will become the label associated with the
corresponding control.  A button is chosen for the file, which we will
later use to open a file selection dialog. Otherwise, the controls
have a fairly obvious mapping to the arguments of \function{read.csv}.

%% radio button
To illustrate radio buttons, we use a set of them to select the comment
character argument. Here we store the container in the list, and create a
separate (global) variable to hold the radio-button widgets themselves.
<<comment.char, results=hide>>=
controls$comment.char <- Qt$QGroupBox()        # container
comment.char <- lapply(sprintf("%s", c("","#","%")),
                       Qt$QRadioButton, controls$comment.char)
comment.char[[1]]$setChecked(TRUE)
## manage
comment.char.bg <- Qt$QButtonGroup()
sapply(comment.char, comment.char.bg$addButton)
## layout
layout <- Qt$QVBoxLayout()
controls$comment.char$setLayout(layout)
sapply(comment.char, layout$addWidget)
@ 

The variable name use a simple line edit widget to which we add an
instructional placeholder. We also populate its auto-completion
database with the current global workspace variable names.
<<results=hide>>=
controls$name <- Qt$QLineEdit("")
controls$name$setPlaceholderText("Variable name to store data")
completer <- Qt$QCompleter(ls(.GlobalEnv))
controls$name$setCompleter(completer)
@ 

%% Layout form
The form layout goes quickly, as we can iterate over the list components:
<<formLayout, results=hide>>=
form_layout <- Qt$QFormLayout()
mapply(form_layout$addRow, names(controls), controls)
@ 

%% Use standard buttons
A dialog button box ensure consistency with the operating system
conventions. 
<<buttonBox, results=hide>>=
button_box <- 
  Qt$QDialogButtonBox(Qt$QMessageBox$Cancel | 
                      Qt$QMessageBox$Ok)
@ 

We use a simple widget to layout the form and the buttons.
<<windowLayout, results=hide>>=
window <- Qt$QWidget()
window$windowTitle <- "Read csv file"
window$setLayout(window_layout <- Qt$QVBoxLayout())
window_layout$addLayout(form_layout)
window_layout$addWidget(button_box)
@ 
%
At this point, the widgets are set up and laid out. We turn to the
task of adding interactivity. First, the file button when clicked
should open a file selection dialog. If a file load is successful, we
change the label on the button to indicate the selection, using the
global \code{fname} to store the value.

<<fileHandler, results=hide>>=
filename <- NULL
qconnect(controls$file, "clicked", function() {
  name_filter <- "CSV file (*.csv);; All files (*.*)"
  filename <<- Qt$QFileDialog$getOpenFileName(window, 
               "Select a CSV file...", getwd(), name_filter)
  if(!is.null(filename))
    controls$file$setText(basename(filename))
})
@ 

We connect to the signals on the dialog button box. The
\signal{rejected} callback simply hides the dialog. The
\signal{accepted} callback is more complex. After checking that a file
and variable name have been selected, we gather the values from the
dialog through various means. These are stored in the list \code{args}
below. Finally, once the arguments are collected, we execute the call
to \code{read.csv}.

<<buttonBox, results=hide>>=
qconnect(button_box, "rejected", function() window$hide())
##
qconnect(button_box, "accepted", function() {
  if(!is.null(filename) && nchar(controls$name$text) > 0) {
    args <- list(file=filename,
                 header=controls$header$checked,
                 sep=controls$sep$currentText,
                 quote=controls$quote$text,
                 fill=controls$fill$checked
                 )
    args$comment.char <- comment.char.bg$checkedButton()$text
    ##
    assign(controls$name$text, do.call("read.csv", args), .GlobalEnv)
    window$hide()
  } else {
    Qt$QMessageBox$warning(parent = window, 
       title = "Warning!",
       text = "You need to select a file and variable name")
  }
})
  
@ 

<<showAndRaise, echo=FALSE, results=hide>>=
window$show()
window$raise()
@ 
