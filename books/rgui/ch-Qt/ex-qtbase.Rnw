As a synopsis for how one programs a GUI using \pkg{qtbase}, we present
a simple dialog that allows the user to input a date. A detailed
introduction to these concepts will follow this example.

After ensuring that the underlying libraries are installed, the
package may be loaded like any other \R{} package:
<<>>=
library(qtbase)
@ 


\begin{figure}
  \centering
  \includegraphics[width=.5\textwidth]{fig-qt-datavalidator}
  \caption{Screenshot of our sample GUI to collect a date from the user.}
  \label{fig:first-gui}
\end{figure}


\paragraph{Constructors}

As with all other toolkits, \Qt\/ widgets are objects, and the objects
are created with constructors. For our GUI we have four
basic widgets: a widget used as a container to hold the others, a
label, a single-line edit area and a button. 
<<>>=
window <- Qt$QWidget()
label <- Qt$QLabel("Date:")
edit <- Qt$QLineEdit()
button <- Qt$QPushButton("Ok")
@ 
%
The constructors are not found in the global environment, but rather
in the \code{Qt} environment, an object exported from the \pkg{qtbase}
namespace. As such, the \iprogram{R's object oriented notation}\code{\$} lookup operator is used. 

% For this
% example, we use a \code{QWidget} as a top-level window, leaving for
% Section~\ref{sec:top-level-windows} to discuss the \code{QMainWindow}
% object and its task-tailored features.


%% properties

Widgets in \Qt{} have various properties that specify the state of the
object. For example, the \code{windowTitle} property controls the
title of a top-level widget:
<<>>=
window$windowTitle <- "An example"
@ 
%
\Qt{} objects are represented as extended \R{} environments, and every
property is a member of the environment. The \code{\$} function called
above is simply that for environments.

%% method call 

Method calls tell an object to perform some behavior. Like properties,
methods are accessible from the instance environment. For example,
the \class{QLineEdit} widget supports an input mask that constrains
user input to a particular syntax. For a date, we may want the value
to be in the form ``year-month-date.'' This would be specified with
\code{"0000-00-00"}, as seen by consulting the help page for
\code{QLineEdit}. To set an input mask we have:
<<results=hide>>=
edit$setInputMask("0000-00-00")
@  %% ML: inputMask is a property, but any other method example?

%% Layout 
\paragraph{Layout managers}
\Qt{} uses separate layout manager objects to organize widgets. This is similar
to
Java/Swing and \pkg{tcltk}, but not \pkg{RGtk2}. Layout managers will
be discussed more thoroughly in Chapter~\ref{cha:layout-managers},
but in this example we will use a grid layout to organize our
widgets. The placement of child widgets into the grid is done through
the \method{addWidget}{QLayout} method and requires a
specification, by index and span, of the cells the child will occupy:
<<results=hide>>=
layout <- Qt$QGridLayout()
layout$addWidget(label, row = 0, column = 0, 
                 rowSpan = 1, columnSpan = 1)
layout$addWidget(edit,   0, 1, 1, 1)
layout$addWidget(button, 1, 1, 1, 1)
@ 

We need to attach our layout to the widget \code{w}:
<<results=hide>>=
window$setLayout(layout)
@ 

Finally, to view our GUI (Figure~\ref{fig:first-gui}), we must call its
\method{show}{QWidget} method.
<<results=hide>>=
window$show()
@ 
%% interactivity
\paragraph{Callbacks}
As with other GUI toolkits, interactivity is implemented by callbacks
connected to particular signals. To react to the clicking of the button,
the programmer attaches a handler to the
\signal{clicked} signal using the \function{qconnect}
function. The function requires the object, the signal name and the
handler. Here we print the value stored in the ``Date'' field.
<<results=hide>>=
handler <- function()  print(edit$text)
qconnect(button, "clicked", handler)
@ 
We will discuss callbacks more completely in Section~\ref{sec:qt-signals}.

%% Object oriented
\paragraph{Object-oriented support}
\class{QLineEdit} can validate text input, and we would like to
validate the entered date.  There are a few built-in validators. For this 
purpose the regular expression validator could be used, but
it would be difficult to write a sufficiently robust
expression. Instead we attempt to coerce the string value to a date
via \R's \code{as.Date} function with a format of
\code{"\%Y-\%m-\%d"}. In \GTK{}, validation would be implemented by a
signal handler or other callback. However, as C++ is object-oriented,
\Qt{} expects the programmer to derive a new class from
\class{QValidator} and pass an instance to the \code{setValidator}
method on \class{QLineEdit}.

It is possible to define R subclasses of C++ classes with
\pkg{qtbase}.  More details on working with classes and methods are
provided in Section~\ref{sec:qt-defin-class-meth}. For this task, we
need to extend \code{QValidator} and override its \code{validate}
virtual method.  The \function{qsetClass} function defines a new
class:
<<results=hide>>=
qsetClass("DateValidator", Qt$QValidator, 
          function(parent = NULL) {
            super(parent)
          })
@ 

To override \method{validate}{QValidator}, we call
\function{qsetMethod}:
<<results=hide>>=
qsetMethod("validate", DateValidator, function(input, pos) {
  if(!grepl("^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$", input)) 
    return(Qt$QValidator$Intermediate)
  else  if(is.na(as.Date(input, format="%Y-%m-%d"))) 
    return(Qt$QValidator$Invalid)
  else 
    return(Qt$QValidator$Acceptable)
})
@ 
%
The signature of the \method{validate}{QValidator} method is a string
containing the input and an index indicating where the cursor is in
the text box. The return value indicates a state of ``Acceptable'',
``Invalid'', or, if neither can be determined, ``Intermediate.'' These
values are listed in an enumeration in the \code{Qt\$QValidator} class
(cf. Section~\ref{sec:qt-enums} for more on enumerations).

The class object, which doubles as the constructor, is defined in the
current top-level environment as a side effect of
\function{qsetMethod}. We call it to construct an instance, which is
passed to the edit widget:
<<results=hide>>=
validator <- DateValidator()
edit$setValidator(validator)
@ 
%
