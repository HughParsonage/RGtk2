%% Need to decide whether this example is still necessary

%% JV: 8-12 it seems superflous. It can stay in the package

<<MainWindowExample, echo=FALSE, results=hide>>=
## An example showing how to mock up a main window to hold the components of an IDE
## 
library(qtbase)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.9\textwidth]{fig-qt-rstudio-like}
  \caption{A GUI mockup using dockable widgets and a \class{QMainWindow}
    instance}
  \label{fig:qt-r-studio}
\end{figure}


This example shows how to begin constructing a main window
(Figure~\ref{fig:qt-r-studio}) similar to that of the web application
R-Studio (\url{www.studio.org}).

We begin by setting a minimum size and a title for the main window:
<<results=hide>>=
w <- Qt$QMainWindow()
w$setMinimumSize(800, 500)
w$setWindowTitle("Rstudio-type layout")
@  
%
We add a menubar and toolbar. Here only the file menu definitions are
shown:
<<defineActions,results=hide>>=
l <- list()
mb <- Qt$QMenuBar()
w$setMenuBar(mb)
fmenu <- mb$addMenu("File")
fmenu$addAction(l$new <- Qt$QAction("New", w))
fmenu$addSeparator()
fmenu$addAction(l$open <- Qt$QAction("Open", w))
fmenu$addAction(l$save <- Qt$QAction("Save", w))
fmenu$addSeparator()
fmenu$addAction(l$quit <- Qt$QAction("Quit", w))
@ 

<<echo=FALSE, results=hide>>=
emenu <- mb$addMenu("Edit")
emenu$addAction(l$undo <- Qt$QAction("Undo", w))
emenu$addAction(l$redo <- Qt$QAction("Redo", w))
emenu$addSeparator()
emenu$addAction(l$cut <- Qt$QAction("Cut", w))
emenu$addAction(l$copy <- Qt$QAction("Copy", w))
emenu$addAction(l$paste <- Qt$QAction("Paste", w))
@ 

The toolbar contains only some of the most important actions:
<<defineToolbar, results=hide>>=
tb <- Qt$QToolBar()
w$addToolBar(tb)
tb$addAction(l$new)
tb$addSeparator()
tb$addAction(l$quit)
tb$addSeparator()
tb$addAction(l$help <- Qt$QAction("Help", w))
@ 

Our central widget holds two main areas: one for editing files and one
for a console. A \class{QSplitter} divides the space
between the two main widgets:
<<results=hide>>=
centralWidget <- Qt$QSplitter()
centralWidget$setOrientation(Qt$Qt$Vertical)
w$setCentralWidget(centralWidget)
@
%
As we may want to edit multiple files, we embed the
editor widgets in a tabbed notebook, with closable tabs:
<<results=hide>>=
fileNotebook <- Qt$QTabWidget()
l <- Qt$QLabel("File notebook")
l$setAlignment(Qt$Qt$AlignCenter)
fileNotebook$addTab(l, "About")
fileNotebook$setTabsClosable(TRUE)
qconnect(fileNotebook, "tabCloseRequested", function(ind, nb) {
  nb$removeTab(ind)
}, user.data=fileNotebook)
centralWidget$addWidget(fileNotebook)
@ 
%
Our console widget is just a stub:
<<results=hide>>=
consoleWidget <- Qt$QLabel("Console goes here")
consoleWidget$setAlignment(Qt$Qt$AlignCenter)
centralWidget$addWidget(consoleWidget)
@ 

The right side of the layout will contain various tools for
interacting with the R session. We place these into dock widgets, in
case the user would like to place them elsewhere on the screen. We
show a stub for a workspace browser:
<<results=hide>>=
workspaceBrowser <- Qt$QLabel("Workspace browser goes here")
wbDockWidget <- Qt$QDockWidget("Workspace")
wbDockWidget$setWidget(workspaceBrowser)
@ 

<<echo=FALSE,results=hide>>=
historyBrowser <- Qt$QLabel("History browser goes here")
historyBrowser$setAlignment(Qt$Qt$AlignCenter)
hbDockWidget <- Qt$QDockWidget("History")
hbDockWidget$setWidget(historyBrowser)
@ 

The workspace and history browser are placed in a notebook to conserve
space. We add the workspace browser on the right side, then tabify the
history browser (whose construction is not shown):
<<results=hide>>=
w$addDockWidget(Qt$Qt$RightDockWidgetArea, wbDockWidget)
w$tabifyDockWidget(wbDockWidget, hbDockWidget)
@

We next place a plot notebook in its own space:
<<results=hide>>=
plotNotebook <- Qt$QTabWidget()
pnDockWidget <- Qt$QDockWidget("Plots")
w$addDockWidget(Qt$Qt$RightDockWidgetArea, pnDockWidget)
@              

Finally, we add a status bar and show a transient message:
<<results=hide>>=
sb <- Qt$QStatusBar()
w$setStatusBar(sb)
sb$showMessage("Mock-up layout for an IDE", 20000)
@ 


<<echo=FALSE, results=hide>>=
w$show()
w$raise()
@ 
