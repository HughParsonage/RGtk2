Many applications have a central window that typically contains a
menubar, toolbar, an application-specific area, and a statusbar at the
bottom. This is known as an application window and is implemented by
the \class{QMainWindow} widget. Although any widget in \Qt{} might
serve as a top-level window, \class{QMainWindow} has explicit support
for a menubar, toolbar and status bar, and also provides a framework
for dockable windows. 

To demonstrate the \class{QMainWindow} framework, we will create a
simple spreadsheet application. First, we construct a
\class{QMainWindow} object:
<<qt-app-construct>>=
mainWindow <- Qt$QMainWindow()
@ 

The region between the toolbar and statusbar, known as the central
widget, is completely defined by the application. We wish to display a
spreadsheet, i.e., an editable table:
<<qt-app-table>>=
data(mtcars)
model <- qdataFrameModel(mtcars, editable = TRUE)
tableView <- Qt$QTableView()
tableView$setModel(model)
mainWindow$setCentralWidget(tableView)
@ 
%
We will continue by adding a menubar and toolbar to our window. This
depends on an understanding of how \Qt{} represents actions.

\subsection{Actions}
\label{sec:actions}

The buttons in the menubar and toolbar, as well as other widgets in
the GUI, might share the same action. Thus, it is sensible to separate
the definition of an action from any individual control. An action is
defined by the \class{QAction} class. As with other toolkits, an
action encapsulates a command that may be shared among parts of a GUI,
in this case menu bars, toolbars and keyboard shortcuts. The
properties of a \class{QAction} include the label \qtproperty{text},
\qtproperty{icon}, \qtproperty{toolTip}, \qtproperty{statusTip},
keyboard \qtproperty{shortcut} and whether the action is
\qtproperty{enabled}. 

We construct an action for opening a file:
<<qt-app-action-construct>>=
openAction <- Qt$QAction("Open", mainWindow)
@
% 
The label text is passed to the constructor. We can specify additional
properties, such as the text to display in the status bar when the
user moves the mouse over a widget proxying the action:
<<qt-app-action-status-tip>>=
openAction$statusTip <- "Load a spreadsheet from a CSV file"
@ 
%
One could also set an icon from a file:
<<qt-app-action-icon>>=
iconFile <- system.file("images/open.gif", package="gWidgets")
saveAction$setIcon(Qt$QIcon(iconFile))
@ 

%% ML: avoiding the '&' here, as it really indicates a keyboard
%% accelerator. Keyboard accelerators are rarely useful and Qt does
%% not show them (by default) on Windows and Mac. The 'shortcut'
%% property on the QAction is a shortcut in the GTK+ sense. These work
%% as long as the window has focus and are displayed to the right of
%% the menu item on every major platform.

Actions emit a \signal{triggered} signal when
activated. The application should connect to this signal to implement
the command behind the action:
<<qt-app-action-trigger>>=
qconnect(openAction, "triggered", function() {
  filename <- Qt$QFileDialog$getOpenFilename()
  tableView$model <- qdataFrameModel(read.csv(filename), editable=TRUE)
})
@ 

\paragraph{Toggle and radio actions}

An action may have a boolean state, i.e., it may be checkable. This is
controlled by the \qtproperty{checkable} property. When a checkable
action is triggered, its state is toggled and the current state is
passed to the trigger handler.
For example, we could have an action that toggled whether the
spreadsheet will be saved on exit:
<<qt-app-action-toggle>>=
saveOnExitAction <- Qt$QAction("Save on exit")
saveOnExitAction$checkable <- TRUE
@ 

A checkable action in isolation behaves much like a check button. If
checkable actions are placed together into a \class{QActionGroup}, the
default behavior is such that only one is checked at once, analogous
to a set of radio buttons. We could have an action for controlling the
justification mode for the text entry:
<<qt-app-action-radio>>=
justGroup <- Qt$QActionGroup()
leftAction <- Qt$QAction("Left Align", justGroup)
leftAction$checkable <- TRUE
rightAction <- Qt$QAction("Right Align", justGroup)
rightAction$checkable <- TRUE
centerAction <- Qt$QAction("Center", justGroup)
centerAction$checkable <- TRUE
@ 

\paragraph{Keyboard shortcuts}

Every platform has a particular convention for mapping key presses to
typical actions. \Qt{} abstracts some common commands via the
\enumeration{QKeySequence::StandardKey} enumeration, a member of which
may refer to multiple key combinations, depending on the command and
the platform. We assign the appropriate shortcuts for our ``Open''
action:
<<qt-app-action-shortcut>>=
openAction$setShortcuts(Qt$QKeySequence$Open)
@ 
%
Whenever the window has focus and the user presses the conventional
key sequence, such as \texttt{Ctrl-O} on Windows, our action will be
triggered. It is important not to confuse this shortcut mechanism with
mnemonics, which are often indicated by underlining a letter in the
label text of a menu item. A mnemonic is active only when the parent
menu is active. Mnemonics are disabled by default on Windows
and Mac installations of \Qt{} and thus are not covered here.

\subsection{Menubars}
\label{sec:menubars}

Applications often support too many actions to display them all at
once. The typical solution is to group the actions into a hierarchical
system of menus. The menubar is the top-level entry point to the hierarchy.
The placement of the menubar depends on the platform. On Mac OS X,
applications share a menubar area at the top of the screen. On other
platforms, the menubar is typically found at the top of the main
window for the application.

We create an instance of \class{QMenuBar}:
<<qt-app-menubar>>=
menubar <- Qt$QMenuBar()
@ 
%
A \class{QMenuBar} is a container of \class{QMenu} objects, which
represent the submenus. We create a \class{QMenu} for the ``File'' and
``Edit'' menus and add them to the menubar:
<<qt-app-menubar-addMenu>>=
fileMenu <- Qt$QMenu("File")
menubar$addMenu(fileMenu)
editMenu <- Qt$QMenu("Edit")
menubar$addMenu(editMenu)
@ 

To each \class{QMenu} we may add:
\begin{enumerate}
\item an action through the \method{addAction}{QMenu} method,
\item a separator through \method{addSeparator}{QMenu} or, 
\item nested submenus through the \method{addMenu}{QMenu} method.
\end{enumerate}
We demonstrate each of these operations by populating the ``File'' and
``Edit'' menus:
<<qt-app-menubar-populate>>=
fileMenu$addAction(openAction)
fileMenu$addSeparator()
fileMenu$addAction(saveOnExitAction)
fileMenu$addSeparator()
quitAction <- fileMenu$addAction("Quit")

justMenu <- editMenu$addMenu("Justification")
justMenu$addAction(leftAction)
justMenu$addAction(rightAction)
justMenu$addAction(centerAction)
@ 
%
In the above, we take advantage of the convenient overloads of
\method{addAction}{QMenu} and \method{addMenu}{QMenu} that accept a
string title and return a new \class{QAction} or {QMenu},
respectively.

\subsection{Context menus}
\label{sec:context-menus}

Sometimes, actions pertain to a single widget or portion of a widget,
instead of the entire application. In such cases, the menubar is an
inappropriate container. An alternative is to place the actions in a
menu specific to their context. This is known as a context menu. The
simplest approach to providing a context menu involves two
steps. First, add the desired actions to the widget:
<<qt-app-context-add-widgets>>=
sortMenu <- Qt$QMenu("Sort by")
sapply(colnames(qdataFrame(model)), sortMenu$addAction)
tableView$addAction(sortMenu$menuAction())
@ 
%
Second, we configure the widget to display a menu of the actions when
a context menu is requested:
<<qt-app-context-policy>>=
tableView$contextMenuPolicy <- Qt$Qt$ActionsContextMenu
@ 

The simple approach is appropriate in most cases. One limitation,
however, is that the actions need to be defined prior to the context
menu request. For example, if we allowed adding and removing columns
in the spreadsheet, we would need to adjust the actions in the sort
context menu. Another example is a code entry widget, where a popup
window could list possible code completions. Under the default context
menu policy, we can implement this logic in an override of the
\method{contextMenuEvent}{QWidget} virtual method:
<<qt-app-context-dynamic, results=hide>>=
showCompletionPopup <- function(e) {
  popup <- Qt$QMenu()
  comps <- utils:::matchAvailableTopics(this$text)
  comps <- head(comps, 10) # trim if large
  sapply(comps, function(i) {
    a <- popup$addAction(i)
    qconnect(a, "triggered", function(...) this$setText(i))
  })
  popup$popup(e$globalPos())
}

qsetClass("CodeEntry", Qt$QLineEdit)
qsetMethod("contextMenuEvent", CodeEntry, showCompletionPopup)

e <- CodeEntry()
@ 
<<echo=FALSE, results=hide>>=
e$show(); e$raise()
@ 

If subclassing is undesirable, one could change the context menu
policy and connect to the signal \signal{customContextMenuRequested}:
<<qt-app-context-signal>>=
e <- Qt$QLineEdit()
e$contextMenuPolicy <- Qt$Qt$CustomContextMenu
qconnect(e, "customContextMenuRequested", showCompletionPopup)
@ 

\subsection{Toolbars}
\label{sec:toolbars}

The toolbar manages a compact layout of frequently executed actions,
so that the actions are readily available to the user without
consuming an excessive amount of screen space. We create a
\class{QToolBar} and add it to our main window:
<<qt-app-toolbar>>=
toolbar <- Qt$QToolBar()
mainWindow$setToolBar(toolbar)
@ 
%
The main window places the toolbar into a toolbar area, which might
contain multiple toolbars. It is possible, by default, for the user to
rearrange the toolbars by clicking and dragging with the mouse. If the
toolbar is pulled out of the toolbar area, it will become an
independent window.

To add items to a toolbar we might call
\begin{enumerate}
\item \method{addAction}{QToolBar} to add an action,
\item \method{addWidget}{QToolBar} to embed an arbitrary widget into
  the toolbar,
\item \method{addSeparator}{QToolBar} to place a sepearator between items.
\end{enumerate}

Before adding some actions to our toolbar, we define a function
\code{getIcon} that loads a \class{QIcon} from a file in the
\pkg{gWidgets} package:
<<echo=FALSE, results=hide>>=
getIcon <- function(nm) {
  fname <- system.file(sprintf("images/%s.gif", nm), package="gWidgets")
  Qt$QIcon(fname)
}
@ 

We create each action, set its icon, and store it in a
list for ease of manipulation at a later time in the program:
<<results=hide>>=
fileActions <- list()
fileActions$open <- Qt$QAction("Open", w)
fileActions$open$setIcon(getIcon("open"))
fileActions$save <- Qt$QAction("Save", w)
fileActions$save$setIcon(getIcon("save"))

plotActions <- list()
plotActions$barplot <- Qt$QAction("Barplot", w)
plotActions$barplot$setIcon(getIcon("barplot"))
plotActions$boxplot <- Qt$QAction("Boxplot", w)
plotActions$boxplot$setIcon(getIcon("boxplot"))
@ 

Finally, we add the actions to the toolbar, with a separator between
the file actions and plot actions:
<<results=hide>>=
sapply(fileActions, toolbar$addAction)
toolbar$addSeparator()
sapply(plotActions, toolbar$addAction)
@ 
<<echo=FALSE, results=hide>>=
w$show()
w$raise()
@ 

\class{QToolBar} will display actions as buttons, and the precise
configuration of the buttons depends on the toolbar style. For
example, the buttons might display only text, only icons or both. By
default, only icons are shown. We instruct our toolbar to
display an icon, with the label underneath:
<<qt-app-toolbar-style>>=
toolbar$setToolButtonStyle(Qt$Qt$ToolButtonTextUnderIcon)
@ 

By default, toolbars pack their items horizontally. Vertical packing
is also possible; see the \property{orientation} property. 

\subsection{Statusbars}
\label{sec:statusbars}

Main windows reserve an area for a statusbar at the bottom of the
window. The status bar is used to display messages about the current
state of the program, as well as any status tips assigned to actions.

A statusbar is an instance of the \class{QStatusBar} class. We create
one and add it to our window:
<<qt-app-statusbar>>=
statusbar <- Qt$QStatusBar()
mainWindow$setStatusBar(statusbar)
@ 

There are three types of messages in a statusbar: 
\begin{description}
\item[Temporary] where the message stays briefly, such as for status
  tips;
\item[Normal] where the message stays, but may be hidden by
  temporary messages; and
\item[Permanent] where the message is never
  hidden and appears at the far right.
\end{description}
In addition to messages, one can embed widgets into the statusbar.

We could communicate a temporary message when a dataset is loaded:
<<qt-app-statusbar-temporary>>=
statusbar$showMessage("Load complete", 1000)
@ 
%
The second argument is optional and indicates the duration of the
message in milliseconds. If not specified, the message must be
explicitly cleared with \method{clearMessage}{QStatusBar}.

Normal and permanent messages must be placed into a \class{QLabel},
which is then added to the statusbar like any other widget:
<<qt-app-statusbar-perm>>=
statusbar$addWidget(Qt$QLabel("Ready"))
statusbar$addPermanentWidget(Qt$QLabel("Version 1.0"))
@ 

\subsection{Dockable widgets}
\label{sec:dockable-widgets}

\class{QMainWindow} supports window docking. There is
a \textit{dock area} for each of the four sides of the window (top,
bottom, left and right). If a widget is assigned to a dock area, the
user may, by default, drag the widget between the docking areas. If
multiple widgets are placed into the same area, they are grouped into
a tabbed notebook. Dragging a docked widget to a location outside
of a dock area will convert the widget into a top-level window. 

For example, we could add an R graphics device as a dockable
widget. The first step is to wrap the widget in a \class{QDockWidget}:
<<qt-app-dockwidget>>=
library(qtutils)
device <- QT()
dock <- Qt$QDockWidget()
dock$setWidget(device)
@ 

By default, the dock widget is closable, movable and floatable. This
is adjustable through the \property{features} property. For example,
we could disable closing of the graphics device:
<<qt-app-dock-features>>=
dock$features <- Qt$QDockWidget$DockWidgetMovable |
                 Qt$QDockWidget$DockWidgetFloatable
@ 
%
The \property{allowedAreas} property specifies the valid docking areas
for a dock widget. By default, all are allowed.

After configuring the dock widget, we add it to the main window, in
the left docking area:
<<qt-app-dock-add>>=
mainWindow$addDockWidget(Qt$Qt$LeftDockWidgetArea, dock)
@ 
%

A second graphics device could be added with the first, on a separate
page of a tabbed notebook:
<<qt-app-dock-tabify>>=
device2 <- QT()
dock2 <- Qt$QDockWidget(device2)
mainWindow$tabifyDockWidget(dock, dock2)
@ 
%
To make \Robject{dock2} a top-level window instead, we could set the
\property{floating} property to \qcode{TRUE}:
<<qt-app-floating>>=
dock2$floating <- TRUE
@ 

\begin{example}{A main window for an IDE}{ex:qt-rstudio-layout}
  \SweaveInput{ex-qt-mainwindow}
\end{example}
