%% Layout managers

%% Overview
\Qt{} provides a set of classes to facilitate the layout of child
widgets of a component. These layout managers, derived from the
\class{QLayout} class, are tasked with determining the geometry of
child widgets, according to a specific layout algorithm. Layout
managers will generally update the layout whenever a parameter is
modified, a child widget is added or removed, or the size of the
parent changes. Unlike \GTK, where this management is tied to a
container object, \Qt{} decouples the layout from the widget.

This chapter will introduce the available layout managers, of which
there are three types: the box (\class{QBoxLayout}), grid
(\class{QGridLayout}) and form (\class{QFormLayout}). Widgets that
function primarily as containers, such as the frame and notebook, are
also described here.

\begin{example}{Synopsis of Layouts in \Qt{}}{eg:qt-layouts}
  \SweaveInput{ex-layout}
\end{example}

\section{Layout basics}
\label{sec:qt-layout-basic}

\subsection{Adding and manipulating children}

We will demonstrate the basics of layout in \Qt\/ with a horizontal box
layout, \class{QHBoxLayout}:
<<qt-layout-basic-constructor>>=
layout <- Qt$QHBoxLayout()
@ 
%
\class{QHBoxLayout}, like all other layouts, is derived from the
\class{QLayout} base class. Details specific to box layouts are
presented in Section~\ref{sec:qt-layout-box}.

A layout is not a widget. Instead, a layout is set on a
widget, and the widget delegates the layout of its children to the
layout object:
<<qt-layout-basic-setLayout, results=hide>>=
widget <- Qt$QWidget()
widget$setLayout(layout)
@ 

%% adding a widget
Child widgets are added to a container through the
\method{addWidget}{QLayout} method:

<<qt-layout-basic-add, results=hide>>=
layout$addWidget(Qt$QPushButton("Push Me"))
@
%
In addition to adding child widgets, one can nest child layouts by
calling \method{addLayout}{QLayout}.

%% referring to child items
Internally, layouts store child components as items of class
\class{QLayoutItem}. The item at a given index ($0$-based) is returned by
the \method{itemAt}{QLayout} method. We get the first item in our layout:
<<qt-layout-basic-item-at>>=
item <- layout$itemAt(0)
@ 
%
The actual child widget is retrieved by calling the \meth{widget}
method on the item:
<<qt-layout-basic-widget>>=
button <- item$widget()
@ 

%% removing a child
\Qt{} provides the methods \method{removeItem}{QLayout} and
\method{removeWidget}{QLayout} to remove an item or widget from a
layout:
<<qt-layout-basic-remove, results=hide>>=
layout$removeWidget(button)
@ 
%
Although the widget is no longer managed by a layout, its parent
widget is unchanged. The widget will not be destroyed (removed from
memory) as long as it has a parent. Thus, to destroy a widget, one
should set the parent of the widget \code{NULL} using
\method{setParent}{QWidget}:
<<qt-layout-basic-setParent, results=hide>>=
button$setParent(NULL)
@ 

\subsection{Size and space negotiation}

\ilayout{Space allocation}The allocation of space to child widgets depends on several factors.
The \Qt{} documentation for layouts spells out well the
steps:\footnote{\url{http://doc.qt.nokia.com/4.7/layout.html}}
\\
\begin{enumerate}
\item All the widgets will initially be allocated an amount of space
  in accordance with their \property{sizePolicy}{QWidget} and \property{sizeHint}{QWidget}.

\item If any of the widgets have stretch factors set, with a value
  greater than zero, then they are allocated space in proportion to
  their stretch factor.

\item If any of the widgets have stretch factors set to zero they will
  only get more space if no other widgets want the space. Of these,
  space is allocated to widgets with an expanding size policy first.

\item Any widgets that are allocated less space than their minimum
  size (or minimum size hint if no minimum size is specified) are
  allocated this minimum size they require. (Widgets don't have to
  have a minimum size or minimum size hint in which case the stretch
  factor is their determining factor.)

\item Any widgets that are allocated more space than their maximum
  size are allocated the maximum size space they require. (Widgets do
  not have to have a maximum size in which case the stretch factor is
  their determining factor.)
\end{enumerate}
\vspace{12pt}

Every widget returns a size hint to the layout from the
\method{sizeHint}{QWidget} method/property. The interpretation of the
size hint depends on the \property{sizePolicy}{QWidget} property. The
size policy is an object of class \class{QSizePolicy}. It contains a
separate policy value, taken from the \qtenumeration{QSizePolicy}
enumeration, for the vertical and horizontal directions. If a layout
is set on a widget, then the widget inherits its size policy from the
layout. The possible size policies are listed in
Table~\ref{tab:qt:size-policies}.

<<echo=FALSE, results=tex>>=
DF <- rbind(
            c("Fixed","Require the size hint exactly"),
            c("Minimum", "Treat the size hint as the minimum, allowing expansion"),
            c("Maximum", "Treat the size hint as the maximum, allowing shrinkage"),
            c("Preferred", "Request the size hint, but allow for either expansion or shrinkage"),
            c("Expanding", "Treat like \\code{Preferred}, except the widget desires  as much space as possible"),
            c("MinimumExpanding", "Treat like \\code{Minimum}, except the widget desires  as much space as possible"),
            c("Ignored", "Ignore the size hint and request as much space as possible")
           )
colnames(DF) <- c("Policy","Meaning")
            cat(booktabs(DF,
                         colTypes=c("l","p{0.7\\textwidth}"),
                         caption="Possible size policies from \\class{QSizePolicy}",
                         label="tab:qt:size-policies"))
@ 

As an example, consider \class{QPushButton}. It is the convention that
a button will only allow horizontal, but not vertical, expansion. It
also requires enough space to display its entire
label. Thus a \class{QPushButton} instance returns a size hint
depending on the label dimensions and has the policies 
\code{Fixed} and \code{Minimum} as its vertical and horizontal policies
respectively. We could prevent a button from expanding at all:
<<sizePolicy, results=hide>>=
button <- Qt$QPushButton("No expansion")
button$setSizePolicy(vertical = Qt$QSizePolicy$Fixed, 
                      horizontal = Qt$QSizePolicy$Fixed)
@   

Thus, the sizing behavior is largely inherent to the widget or its
layout, if any, rather than any parent layout parameters. This is a
major difference from \GTK, where a widget can only request a minimum
size and all else depends on the parent container widget. The \Qt{}
approach seems better at encouraging consistency in the layout
behavior of widgets of a particular type.

Most widgets attempt to fill the allocated space; however, this is not
always appropriate, as in the case of labels. In such cases, the
widget will not expand and needs to be aligned within its space. By
default, the widget is centered. We can control the alignment of a
widget via the \method{setAlignment}{QLayout} method. For example, we
align the label to the left side of the layout through:
<<echo=FALSE, results=hide>>=
layout <- Qt$QHBoxLayout()
@ 
%
<<qt-layout-basic-alignment, results=hide>>=
label <- Qt$QLabel("Label")
layout$addWidget(label)
layout$setAlignment(label, Qt$Qt$AlignLeft)
@ 
% 
Alignment is also possible to the top, bottom and right. The alignment
values are flags and may be combined with \OR{} to specify both vertical and
horizontal alignment.

The spacing between every cell
of the layout is in the \code{spacing} property, the following requests $5$ pixels of space:
<<qt-layout-basic-spacing,results=hide>>=
layout$spacing <- 5L
@ 

\section{Box layouts}
\label{sec:qt-layout-box}

\ilayout{box layout}
Box layouts arrange child widgets as if they were packed into a box in
either the horizontal or vertical orientation. The \class{QHBoxLayout}
class implements a horizontal layout whereas \class{QVBoxLayout}
provides a vertical one. Both of these classes extend the
\class{QBoxLayout} class, where most of the functionality is
documented.  We create a horizontal layout and place it in a window:
<<qt-layout-box, results=hide>>=
hbox <- Qt$QHBoxLayout()
widget <- Qt$QWidget()
w$setLayout(hbox)
@ 
 
Child widgets are added to a box container through the
\method{addWidget}{QLayout} method:
<<qt-layout-box-add, results=hide>>=
buttons <- sapply(letters[1:3], Qt$QPushButton)
sapply(buttons, hbox$addWidget)
@
% 
The \method{direction}{QBoxLayout} property specifies the direction in
which the widgets are added to the layout. By default, this is left to
right (top to bottom for a vertical box).  

The \method{addWidget}{QBoxLayout} method for a box layout takes two
optional parameters: the \ilayout{stretch}stretch factor and the alignment.  Stretch
factors proportionally allocate space to widgets when they expand.\footnote{For
those familiar with \GTK, the difference between a stretch factor of
$0$ and $1$ is roughly equivalent to the difference between
\qcode{FALSE} and \qcode{TRUE} for the value of the
\argument{expand}{gtkBoxPackStart} parameter to
\function{gtkBoxPackStart}.} However, recall that the widget size
policy and hint can alter the effect of a stretch factor. After the
child has been added, the stretch factor may be modified with
\meth{setStretchFactor}:
<<qt-layout-box-stretch,results=hide>>=
hbox$setStretchFactor(buttons[[1]], 2.0) 
@ 
%
If the layout later grows horizontally, the first button will grow
(stretch) at twice the rate of the other buttons.

<<stretch_expand, echo=FALSE, results=hide>>=
## Not shown
## Example of various combinations of stretch, alignment, sizePolicy
## no stretch, no expand
w <- Qt$QWidget(); w$setWindowTitle("No stretch, no expand")
w$setLayout(g <- Qt$QHBoxLayout())
buttons <- sapply(letters[1:3], Qt$QPushButton)
sapply(buttons, g$addWidget)
w$setMinimumSize(400, 50)
w$show()

## no stretch, expand for first
w <- Qt$QWidget();  w$setWindowTitle("No stretch, no expand, size Policy")
w$setLayout(g <- Qt$QHBoxLayout())

buttons <- sapply(letters[1:3], Qt$QPushButton)
sapply(buttons, g$addWidget)

b <- g$itemAt(0L)$widget()
b$setSizePolicy(Qt$QSizePolicy$Expanding, Qt$QSizePolicy$Fixed) 
for(i in 1:2) {
  b <- g$itemAt(i)$widget()
  b$setSizePolicy(Qt$QSizePolicy$Fixed, Qt$QSizePolicy$Fixed) 
}
w$setMinimumSize(400, 50)
w$show()                

## stretch
w <- Qt$QWidget(); w$setWindowTitle("Using stretch factors")
w$setLayout(g <- Qt$QHBoxLayout())
buttons <- sapply(letters[1:3], Qt$QPushButton)
for(i in 1:3) g$addWidget(buttons[[i]], stretch=i)


w$setMinimumSize(400, 50)
w$show()                

## no stretch; alignment
w <- Qt$QWidget(); w$setWindowTitle("Using alignment")
w$setLayout(g <- Qt$QHBoxLayout())
g$addWidget(Qt$QPushButton("NW"), stretch=0, Qt$Qt$AlignLeft | Qt$Qt$AlignTop)
g$addWidget(Qt$QPushButton("Center"), stretch=0, Qt$Qt$AlignHCenter | Qt$Qt$AlignVCenter)
g$addWidget(Qt$QPushButton("SE"), stretch=0, Qt$Qt$AlignRight | Qt$Qt$AlignBottom)
w$setMinimumSize(400, 400)
w$show()
##
@ 





<<echo=FALSE, results=hide>>=
## Not shown
## example of inserting "A" at index=1. 0 1 2 3 -> 0 A 1 2 3
w <- Qt$QWidget()
w$setWindowTitle("Insert example")
w$setLayout(g <- Qt$QHBoxLayout())
for(i in 0:2) g$addWidget(Qt$QPushButton(as.character(i)))
g$insertWidget(1L, Qt$QPushButton("inserted"))
w$show()
@ 

%% spacing
\paragraph{Spacing}

There are two types of spacing between two children: fixed and
expanding. Fixed spacing between any two children was already
described. To add a fixed amount of space between two specific
children, call the \ilayout{spacing}\meth{addSpacing} method while populating the
container. The following line is from Example~\ref{eg:qt-layouts}:
<<create_hb, echo=FALSE, results=hide>>=
hbox <- Qt$QHBoxLayout()
@ 
<<qt-layout-box-spacing, results=hide>>=
hbox$addSpacing(12L)
hbox$addWidget(Qt$QPushButton("d"))
@ 
%
We have placed a gap of $12$ pixels between button \qcode{c} and the
new button \qcode{d}.

An expanding, spring-like spacer between two widgets is known as a
\ilayout{springs}\textit{stretch}. We add a stretch with a factor of $2.0$ and
subsequently add a child button that will be pressed against the right
side of the box as the layout grows horizontally:
<<qt-layout-box-stretch, results=hide>>=
hbox$addStretch(2)
hbox$addWidget(Qt$QPushButton("Help..."))
@ 
%
This is just a convenience for adding an invisible widget with some
stretch factor.

\paragraph{Struts}

It is sometimes desirable to restrict the minimum size of a layout in the
perpendicular direction. For a horizontal box, this is the height. The
box layout provides the \ilayout{struts}\textit{strut} for this purpose:
<<qt-layout-box-strut, results=hide>>=
hbox$addStrut(10)                    # at least 10 pixels high
@ 
%


\section{Grid layouts}
\label{sec:grid-layouts}

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-qt-layout-example}
  \caption{A mocked up layout using the \class{QGridLayout}
    class. There are $3$ columns and $4$ non-homogeneous rows, in addition,  several child
    components span more than one cell.}
  \label{fig:qt-layout-example}
\end{figure}

\ilayout{grid layout}
The \class{QGridLayout} class provides a grid layout for aligning its
child widgets into rows and columns.  To illustrate grid layouts we
mock up a GUI centered around a text area widget
(Figure~\ref{fig:qt-layout-example}). To begin, we create the window
with the grid layout:
<<LayoutExample, results=hide>>=
window <- Qt$QWidget()
window$setWindowTitle("Layout example")
layout <- Qt$QGridLayout()
window$setLayout(layout)
@ 

When we add a child to the grid layout, we need to specify the
zero-based row and column indices:
<<addEntryWidget, results=hide>>=
layout$addWidget(Qt$QLabel("Entry:"), 0, 0)
layout$addWidget(Qt$QLineEdit(), 0, 1, rowspan = 1, colspan = 2)
@ 
%
In the second call to \meth{addWidget}, we pass values to the optional
arguments for the row and column span. These are the numbers of rows
and columns, respectively, that are spanned by the child. For our
second row, we add a labeled combo box:
<<addChoiceWidget, results=hide>>=
layout$addWidget(Qt$QLabel("Choice:"), 1, 0)
layout$addWidget(Qt$QComboBox(), 1, 1)
@ 

The bottom three cells in the third column are managed
by a sub layout, in this case a vertical box layout. We use a label as
a stub and set a frame style to have it stand out:
<<addBox, results=hide>>=
layout$addLayout(sub_layout <- Qt$QVBoxLayout(), 
                 1, 2, rowspan=3, 1)
sub_layout$addWidget(label <- Qt$QLabel("Category\nSelector"))
label$setFrameStyle(Qt$QFrame$Box)
@ 

The text edit widget is added to the third row, second column:
<<addLabel, results=hide>>=
layout$addWidget(Qt$QLabel("Text:"), 2, 0, Qt$Qt$AlignTop)
layout$addWidget(edit <- Qt$QTextEdit(), 2, 1)
@ 
% 
Since this widget will expand, we align the label to the top of its
cell. Otherwise, it will be centered in the vertical direction.

Finally we add a space for information on the fourth row:
<<addLabel2, results=hide>>=
layout$addWidget(label <- Qt$QLabel("More info:"), 3, 0, 
                 rowspan = 1, colspan = 2)
label$setSizePolicy(Qt$QSizePolicy$Fixed, 
                    Qt$QSizePolicy$Preferred)
label$setFrameStyle(Qt$QFrame$Box)
@ 
% 
Again we draw a frame around the label. By default the box would
expand to fill the space of the two columns, but we prevent this
through a \qcode{Fixed} size policy.

%% sizing, spacing
There are a number of parameters controlling the sizing and spacing of
the rows and columns. The concepts apply equivalently to both rows and
columns, so we will limit our discussion to columns, without loss of
generality.  A minimum width is set through
\method{setColumnMinimumWidth}{QGridLayout}. The actual minimum width
will be increased, if necessary, to satisfy the minimal width
requirements of the widgets in the column. If more space is available
to a column than requested, the extra space is apportioned according
to the \code{stretch} factors. A column stretch factor is set by
calling the \method{setColumnStretch}{QGridLayout} method.

Since there are no stretch factors set in our example, the space
allocated to each row and column would be identical when resized. To
allocate extra space to the text area, we set a positive stretch
factor for the third row and second column:
<<results=hide>>=
layout$setRowStretch(2, 1)                 # third row
layout$setColumnStretch(1,1)               # second column
@ 
% 
As it is the only item with a positive stretch factor, it will be the
only widget to expand when the parent widget is resized.

%% spacing
The spacing between widgets can be set in both directions via the
\property{spacing}{QLayout} property, or set for a particular
direction with \method{setHorizontalSpacing}{QGridLayout} or
\method{setVerticalSpacing}{QGridLayout}. The default values are
derived from the style.

%% indexing
The method \method{itemAtPosition}{QGridLayout} returns the
\class{QLayoutItem} instance corresponding to the specified row and
column:
<<qt-layout-grid-at>>=
edit <- layout$itemAtPosition(0, 1)$widget()
@
%
The item method \method{widget}{QLayoutItem} returns the corresponding
widget. Removing a widget is similar to a box layout, using
\method{removeItem}{QLayout} or \method{removeWidget}{QLayout}.  The
methods \method{rowCount}{QGridLayout} and
\method{columnCount}{QGridLayout} return the dimensions of the grid.

%% ML: merged into main text
% \begin{example}{Using a grid layout}{eg-qt-gridlayout}
%   \SweaveInput{ex-qt-grid-layout-form}
% \end{example}

%% Moved this example into tcltk chapter
% \begin{example}{Using the grid layout and a stacked widget to display
%     a calendar}{eg-qt-calendar}
%   \SweaveInput{ex-qt-grid-layout}
% \end{example}

\section{Form layouts}
\label{sec:form-layouts}

Forms can easily be arranged with the grid layout, but \Qt{} provides
a convenient high-level form layout (\class{QFormLayout}) that
conforms to platform-specific conventions. A form consists of a number
of rows, where each row has a label and an input widget. We create a
form and add some rows for gathering parameters to the
\function{dnorm} function:
<<FormLayoutExample, results=hide>>=
window <- Qt$QWidget()
window$setWindowTitle("Wrapper for 'dnorm' function")
window$setLayout(layout <- Qt$QFormLayout())
sapply(c("quantile", "mean", "sd"), function(statistic) {
  layout$addRow(statistic, Qt$QLineEdit())
})
layout$addRow(Qt$QCheckBox("log"))
@
%
<<echo=FALSE, results=hide>>=
window$show(); window$raise()
@ 
%
The first three calls to \function{addRow} take a string for the label
and a text entry for entering a numeric value. Any widget could serve
as the label. A field may be any widget or layout. The final call to
\function{addRow} places only a single widget in the row.  As with
other layouts, we could call \method{setSpacing}{QFormLayout}
to adjust the spacing between rows.

To retrieve a widget from the layout, call the
\method{itemAt}{QFormLayout} method, passing the zero-based row index
and the role of the desired widget. Here, we obtain the edit box for
the quantile parameter:
<<qt-layout-form-at>>=
item <- layout$itemAt(0, Qt$QFormLayout$FieldRole)
quantile_edit <- item$widget()
@ 

\section{Frames}
\label{sec:framed-layouts}

The frame widget, \class{QGroupBox}, groups conceptually related
widgets by drawing a border around them and displaying a
title. \class{QGroupBox} is often used to group radio buttons, see
Section~\ref{sec:radio-groups} for an example.  The title, stored in
the \property{title}{QGroupBox} property, may be aligned to left, right or
center, depending on the \property{alignment}{QGroupBox} property.
%% , see Figure~\ref{fig:group-box-example}. 
If the \property{checkable}{QGroupBox} property is \qcode{TRUE}, the
contents can have their sensitivity to events toggled by clicking an accompanying
check button.

%% TODO: make this a figure
<<groupBoxExample, echo=FALSE, results=hide>>=
## Not shown, Group box example of title, alignment, flat, checkable
f <- Qt$QGroupBox("Example group box")
lyt <- Qt$QVBoxLayout(); f$setLayout(lyt)
lyt$addWidget(changeTitle <- Qt$QPushButton("Change title"))
lyt$addWidget(changeAlignment <- Qt$QPushButton("Cycle Alignment"))
lyt$addWidget(toggleFlat <- Qt$QPushButton("Toggle flat"))
lyt$addWidget(toggleCheckable <- Qt$QPushButton("Toggle checkable"))
f$show()

qconnect(changeTitle, "clicked", function(checked) {
  f$setTitle("New title")
})
qconnect(changeAlignment, "clicked", function(checked) {
  aligns <- c(Qt$Qt$AlignLeft, Qt$Qt$AlignHCenter, Qt$Qt$AlignRight)
  curAlign <- f$alignment
  ind <-   which(curAlign == aligns)
  f$setAlignment(aligns[c(2,3,1)[ind]])
})
qconnect(toggleFlat, "clicked", function(checked) {
  f$setFlat(!f$flat)
})
qconnect(toggleCheckable, "clicked", function(checked) {
  f$setCheckable(!f$checkable)
})
@ 

\section{Separators}
\label{sec:qt-widget-separator}

Like frames, a horizontal or vertical line is also useful for visually
separating widgets into conceptual groups. There is no explicit line
or separator widget in \Qt. Rather, one configures the more general
widget \class{QFrame}, which draws a frame around its
children. Somewhat against intuition, a frame can take the shape of a
line:
<<qt-widget-separator>>=
separator <- Qt$QFrame()
separator$frameShape <- Qt$QFrame$HLine
@ 
% 
This yields a horizontal separator. A frame shape of
\code{Qt\$QFrame\$VLine} would produce a vertical separator.

\section{Notebooks}
\label{sec:notebooks}

A notebook container is provided by the class \class{QTabWidget}:
<<qt-layout-notebook>>=
notebook <- Qt$QTabWidget()
@

To create a page, one needs to specify the label for the tab and the
widget to display when the page is active:
<<qt-layout-notebook-addtab, results=hide>>=
notebook$addTab(Qt$QPushButton("page 1"), "page 1")
icon <- Qt$QIcon("small-R-logo.jpg")
notebook$addTab(Qt$QPushButton("page 2"), icon,  "page 2")
@ 
%
As shown in the second call to \method{addTab}{QTabWidget}, one can
provide an icon to display next to the tab label. We can also add a
tooltip for a specific tab, using zero-based indexing:
<<qt-layout-notebook-tooltip, results=hide>>=
notebook$setTabToolTip(0, "This is the first page")
@ 

The \property{currentIndex}{QTabWidget} property holds the zero-based index of the
active tab. We make the second tab active:
<<qt-layout-notebook-current>>=
notebook$currentIndex <- 1
@ 

The tabs can be positioned on any of the four sides of the notebook;
this depends on the \property{tabPosition} property. By default, the
tabs are on top, or \qcode{North}. We move them to the bottom:
<<qt-layout-notebook-pos, results=hide>>=
notebook$tabPosition <- Qt$QTabWidget$South
@ 

Other features include close buttons, movable pages by drag and drop,
and scroll buttons for when the number of tabs exceeds the available
space. We enable all of these:
<<qt-layout-notebook-features, results=hide>>=
notebook$tabsClosable <- TRUE
qconnect(notebook, "tabCloseRequested", function(index) {
  notebook$removeTab(index)
})
notebook$movable <- TRUE
notebook$usesScrollButtons <- TRUE
@ 
%
We need to connect to the \signal{tabCloseRequested} signal to
actually close the tab when the close button is clicked.

%% JV added this, simple useful application
\begin{example}{A help page browser}{ex-qt-help-browser}
  This example shows how to create a help browser using the
  \class{QWebView} class to show web pages. The only method from this
  class we use is \method{setUrl}{QWebView}. The key to this is
  informing \function{browseURL} to open web pages using an \R\/
  function, as opposed to the default system browser. 
  
  \begin{figure}
    \centering
    \includegraphics[width=.9\textwidth]{fig-qt-help-browser.png}
   \caption{An example where a notebook is used to display various help pages shown in a \class{QWebView} instance}
    \label{fig:qt-help-browser}
  \end{figure}

<<HelpBrowser, results=hide>>=
qsetClass("HelpBrowser", Qt$QTabWidget, function(parent = NULL) {
  super(parent)
  #
  this$tabsClosable <- TRUE
  qconnect(this, "tabCloseRequested", function(index) {
    this$removeTab(index)
  })
  this$movable <- TRUE; this$usesScrollButtons <- TRUE
  #
  this$browser <- getOption("browser")
  options("browser" =  function(url) openPage(url))
})
@   
  
The lone new method for this class is one called to open a page. The
\code{url} value is generated by \R's help system.
<<openPage, results=hide>>=
qsetMethod("openPage", HelpBrowser, function(url) {
  tokens <- strsplit(url, "/")[[1]]
  tab_title <- sprintf("%s: %s", tokens[length(tokens)-2], 
                       tokens[length(tokens)])
  webview <- Qt$QWebView()
  webview$setUrl(Qt$QUrl(url))
  this$currentIndex <- addTab(webview, tab_title)
})
@ 

Figure~\ref{fig:qt-help-browser} was created through this invocation:
<<illustrateHelpBrowser, results=hide>>=
help_browser <- HelpBrowser()
help_browser$windowTitle <- "Help Browser example"
help_browser$show()
help_browser$raise()
##
options("help_type"="html")
help("mean")
help("boxplot")
@ 
\end{example}


\paragraph{General widget stacking}
It is sometimes useful to have a widget that only shows one of its
widgets at once, like a \class{QTabWidget}, except without the
tabs. There is no way to hide the tabs of \class{QTabWidget}. Instead,
one should use \class{QStackedWidget}, which stacks its children so
that only the widget on top of the stack is visible. There is no way
for the user to switch between children; it must be done
programmatically. The actual layout is managed by
\class{QStackedLayout}, which should be used directly if only a layout
is needed, e.g., as a sub-layout.

\section{Scroll areas}
\label{sec:scrolling-layouts}

Sometimes a widget is too large to fit in a layout and thus must be
displayed partially. Scroll bars then allow the user to adjust the
visible portion of the widget. Widgets that often become too large
include tables, lists and text edit panes. These inherit from
\class{QAbstractScrolledArea} and thus natively provide scroll bars
without any special attention from the user. Occasionally, we are
dealing with a widget that lacks such support and thus need to
explicitly embed the widget in a \class{QScrollArea}. This often
arises when displaying graphics and images. To demonstrate, we will
create a simple zoomable image viewer.  The user can zoom in and out
and use the scroll bars to pan around the image. First, we place an
image in a label and add it to a scroll area:
<<results=hide>>=
image <- Qt$QLabel()
image$pixmap <- Qt$QPixmap("someimage.png")
scroll_area <- Qt$QScrollArea()
scroll_area$setWidget(image)
@ 
%

Next, we define a function for zooming the image:
<<qt-layout-scrolled-zoom>>=
zoomImage <- function(x = 2.0) {
  image$resize(x * image$pixmap$size())
  updateScrollBar <- function(sb) {
    sb$value <- x * sb$value + (x - 1) * sb$pageStep / 2
  }
  updateScrollBar(scroll_area$horizontalScrollBar())
  updateScrollBar(scroll_area$verticalScrollBar())
}
@
%
Of note here is that we are scaling the size of the pixmap using the
\function{*} function, which \pkg{qtbase} is forwarding to the
corresponding method on the \class{QSize} object. Updating the scroll
bars is also somewhat tricky, since their value corresponds to the
top-left, while we want to preserve the center point.  We leave the
interface for calling the \function{zoomImage} function as an exercise
for the interested reader.

The geometry of a scroll area is such that there is an empty space in
the corner between the ends of the scroll bars. To place a widget in
the corner, pass it to the
\method{setCornerWidget}{QAbstractScrollArea} method.

<<echo=FALSE, results=hide>>=
scroll_area$show()
scroll_area$raise()
@
% 

\section{Paned windows}
\label{sec:paned-windows}

\class{QSplitter} is a split pane widget, a container that splits its
space between its children, with draggable separators that adjust the
balance of the space allocation.

Unlike \class{GtkPaned} in \GTK{}, there is no limit on the number of
child panes. We add three with \method{addWidget}{QSplitter}:
<<splitter, results=hide>>=
splitter <- Qt$QSplitter()
splitter$addWidget(Qt$QLabel("One"))
splitter$addWidget(Qt$QLabel("Two"))
splitter$addWidget(Qt$QLabel("Three"))
@ 



The orientation can be adjusted dynamically through \method{setOrientation}{QSplitter}
<<splitterOrientation, results=hide>>=
splitter$setOrientation(Qt$Qt$Vertical)
@ 
%

In addition to user adjusting the space allocation with a mouse, one
can adjust the sizes programmatically through the
\method{setSizes}{QSplitter} method:
<<qt-layout-splitter-set, results=hide>>=
splitter$setSizes(c(100L, 200L, 300L))
@ 

If needed, one can connect to the \signal{splitterMoved} signal. The
callback receives the position of the moved handle and its index.

% MFL: it's a protected method, only seen by subclasses
%% \XXX{JV: This seems to be true!}
% The \method{moveSplitter}{QSplitter} method is not implemented, so
% programmatically moving the a splitter handle is not possible.

<<echo=FALSE, results=hide>>=
splitter$show()
splitter$raise()
@ 
