This example shows how to create an aggregating view for a table
model. We will subclass \class{QLabel} to display a mean value for a
given column. Our custom view class will be a sub-class of
\class{QLabel}. This is a simple illustration, where we
provide a label with text summarizing the mean of the values in the
first column of the model.

In the constructor we define a label property and call our
\meth{setModel} method:
<<CustomView, results=hide>>=
library(qtbase)
qsetClass("MeanLabel", Qt$QLabel, function(model, column = 0, parent=NULL) {
  super(parent)
  this$model <- model
  this$column <- column
  qconnect(model, "dataChanged", function(topLeft, bottomRight) {
    if (topLeft$column() <= column && bottomRight$column() >= column)
      updateMean()
  })
  updateMean()
})
@ 
%

Whenever the data in the model changes, we need to update the display
of the mean value. This private method performs the update:
<<label, results=hide>>=
qsetMethod("updateMean", MeanLabel, function() {
  if(is.null(model)) {
    txt <- "No model"
  } else {
    df <- qdataFrame(model)
    cname <- colnames(df)[column+1L]
    xbar <- mean(df[,cname])
    txt <- sprintf("Mean for '%s': %s", cname, xbar)
  }
  this$text <- txt
}, access="private")
@ 
%

To demonstrate the use of our custom view, we put it in a simple GUI
along with an editable data frame view. When we edit the data, the
text in our label is updated accordingly.
<<testItOut, results=hide>>=
model <- qdataFrameModel(mtcars, editable=colnames(mtcars))

tableView <- Qt$QTableView()
tableView$setModel(model)
tableView$setEditTriggers(Qt$QAbstractItemView$DoubleClicked)

meanLabel <- MeanLabel(model)

w <- Qt$QWidget()
lyt <- Qt$QVBoxLayout()
w$setLayout(lyt)
lyt$addWidget(tableView)
lyt$addWidget(meanLabel)
@ 
%
<<echo=FALSE, results=hide>>=
#w$show()
#w$raise()
@ 
