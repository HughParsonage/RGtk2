This example shows how to create an aggregating view for a table
model. We will subclass \class{QLabel} to create a widget
(Figure~\ref{fig:qt-custom-view}) that is synchronized to display the
mean value of a given column.

\begin{figure}
  \centering
  \includegraphics[width=.7\textwidth]{fig-qt-custom-view}
  \caption{Using a label as a custom view. In this case, when the
    editing is committed, the label is updated to reflect the new mean.}
  \label{fig:qt-custom-view}
\end{figure}


In the constructor we define a label property and call our
\meth{setModel} method:
<<echo=FALSE>>=
library(qtbase)
@ 
<<CustomView, results=hide>>=
qsetClass("MeanLabel", Qt$QLabel, function(model, column = 0, 
                                           parent=NULL) {
  super(parent)
  this$model <- model
  this$column <- column
  updateMean()                          # initialize text
  ##
  qconnect(model, "dataChanged", 
           function(topLeft, bottomRight) {
             if (topLeft$column() <= column && 
                 bottomRight$column() >= column)
               updateMean()
           })
})
@ 
%

Whenever the data in the model changes, we want to update the display
of the mean value. In the above we call this private method to perform the update:
<<label, results=hide>>=
qsetMethod("updateMean", MeanLabel, function() {
  if(is.null(model)) {
    txt <- "No model"
  } else {
    df <- qdataFrame(model)
    cname <- colnames(df)[column+1L]
    xbar <- mean(df[,cname])
    txt <- sprintf("Mean for '%s': %s", cname, xbar)
  }
  this$text <- txt
}, access="private")
@ 
%

To demonstrate the use of our custom view, we put it in a simple GUI
along with an editable data frame view. When we edit the data, the
text in our label is updated accordingly.
<<testItOut, results=hide>>=
model <- qdataFrameModel(mtcars, editable=colnames(mtcars))

tableView <- Qt$QTableView()
tableView$setModel(model)
tableView$setEditTriggers(Qt$QAbstractItemView$DoubleClicked)
##
meanLabel <- MeanLabel(model)
##
w <- Qt$QWidget()
lyt <- Qt$QVBoxLayout()
w$setLayout(lyt)
lyt$addWidget(tableView)
lyt$addWidget(meanLabel)
@ 
%
<<echo=FALSE, results=hide>>=
w$show()
w$raise()
@ 
