This example shows how to create an aggregating view for a table
model. We will subclass \class{QLabel} to create a widget
(Figure~\ref{fig:qt-custom-view}) that is synchronized to display the
mean value of a given column.

\begin{figure}
  \centering
  \includegraphics[width=.7\textwidth]{fig-qt-custom-view}
  \caption{Using a label as a custom view. In this case, when the
    editing is committed, the label is updated to reflect the new mean.}
  \label{fig:qt-custom-view}
\end{figure}


In the constructor we define a label property and call our
\meth{setModel} method:
<<echo=FALSE>>=
library(qtbase)
@ 
<<CustomView, results=hide>>=
qsetClass("MeanLabel", Qt$QLabel, 
          function(model, column = 0, parent = NULL) 
          {
            super(parent)
            this$model <- model
            this$column <- column
            updateMean()     # initialize text
            qconnect(model, "dataChanged", 
                     function(top_left, bottom_right) {
                       if (top_left$column() <= column && 
                           bottom_right$column() >= column)
                         updateMean()
                     })
          })
@ 
%

Whenever the data in the model changes, we want to update the display
of the mean value. In the above we call this private method to perform the update:
<<label, results=hide>>=
qsetMethod("updateMean", MeanLabel, function() {
  if(is.null(model)) {
    text <- "No model"
  } else {
    DF <- qdataFrame(model)
    colname <- colnames(DF)[column + 1L]
    text <- sprintf("Mean for '%s': %s", colname, 
                    mean(DF[,colname]))
  }
  this$text <- text
}, access="private")
@ 
%

To demonstrate the use of our custom view, we put it in a simple GUI
along with an editable data frame view. When we edit the data, the
text in our label is updated accordingly.
<<testItOut, results=hide>>=
model <- qdataFrameModel(mtcars, editable = colnames(mtcars))

table_view <- Qt$QTableView()
table_view$setModel(model)
table_view$setEditTriggers(Qt$QAbstractItemView$DoubleClicked)
##
mean_label <- MeanLabel(model)
##
window <- Qt$QWidget()
layout <- Qt$QVBoxLayout()
window$setLayout(layout)
layout$addWidget(table_view)
layout$addWidget(mean_label)
@ 
%
<<echo=FALSE, results=hide>>=
window$show()
window$raise()
@ 
