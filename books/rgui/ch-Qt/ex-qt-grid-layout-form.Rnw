<<echo=FALSE, results=hide>>=
library(qtbase)
@ 

\begin{figure}
  \centering
  \includegraphics[width=.6\textwidth]{fig-qt-layout-example}
  \caption{A mocked up layout using the \class{QGridLayout} class.}
  \label{fig:qt-layout-example}
\end{figure}


To illustrate grid layouts we mock up a GUI centered around a central
text area widget (FIgure~\ref{fig:qt-layout-example}).
We begin by setting a grid layout for our parent widget:
<<results=hide>>=
w <- Qt$QWidget()
w$setWindowTitle("Layout example")
lyt <- Qt$QGridLayout()
w$setLayout(lyt)
@ 
%
Our first row has a label in column 1 and a text-entry widget spanning
two columns.
<<results=hide>>=
lyt$addWidget(Qt$QLabel("Class:"), 0, 0)
lyt$addWidget(Qt$QLineEdit(), 0, 1, rowspan=1, colspan=2)
@ 
%
Our second row starts with a label and a combobox, each spanning the
default of one column:
<<results=hide>>=
lyt$addWidget(Qt$QLabel("Method:"), 1, 0)
lyt$addWidget(Qt$QComboBox(), 1, 1)
@ 
%
The bottom three cells in the third column are managed
by a sublayout, in this case a vertical box layout. We use a label as
a stub and set a frame style to have it stand out.
<<results=hide>>=
lyt$addLayout(slyt <- Qt$QVBoxLayout(), 1, 2, rowspan=3, 1)
slyt$addWidget(l <- Qt$QLabel("Category\nSelector"))
l$setFrameStyle(Qt$QFrame$Box)
@ 

The text edit widget is added to the third row, second column:
<<results=hide>>=
lyt$addWidget(Qt$QLabel("Text:"), 2, 0, Qt$Qt$AlignTop)
lyt$addWidget(l <- Qt$QTextEdit(), 2, 1)
@ 
%
Since this widget will expand, we align the label to the top of its
cell. Otherwise, it will be centered in the vertical direction.

Finally we add a space for information on the fourth row:
<<results=hide>>=
lyt$addWidget(l <- Qt$QLabel("More info:"), 3, 0, 
              rowspan=1, colspan=2)
l$setSizePolicy(Qt$QSizePolicy$Fixed, Qt$QSizePolicy$Preferred)
l$setFrameStyle(Qt$QFrame$Box)
@ 
%
Again we draw a frame around the label. By default the box would
expand to fill the space of the two columns, but we prevent this
through a \qcode{Fixed} size policy.

Since there are no stretch factors set, the space allocated to each
row and column would be identical when resized. To allocate extra
space to the text area, we set a positive stretch factor for the third
row and second column:
<<results=hide>>=
lyt$setRowStretch(2, 1)
lyt$setColumnStretch(1,1)
@ 
%
As it is the only item with a positive stretch factor, it will be the
only widget to expand when the parent widget is resized.

<<echo=FALSE, results=hide>>=
w$show()
w$raise()
@ 
